
Progetto_GusmaraAndrea_831141.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008578  08008578  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008580  08008580  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  20000070  080085f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  080085f8  00020d30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac15  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035a0  00000000  00000000  0004acb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024d8  00000000  00000000  0004e258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002358  00000000  00000000  00050730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b4ed  00000000  00000000  00052a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014112  00000000  00000000  0007df75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110d18  00000000  00000000  00092087  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a2d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a398  00000000  00000000  001a2e1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08008484 	.word	0x08008484

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08008484 	.word	0x08008484

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <lcdInit>:
#define ADDRESS     0x30

static uint8_t _col, _row;
static I2C_HandleTypeDef *_hi2c;

void lcdInit(I2C_HandleTypeDef *hi2c) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	_col = _row = 0;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <lcdInit+0x28>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <lcdInit+0x28>)
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <lcdInit+0x2c>)
 8000604:	701a      	strb	r2, [r3, #0]
	_hi2c = hi2c;
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <lcdInit+0x30>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	2000008d 	.word	0x2000008d
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000090 	.word	0x20000090

08000624 <lcdReadButtons>:
    HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, data, 2, 1000);
    HAL_I2C_Master_Receive(_hi2c, ADDRESS << 1, &port, 1, 1000);
    return port;
}

uint8_t lcdReadButtons() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
    uint8_t data = GET_BUT;
 800062a:	2305      	movs	r3, #5
 800062c:	71fb      	strb	r3, [r7, #7]
    uint8_t buttons = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, &data, 1, 1000);
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <lcdReadButtons+0x40>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	1dfa      	adds	r2, r7, #7
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2160      	movs	r1, #96	; 0x60
 8000642:	f003 fd61 	bl	8004108 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_hi2c, ADDRESS << 1, &buttons, 1, 1000);
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <lcdReadButtons+0x40>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	1dba      	adds	r2, r7, #6
 800064c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	2160      	movs	r1, #96	; 0x60
 8000656:	f003 fe4b 	bl	80042f0 <HAL_I2C_Master_Receive>
    return buttons;
 800065a:	79bb      	ldrb	r3, [r7, #6]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000090 	.word	0x20000090

08000668 <lcdSetCursor>:
    HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, &data, 1, 1000);
    HAL_Delay(100);
    _col = _row = 0;
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
    if (col > 15 || col < 0) {
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b0f      	cmp	r3, #15
 800067c:	d809      	bhi.n	8000692 <lcdSetCursor+0x2a>
        return;
    }

    if (row > 1 || row < 0) {
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d808      	bhi.n	8000696 <lcdSetCursor+0x2e>
        return;
    }
    _col = col;
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <lcdSetCursor+0x3c>)
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	7013      	strb	r3, [r2, #0]
    _row = row;
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <lcdSetCursor+0x40>)
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	7013      	strb	r3, [r2, #0]
 8000690:	e002      	b.n	8000698 <lcdSetCursor+0x30>
        return;
 8000692:	bf00      	nop
 8000694:	e000      	b.n	8000698 <lcdSetCursor+0x30>
        return;
 8000696:	bf00      	nop
}
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	2000008d 	.word	0x2000008d

080006ac <lcdPrint>:

void lcdPrint(const char string[]) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fdc3 	bl	8000240 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	74fb      	strb	r3, [r7, #19]

	len = strlen(string);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff fdbe 	bl	8000240 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < len; i++){
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e037      	b.n	800073e <lcdPrint+0x92>
	    uint8_t data[4];
	    data[0] = LCD_WR;
 80006ce:	2361      	movs	r3, #97	; 0x61
 80006d0:	733b      	strb	r3, [r7, #12]
	    data[1] = 1 - _row;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcdPrint+0xa4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f1c3 0301 	rsb	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	737b      	strb	r3, [r7, #13]
	    data[2] = _col;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <lcdPrint+0xa8>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	73bb      	strb	r3, [r7, #14]
	    data[3] = string[i];
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, data, 4, 1000);
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <lcdPrint+0xac>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	f107 020c 	add.w	r2, r7, #12
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2304      	movs	r3, #4
 80006fe:	2160      	movs	r1, #96	; 0x60
 8000700:	f003 fd02 	bl	8004108 <HAL_I2C_Master_Transmit>
		HAL_Delay(20);
 8000704:	2014      	movs	r0, #20
 8000706:	f002 fd0b 	bl	8003120 <HAL_Delay>
		++_col;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <lcdPrint+0xa8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <lcdPrint+0xa8>)
 8000714:	701a      	strb	r2, [r3, #0]
		if (_col > 15){
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <lcdPrint+0xa8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b0f      	cmp	r3, #15
 800071c:	d90c      	bls.n	8000738 <lcdPrint+0x8c>
			_col = 0;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <lcdPrint+0xa8>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
			++_row;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <lcdPrint+0xa4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <lcdPrint+0xa4>)
 800072e:	701a      	strb	r2, [r3, #0]
			if (_row > 2)
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <lcdPrint+0xa4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d807      	bhi.n	8000748 <lcdPrint+0x9c>
	for (int i = 0; i < len; i++){
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	7cfb      	ldrb	r3, [r7, #19]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	429a      	cmp	r2, r3
 8000744:	dbc3      	blt.n	80006ce <lcdPrint+0x22>
 8000746:	e000      	b.n	800074a <lcdPrint+0x9e>
				return;
 8000748:	bf00      	nop
		}
	}
}
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000008d 	.word	0x2000008d
 8000754:	2000008c 	.word	0x2000008c
 8000758:	20000090 	.word	0x20000090

0800075c <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	461a      	mov	r2, r3
 8000768:	460b      	mov	r3, r1
 800076a:	72fb      	strb	r3, [r7, #11]
 800076c:	4613      	mov	r3, r2
 800076e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	685c      	ldr	r4, [r3, #4]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6898      	ldr	r0, [r3, #8]
 8000778:	893b      	ldrh	r3, [r7, #8]
 800077a:	7af9      	ldrb	r1, [r7, #11]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	47a0      	blx	r4
 8000780:	6178      	str	r0, [r7, #20]
  return ret;
 8000782:	697b      	ldr	r3, [r7, #20]
}
 8000784:	4618      	mov	r0, r3
 8000786:	371c      	adds	r7, #28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	461a      	mov	r2, r3
 8000798:	460b      	mov	r3, r1
 800079a:	72fb      	strb	r3, [r7, #11]
 800079c:	4613      	mov	r3, r2
 800079e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681c      	ldr	r4, [r3, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6898      	ldr	r0, [r3, #8]
 80007a8:	893b      	ldrh	r3, [r7, #8]
 80007aa:	7af9      	ldrb	r1, [r7, #11]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	47a0      	blx	r4
 80007b0:	6178      	str	r0, [r7, #20]
  return ret;
 80007b2:	697b      	ldr	r3, [r7, #20]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80007e8 <lps22hb_from_lsb_to_hpa+0x2c>
 80007d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80007d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80007da:	eeb0 0a67 	vmov.f32	s0, s15
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	45800000 	.word	0x45800000

080007ec <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80007f8:	f107 0208 	add.w	r2, r7, #8
 80007fc:	2301      	movs	r3, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ffab 	bl	800075c <lps22hb_read_reg>
 8000806:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10f      	bne.n	800082e <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	7a3b      	ldrb	r3, [r7, #8]
 8000818:	f362 0383 	bfi	r3, r2, #2, #2
 800081c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	2301      	movs	r3, #1
 8000824:	2110      	movs	r1, #16
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffb0 	bl	800078c <lps22hb_write_reg>
 800082c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8000844:	f107 0208 	add.w	r2, r7, #8
 8000848:	2301      	movs	r3, #1
 800084a:	2110      	movs	r1, #16
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff85 	bl	800075c <lps22hb_read_reg>
 8000852:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10f      	bne.n	800087a <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	b2da      	uxtb	r2, r3
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	f362 1306 	bfi	r3, r2, #4, #3
 8000868:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800086a:	f107 0208 	add.w	r2, r7, #8
 800086e:	2301      	movs	r3, #1
 8000870:	2110      	movs	r1, #16
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff8a 	bl	800078c <lps22hb_write_reg>
 8000878:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 800088e:	2303      	movs	r3, #3
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	2128      	movs	r1, #40	; 0x28
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff61 	bl	800075c <lps22hb_read_reg>
 800089a:	60f8      	str	r0, [r7, #12]
  return ret;
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b084      	sub	sp, #16
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 80008b0:	2301      	movs	r3, #1
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	210f      	movs	r1, #15
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff50 	bl	800075c <lps22hb_read_reg>
 80008bc:	60f8      	str	r0, [r7, #12]
  return ret;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80008d4:	f107 0208 	add.w	r2, r7, #8
 80008d8:	2301      	movs	r3, #1
 80008da:	2111      	movs	r1, #17
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff3d 	bl	800075c <lps22hb_read_reg>
 80008e2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10f      	bne.n	800090a <lps22hb_reset_set+0x42>
    ctrl_reg2.swreset = val;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	f362 0382 	bfi	r3, r2, #2, #1
 80008f8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80008fa:	f107 0208 	add.w	r2, r7, #8
 80008fe:	2301      	movs	r3, #1
 8000900:	2111      	movs	r1, #17
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff42 	bl	800078c <lps22hb_write_reg>
 8000908:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800091e:	f107 0208 	add.w	r2, r7, #8
 8000922:	2301      	movs	r3, #1
 8000924:	2111      	movs	r1, #17
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ff18 	bl	800075c <lps22hb_read_reg>
 800092c:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 800092e:	7a3b      	ldrb	r3, [r7, #8]
 8000930:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	701a      	strb	r2, [r3, #0]

  return ret;
 800093c:	68fb      	ldr	r3, [r7, #12]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8000946:	b590      	push	{r4, r7, lr}
 8000948:	b087      	sub	sp, #28
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	461a      	mov	r2, r3
 8000952:	460b      	mov	r3, r1
 8000954:	72fb      	strb	r3, [r7, #11]
 8000956:	4613      	mov	r3, r2
 8000958:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	685c      	ldr	r4, [r3, #4]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6898      	ldr	r0, [r3, #8]
 8000962:	893b      	ldrh	r3, [r7, #8]
 8000964:	7af9      	ldrb	r1, [r7, #11]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	47a0      	blx	r4
 800096a:	6178      	str	r0, [r7, #20]
  return ret;
 800096c:	697b      	ldr	r3, [r7, #20]
}
 800096e:	4618      	mov	r0, r3
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd90      	pop	{r4, r7, pc}

08000976 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000976:	b590      	push	{r4, r7, lr}
 8000978:	b087      	sub	sp, #28
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	461a      	mov	r2, r3
 8000982:	460b      	mov	r3, r1
 8000984:	72fb      	strb	r3, [r7, #11]
 8000986:	4613      	mov	r3, r2
 8000988:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681c      	ldr	r4, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6898      	ldr	r0, [r3, #8]
 8000992:	893b      	ldrh	r3, [r7, #8]
 8000994:	7af9      	ldrb	r1, [r7, #11]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	47a0      	blx	r4
 800099a:	6178      	str	r0, [r7, #20]
  return ret;
 800099c:	697b      	ldr	r3, [r7, #20]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd90      	pop	{r4, r7, pc}
	...

080009a8 <lsm303agr_from_fs_2g_hr_to_mg>:
  * @{
  *
  */

float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f ) * 0.98f;
 80009b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009be:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80009c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80009dc <lsm303agr_from_fs_2g_hr_to_mg+0x34>
 80009ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009ce:	eeb0 0a67 	vmov.f32	s0, s15
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	3f7ae148 	.word	0x3f7ae148

080009e0 <lsm303agr_from_lsb_to_mgauss>:
{
  return ( ( (float_t)lsb / 256.0f ) * 1.0f ) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 1.5f;
 80009ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80009fa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <lsm303agr_temperature_meas_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_meas_set(stmdev_ctx_t *ctx,
                                       lsm303agr_temp_en_a_t val)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
  lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8000a18:	f107 0208 	add.w	r2, r7, #8
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	211f      	movs	r1, #31
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff90 	bl	8000946 <lsm303agr_read_reg>
 8000a26:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&temp_cfg_reg_a, 1);
  if(ret == 0){
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10f      	bne.n	8000a4e <lsm303agr_temperature_meas_set+0x42>
    temp_cfg_reg_a.temp_en = (uint8_t)val;
 8000a2e:	78fb      	ldrb	r3, [r7, #3]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	7a3b      	ldrb	r3, [r7, #8]
 8000a38:	f362 1387 	bfi	r3, r2, #6, #2
 8000a3c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8000a3e:	f107 0208 	add.w	r2, r7, #8
 8000a42:	2301      	movs	r3, #1
 8000a44:	211f      	movs	r1, #31
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff95 	bl	8000976 <lsm303agr_write_reg>
 8000a4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&temp_cfg_reg_a, 1);
  }

  return ret;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <lsm303agr_xl_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_set(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t val)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  uint8_t lpen, hr;

  if ( val == LSM303AGR_HR_12bit ){
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d104      	bne.n	8000a74 <lsm303agr_xl_operating_mode_set+0x1c>
    lpen = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	74fb      	strb	r3, [r7, #19]
    hr   = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	74bb      	strb	r3, [r7, #18]
 8000a72:	e00b      	b.n	8000a8c <lsm303agr_xl_operating_mode_set+0x34>
  } else if (val == LSM303AGR_NM_10bit) {
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d104      	bne.n	8000a84 <lsm303agr_xl_operating_mode_set+0x2c>
    lpen = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	74bb      	strb	r3, [r7, #18]
 8000a82:	e003      	b.n	8000a8c <lsm303agr_xl_operating_mode_set+0x34>
  } else {
    lpen = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	74bb      	strb	r3, [r7, #18]
  }

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8000a8c:	f107 0210 	add.w	r2, r7, #16
 8000a90:	2301      	movs	r3, #1
 8000a92:	2120      	movs	r1, #32
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff56 	bl	8000946 <lsm303agr_read_reg>
 8000a9a:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  ctrl_reg1_a.lpen = (uint8_t)lpen;
 8000a9c:	7cfb      	ldrb	r3, [r7, #19]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	7c3b      	ldrb	r3, [r7, #16]
 8000aa6:	f362 03c3 	bfi	r3, r2, #3, #1
 8000aaa:	743b      	strb	r3, [r7, #16]
  if(ret == 0){
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d107      	bne.n	8000ac2 <lsm303agr_xl_operating_mode_set+0x6a>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8000ab2:	f107 0210 	add.w	r2, r7, #16
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	2120      	movs	r1, #32
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff5b 	bl	8000976 <lsm303agr_write_reg>
 8000ac0:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&ctrl_reg1_a, 1);
  }
  if(ret == 0){
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d107      	bne.n	8000ad8 <lsm303agr_xl_operating_mode_set+0x80>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8000ac8:	f107 020c 	add.w	r2, r7, #12
 8000acc:	2301      	movs	r3, #1
 8000ace:	2123      	movs	r1, #35	; 0x23
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff38 	bl	8000946 <lsm303agr_read_reg>
 8000ad6:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }
  if(ret == 0){
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10f      	bne.n	8000afe <lsm303agr_xl_operating_mode_set+0xa6>
    ctrl_reg4_a.hr = hr;
 8000ade:	7cbb      	ldrb	r3, [r7, #18]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	7b3b      	ldrb	r3, [r7, #12]
 8000ae8:	f362 03c3 	bfi	r3, r2, #3, #1
 8000aec:	733b      	strb	r3, [r7, #12]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8000aee:	f107 020c 	add.w	r2, r7, #12
 8000af2:	2301      	movs	r3, #1
 8000af4:	2123      	movs	r1, #35	; 0x23
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ff3d 	bl	8000976 <lsm303agr_write_reg>
 8000afc:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8000afe:	697b      	ldr	r3, [r7, #20]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8000b14:	f107 0208 	add.w	r2, r7, #8
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff12 	bl	8000946 <lsm303agr_read_reg>
 8000b22:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10f      	bne.n	8000b4a <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	7a3b      	ldrb	r3, [r7, #8]
 8000b34:	f362 1307 	bfi	r3, r2, #4, #4
 8000b38:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8000b3a:	f107 0208 	add.w	r2, r7, #8
 8000b3e:	2301      	movs	r3, #1
 8000b40:	2120      	movs	r1, #32
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff17 	bl	8000976 <lsm303agr_write_reg>
 8000b48:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8000b60:	f107 0208 	add.w	r2, r7, #8
 8000b64:	2301      	movs	r3, #1
 8000b66:	2123      	movs	r1, #35	; 0x23
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff feec 	bl	8000946 <lsm303agr_read_reg>
 8000b6e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10f      	bne.n	8000b96 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	7a3b      	ldrb	r3, [r7, #8]
 8000b80:	f362 1305 	bfi	r3, r2, #4, #2
 8000b84:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8000b86:	f107 0208 	add.w	r2, r7, #8
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	2123      	movs	r1, #35	; 0x23
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fef1 	bl	8000976 <lsm303agr_write_reg>
 8000b94:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8000bac:	f107 0208 	add.w	r2, r7, #8
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	2123      	movs	r1, #35	; 0x23
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fec6 	bl	8000946 <lsm303agr_read_reg>
 8000bba:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10f      	bne.n	8000be2 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	7a3b      	ldrb	r3, [r7, #8]
 8000bcc:	f362 13c7 	bfi	r3, r2, #7, #1
 8000bd0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8000bd2:	f107 0208 	add.w	r2, r7, #8
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2123      	movs	r1, #35	; 0x23
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fecb 	bl	8000976 <lsm303agr_write_reg>
 8000be0:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	2128      	movs	r1, #40	; 0x28
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fea2 	bl	8000946 <lsm303agr_read_reg>
 8000c02:	60f8      	str	r0, [r7, #12]
  return ret;
 8000c04:	68fb      	ldr	r3, [r7, #12]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b084      	sub	sp, #16
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	460b      	mov	r3, r1
 8000c18:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000c1a:	f107 0208 	add.w	r2, r7, #8
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2160      	movs	r1, #96	; 0x60
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fe8f 	bl	8000946 <lsm303agr_read_reg>
 8000c28:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10f      	bne.n	8000c50 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	7a3b      	ldrb	r3, [r7, #8]
 8000c3a:	f362 0301 	bfi	r3, r2, #0, #2
 8000c3e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000c40:	f107 0208 	add.w	r2, r7, #8
 8000c44:	2301      	movs	r3, #1
 8000c46:	2160      	movs	r1, #96	; 0x60
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fe94 	bl	8000976 <lsm303agr_write_reg>
 8000c4e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8000c50:	68fb      	ldr	r3, [r7, #12]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000c66:	f107 0208 	add.w	r2, r7, #8
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2160      	movs	r1, #96	; 0x60
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fe69 	bl	8000946 <lsm303agr_read_reg>
 8000c74:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10f      	bne.n	8000c9c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	7a3b      	ldrb	r3, [r7, #8]
 8000c86:	f362 0383 	bfi	r3, r2, #2, #2
 8000c8a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000c8c:	f107 0208 	add.w	r2, r7, #8
 8000c90:	2301      	movs	r3, #1
 8000c92:	2160      	movs	r1, #96	; 0x60
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fe6e 	bl	8000976 <lsm303agr_write_reg>
 8000c9a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <lsm303agr_mag_offset_temp_comp_set>:
  * @param  val    Change the values of comp_temp_en in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000cb2:	f107 0208 	add.w	r2, r7, #8
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	2160      	movs	r1, #96	; 0x60
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fe43 	bl	8000946 <lsm303agr_read_reg>
 8000cc0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10f      	bne.n	8000ce8 <lsm303agr_mag_offset_temp_comp_set+0x42>
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7a3b      	ldrb	r3, [r7, #8]
 8000cd2:	f362 13c7 	bfi	r3, r2, #7, #1
 8000cd6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000cd8:	f107 0208 	add.w	r2, r7, #8
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2160      	movs	r1, #96	; 0x60
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fe48 	bl	8000976 <lsm303agr_write_reg>
 8000ce6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
 8000cfe:	f107 0208 	add.w	r2, r7, #8
 8000d02:	2301      	movs	r3, #1
 8000d04:	2161      	movs	r1, #97	; 0x61
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fe1d 	bl	8000946 <lsm303agr_read_reg>
 8000d0c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_b_m, 1);
  if(ret == 0){
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10f      	bne.n	8000d34 <lsm303agr_mag_set_rst_mode_set+0x42>
    cfg_reg_b_m.set_rst = (uint8_t)val;
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	7a3b      	ldrb	r3, [r7, #8]
 8000d1e:	f362 0342 	bfi	r3, r2, #1, #2
 8000d22:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	2301      	movs	r3, #1
 8000d2a:	2161      	movs	r1, #97	; 0x61
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fe22 	bl	8000976 <lsm303agr_write_reg>
 8000d32:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_b_m, 1);
  }

  return ret;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8000d4a:	f107 0208 	add.w	r2, r7, #8
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2162      	movs	r1, #98	; 0x62
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fdf7 	bl	8000946 <lsm303agr_read_reg>
 8000d58:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10f      	bne.n	8000d80 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	7a3b      	ldrb	r3, [r7, #8]
 8000d6a:	f362 1304 	bfi	r3, r2, #4, #1
 8000d6e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8000d70:	f107 0208 	add.w	r2, r7, #8
 8000d74:	2301      	movs	r3, #1
 8000d76:	2162      	movs	r1, #98	; 0x62
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fdfc 	bl	8000976 <lsm303agr_write_reg>
 8000d7e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8000d80:	68fb      	ldr	r3, [r7, #12]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8000d94:	2306      	movs	r3, #6
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	2168      	movs	r1, #104	; 0x68
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fdd3 	bl	8000946 <lsm303agr_read_reg>
 8000da0:	60f8      	str	r0, [r7, #12]
  return ret;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8000db6:	2301      	movs	r3, #1
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	210f      	movs	r1, #15
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fdc2 	bl	8000946 <lsm303agr_read_reg>
 8000dc2:	60f8      	str	r0, [r7, #12]
  return ret;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8000dd8:	2301      	movs	r3, #1
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	214f      	movs	r1, #79	; 0x4f
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fdb1 	bl	8000946 <lsm303agr_read_reg>
 8000de4:	60f8      	str	r0, [r7, #12]
  return ret;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000dfc:	f107 0208 	add.w	r2, r7, #8
 8000e00:	2301      	movs	r3, #1
 8000e02:	2160      	movs	r1, #96	; 0x60
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fd9e 	bl	8000946 <lsm303agr_read_reg>
 8000e0a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10f      	bne.n	8000e32 <lsm303agr_mag_reset_set+0x42>
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	7a3b      	ldrb	r3, [r7, #8]
 8000e1c:	f362 1345 	bfi	r3, r2, #5, #1
 8000e20:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000e22:	f107 0208 	add.w	r2, r7, #8
 8000e26:	2301      	movs	r3, #1
 8000e28:	2160      	movs	r1, #96	; 0x60
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fda3 	bl	8000976 <lsm303agr_write_reg>
 8000e30:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8000e46:	f107 0208 	add.w	r2, r7, #8
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2160      	movs	r1, #96	; 0x60
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fd79 	bl	8000946 <lsm303agr_read_reg>
 8000e54:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 8000e56:	7a3b      	ldrb	r3, [r7, #8]
 8000e58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	701a      	strb	r2, [r3, #0]

  return ret;
 8000e64:	68fb      	ldr	r3, [r7, #12]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b087      	sub	sp, #28
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	72fb      	strb	r3, [r7, #11]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	685c      	ldr	r4, [r3, #4]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6898      	ldr	r0, [r3, #8]
 8000e8a:	893b      	ldrh	r3, [r7, #8]
 8000e8c:	7af9      	ldrb	r1, [r7, #11]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	47a0      	blx	r4
 8000e92:	6178      	str	r0, [r7, #20]
  return ret;
 8000e94:	697b      	ldr	r3, [r7, #20]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}

08000e9e <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b087      	sub	sp, #28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	72fb      	strb	r3, [r7, #11]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681c      	ldr	r4, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6898      	ldr	r0, [r3, #8]
 8000eba:	893b      	ldrh	r3, [r7, #8]
 8000ebc:	7af9      	ldrb	r1, [r7, #11]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	47a0      	blx	r4
 8000ec2:	6178      	str	r0, [r7, #20]
  return ret;
 8000ec4:	697b      	ldr	r3, [r7, #20]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
	...

08000ed0 <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8000eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000efc <lsm6dsl_from_fs2g_to_mg+0x2c>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000eee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	3d79db23 	.word	0x3d79db23

08000f00 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8000f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f2c <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8000f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	428c0000 	.word	0x428c0000

08000f30 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	2301      	movs	r3, #1
 8000f42:	2110      	movs	r1, #16
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff92 	bl	8000e6e <lsm6dsl_read_reg>
 8000f4a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	7a3b      	ldrb	r3, [r7, #8]
 8000f5c:	f362 0383 	bfi	r3, r2, #2, #2
 8000f60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	2301      	movs	r3, #1
 8000f68:	2110      	movs	r1, #16
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff97 	bl	8000e9e <lsm6dsl_write_reg>
 8000f70:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff6c 	bl	8000e6e <lsm6dsl_read_reg>
 8000f96:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	7a3b      	ldrb	r3, [r7, #8]
 8000fa8:	f362 1307 	bfi	r3, r2, #4, #4
 8000fac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000fae:	f107 0208 	add.w	r2, r7, #8
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff71 	bl	8000e9e <lsm6dsl_write_reg>
 8000fbc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000fd4:	f107 0208 	add.w	r2, r7, #8
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2111      	movs	r1, #17
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff46 	bl	8000e6e <lsm6dsl_read_reg>
 8000fe2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10f      	bne.n	800100a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	7a3b      	ldrb	r3, [r7, #8]
 8000ff4:	f362 0343 	bfi	r3, r2, #1, #3
 8000ff8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	2301      	movs	r3, #1
 8001000:	2111      	movs	r1, #17
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4b 	bl	8000e9e <lsm6dsl_write_reg>
 8001008:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8001020:	f107 0208 	add.w	r2, r7, #8
 8001024:	2301      	movs	r3, #1
 8001026:	2111      	movs	r1, #17
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff20 	bl	8000e6e <lsm6dsl_read_reg>
 800102e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	b2da      	uxtb	r2, r3
 800103e:	7a3b      	ldrb	r3, [r7, #8]
 8001040:	f362 1307 	bfi	r3, r2, #4, #4
 8001044:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8001046:	f107 0208 	add.w	r2, r7, #8
 800104a:	2301      	movs	r3, #1
 800104c:	2111      	movs	r1, #17
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff25 	bl	8000e9e <lsm6dsl_write_reg>
 8001054:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2301      	movs	r3, #1
 8001072:	2112      	movs	r1, #18
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fefa 	bl	8000e6e <lsm6dsl_read_reg>
 800107a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10f      	bne.n	80010a2 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	7a3b      	ldrb	r3, [r7, #8]
 800108c:	f362 1386 	bfi	r3, r2, #6, #1
 8001090:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001092:	f107 0208 	add.w	r2, r7, #8
 8001096:	2301      	movs	r3, #1
 8001098:	2112      	movs	r1, #18
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff feff 	bl	8000e9e <lsm6dsl_write_reg>
 80010a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 80010b6:	2301      	movs	r3, #1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	211e      	movs	r1, #30
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fed6 	bl	8000e6e <lsm6dsl_read_reg>
 80010c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80010d8:	2306      	movs	r3, #6
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	2122      	movs	r1, #34	; 0x22
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fec5 	bl	8000e6e <lsm6dsl_read_reg>
 80010e4:	60f8      	str	r0, [r7, #12]
  return ret;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80010fa:	2306      	movs	r3, #6
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	2128      	movs	r1, #40	; 0x28
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff feb4 	bl	8000e6e <lsm6dsl_read_reg>
 8001106:	60f8      	str	r0, [r7, #12]
  return ret;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800111c:	2301      	movs	r3, #1
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	210f      	movs	r1, #15
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fea3 	bl	8000e6e <lsm6dsl_read_reg>
 8001128:	60f8      	str	r0, [r7, #12]
  return ret;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	2301      	movs	r3, #1
 8001146:	2112      	movs	r1, #18
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fe90 	bl	8000e6e <lsm6dsl_read_reg>
 800114e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	7a3b      	ldrb	r3, [r7, #8]
 8001160:	f362 0300 	bfi	r3, r2, #0, #1
 8001164:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	2301      	movs	r3, #1
 800116c:	2112      	movs	r1, #18
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fe95 	bl	8000e9e <lsm6dsl_write_reg>
 8001174:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	2301      	movs	r3, #1
 8001190:	2112      	movs	r1, #18
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fe6b 	bl	8000e6e <lsm6dsl_read_reg>
 8001198:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	701a      	strb	r2, [r3, #0]

  return ret;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	2301      	movs	r3, #1
 80011c4:	2110      	movs	r1, #16
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe51 	bl	8000e6e <lsm6dsl_read_reg>
 80011cc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10f      	bne.n	80011f4 <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	7a3b      	ldrb	r3, [r7, #8]
 80011de:	f362 0300 	bfi	r3, r2, #0, #1
 80011e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	2301      	movs	r3, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fe56 	bl	8000e9e <lsm6dsl_write_reg>
 80011f2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80011f4:	68fb      	ldr	r3, [r7, #12]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800120a:	f107 0208 	add.w	r2, r7, #8
 800120e:	2301      	movs	r3, #1
 8001210:	2117      	movs	r1, #23
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe2b 	bl	8000e6e <lsm6dsl_read_reg>
 8001218:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d120      	bne.n	8001262 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	7a3b      	ldrb	r3, [r7, #8]
 800122c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001230:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	b2da      	uxtb	r2, r3
 800123a:	7a3b      	ldrb	r3, [r7, #8]
 800123c:	f362 1346 	bfi	r3, r2, #5, #2
 8001240:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001242:	7a3b      	ldrb	r3, [r7, #8]
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800124a:	7a3b      	ldrb	r3, [r7, #8]
 800124c:	f36f 0382 	bfc	r3, #2, #1
 8001250:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	2301      	movs	r3, #1
 8001258:	2117      	movs	r1, #23
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe1f 	bl	8000e9e <lsm6dsl_write_reg>
 8001260:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8001278:	f107 0208 	add.w	r2, r7, #8
 800127c:	2301      	movs	r3, #1
 800127e:	2116      	movs	r1, #22
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fdf4 	bl	8000e6e <lsm6dsl_read_reg>
 8001286:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d157      	bne.n	800133e <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	b2da      	uxtb	r2, r3
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	f362 1305 	bfi	r3, r2, #4, #2
 800129e:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	09db      	lsrs	r3, r3, #7
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	7a3b      	ldrb	r3, [r7, #8]
 80012ae:	f362 1386 	bfi	r3, r2, #6, #1
 80012b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 80012b4:	f107 0208 	add.w	r2, r7, #8
 80012b8:	2301      	movs	r3, #1
 80012ba:	2116      	movs	r1, #22
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fdee 	bl	8000e9e <lsm6dsl_write_reg>
 80012c2:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d139      	bne.n	800133e <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	2301      	movs	r3, #1
 80012d0:	2115      	movs	r1, #21
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fdcb 	bl	8000e6e <lsm6dsl_read_reg>
 80012d8:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d12e      	bne.n	800133e <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	7b3b      	ldrb	r3, [r7, #12]
 80012ea:	f362 0301 	bfi	r3, r2, #0, #2
 80012ee:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80012f0:	f107 020c 	add.w	r2, r7, #12
 80012f4:	2301      	movs	r3, #1
 80012f6:	2115      	movs	r1, #21
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fdd0 	bl	8000e9e <lsm6dsl_write_reg>
 80012fe:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11b      	bne.n	800133e <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001306:	f107 0210 	add.w	r2, r7, #16
 800130a:	2301      	movs	r3, #1
 800130c:	2113      	movs	r1, #19
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fdad 	bl	8000e6e <lsm6dsl_read_reg>
 8001314:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d110      	bne.n	800133e <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	7c3b      	ldrb	r3, [r7, #16]
 8001328:	f362 0341 	bfi	r3, r2, #1, #1
 800132c:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800132e:	f107 0210 	add.w	r2, r7, #16
 8001332:	2301      	movs	r3, #1
 8001334:	2113      	movs	r1, #19
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fdb1 	bl	8000e9e <lsm6dsl_write_reg>
 800133c:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800133e:	697b      	ldr	r3, [r7, #20]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b096      	sub	sp, #88	; 0x58
 800134c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int sens=0;
 800134e:	2300      	movs	r3, #0
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
		int i=0;
 8001352:	2300      	movs	r3, #0
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
		int j=0;
 8001356:	2300      	movs	r3, #0
 8001358:	647b      	str	r3, [r7, #68]	; 0x44
		int k=0;
 800135a:	2300      	movs	r3, #0
 800135c:	643b      	str	r3, [r7, #64]	; 0x40
		bool page=false;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001364:	f001 fe7f 	bl	8003066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001368:	f000 fba2 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136c:	f000 fe26 	bl	8001fbc <MX_GPIO_Init>
  MX_ETH_Init();
 8001370:	f000 fc36 	bl	8001be0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001374:	f000 fdc4 	bl	8001f00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001378:	f000 fdf2 	bl	8001f60 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800137c:	f000 fc70 	bl	8001c60 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001380:	f000 fd4e 	bl	8001e20 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001384:	f000 fd84 	bl	8001e90 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001388:	f000 fcaa 	bl	8001ce0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800138c:	f000 fcf8 	bl	8001d80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* User initialization : Here we initialize all sensors , the channel i2c connecting
   * the display and start timers*/
  lcdInit(&hi2c1);
 8001390:	489c      	ldr	r0, [pc, #624]	; (8001604 <main+0x2bc>)
 8001392:	f7ff f92d 	bl	80005f0 <lcdInit>
  initialization();
 8001396:	f000 feb3 	bl	8002100 <initialization>
  stmdev_ctx_t lsm6dsl_dev_ctx =lsm6dsl_init(&hi2c1);
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4999      	ldr	r1, [pc, #612]	; (8001604 <main+0x2bc>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 ff5b 	bl	800225c <lsm6dsl_init>
  stmdev_ctx_t lsm303_dev_ctx_xl = lsm303agr_init_xl(&hi2c1);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4996      	ldr	r1, [pc, #600]	; (8001604 <main+0x2bc>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 ff0b 	bl	80021c8 <lsm303agr_init_xl>
  stmdev_ctx_t lsm303_dev_ctx_mg = lsm303agr_init_mg(&hi2c1);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4993      	ldr	r1, [pc, #588]	; (8001604 <main+0x2bc>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 ffbd 	bl	8002338 <lsm303agr_init_mg>
  stmdev_ctx_t lps22hb_dev_ctx = lps22hb_init_mg(&hi2c1);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4990      	ldr	r1, [pc, #576]	; (8001604 <main+0x2bc>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 feb8 	bl	8002138 <lps22hb_init_mg>
  HAL_TIM_Base_Start_IT(&htim4);
 80013c8:	488f      	ldr	r0, [pc, #572]	; (8001608 <main+0x2c0>)
 80013ca:	f005 f875 	bl	80064b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80013ce:	488f      	ldr	r0, [pc, #572]	; (800160c <main+0x2c4>)
 80013d0:	f005 f872 	bl	80064b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80013d4:	488e      	ldr	r0, [pc, #568]	; (8001610 <main+0x2c8>)
 80013d6:	f005 f86f 	bl	80064b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80013da:	488e      	ldr	r0, [pc, #568]	; (8001614 <main+0x2cc>)
 80013dc:	f005 f86c 	bl	80064b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  uint32_t a= HAL_GetTick();
 80013e0:	f001 fe92 	bl	8003108 <HAL_GetTick>
 80013e4:	63b8      	str	r0, [r7, #56]	; 0x38
	  /*compute mean for all sernsors*/
	     if(mean_flag){
 80013e6:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <main+0x2d0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d02b      	beq.n	8001446 <main+0xfe>

	 		mean_flag=false;
 80013ee:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <main+0x2d0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	 		compute_mean(10, &coda_x_acc1,  &coda_y_acc1,  &coda_z_acc1, &acceleration_mg_mean);
 80013f4:	4b89      	ldr	r3, [pc, #548]	; (800161c <main+0x2d4>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4b89      	ldr	r3, [pc, #548]	; (8001620 <main+0x2d8>)
 80013fa:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <main+0x2dc>)
 80013fc:	498a      	ldr	r1, [pc, #552]	; (8001628 <main+0x2e0>)
 80013fe:	200a      	movs	r0, #10
 8001400:	f001 fa7a 	bl	80028f8 <compute_mean>
	 		compute_mean(10, &coda_x_acc2,  &coda_y_acc2,  &coda_z_acc2, &acceleration2_mean_mean);
 8001404:	4b89      	ldr	r3, [pc, #548]	; (800162c <main+0x2e4>)
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4b89      	ldr	r3, [pc, #548]	; (8001630 <main+0x2e8>)
 800140a:	4a8a      	ldr	r2, [pc, #552]	; (8001634 <main+0x2ec>)
 800140c:	498a      	ldr	r1, [pc, #552]	; (8001638 <main+0x2f0>)
 800140e:	200a      	movs	r0, #10
 8001410:	f001 fa72 	bl	80028f8 <compute_mean>
	 		compute_mean(10, &coda_x_ang,  &coda_y_ang,  &coda_z_ang, &angular_mean);
 8001414:	4b89      	ldr	r3, [pc, #548]	; (800163c <main+0x2f4>)
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <main+0x2f8>)
 800141a:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <main+0x2fc>)
 800141c:	498a      	ldr	r1, [pc, #552]	; (8001648 <main+0x300>)
 800141e:	200a      	movs	r0, #10
 8001420:	f001 fa6a 	bl	80028f8 <compute_mean>
	 		compute_mean(3, &coda_mg_x,  &coda_mg_y,  &coda_mg_z, &magnetic_mean);
 8001424:	4b89      	ldr	r3, [pc, #548]	; (800164c <main+0x304>)
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4b89      	ldr	r3, [pc, #548]	; (8001650 <main+0x308>)
 800142a:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <main+0x30c>)
 800142c:	498a      	ldr	r1, [pc, #552]	; (8001658 <main+0x310>)
 800142e:	2003      	movs	r0, #3
 8001430:	f001 fa62 	bl	80028f8 <compute_mean>
	 		compute_mean_bar( 40, &coda_bar, pressure );
 8001434:	4b89      	ldr	r3, [pc, #548]	; (800165c <main+0x314>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	4988      	ldr	r1, [pc, #544]	; (8001660 <main+0x318>)
 8001440:	2028      	movs	r0, #40	; 0x28
 8001442:	f001 facd 	bl	80029e0 <compute_mean_bar>

	     }

	     /*take data from accelerometer and gyroscope*/
	     if(acc_and_giro_flag){
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <main+0x31c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d023      	beq.n	8001496 <main+0x14e>
	 		acc_and_giro_flag=false;
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <main+0x31c>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	 		acceleration1_acquisition(&lsm6dsl_dev_ctx, i);
 8001454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001456:	b25a      	sxtb	r2, r3
 8001458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f001 f8fe 	bl	8002660 <acceleration1_acquisition>
	 		acceleration2_acquisition(&lsm303_dev_ctx_xl, i);
 8001464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001466:	b25a      	sxtb	r2, r3
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f944 	bl	80026fc <acceleration2_acquisition>
	 		gyroscope_acquisition(&lsm6dsl_dev_ctx, i);
 8001474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001476:	b25a      	sxtb	r2, r3
 8001478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f9cc 	bl	800281c <gyroscope_acquisition>
	 		if (i == 10){
 8001484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001486:	2b0a      	cmp	r3, #10
 8001488:	d102      	bne.n	8001490 <main+0x148>
	 			i = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	64bb      	str	r3, [r7, #72]	; 0x48
 800148e:	e002      	b.n	8001496 <main+0x14e>
	 		}else{
	 			i = i + 1;
 8001490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001492:	3301      	adds	r3, #1
 8001494:	64bb      	str	r3, [r7, #72]	; 0x48
	 		}
	 	}
	     /*take data from magnetometer*/
	     if(magn_flag){
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <main+0x320>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d013      	beq.n	80014c6 <main+0x17e>
	     	magn_flag=false;
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <main+0x320>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
	 		magnetometer_acquisition(&lsm303_dev_ctx_mg, j);
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	b25a      	sxtb	r2, r3
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f96c 	bl	800278c <magnetometer_acquisition>
	 		 if (j == 3){
 80014b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d102      	bne.n	80014c0 <main+0x178>
	 			j = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
 80014be:	e002      	b.n	80014c6 <main+0x17e>
	 		}else{
	 			j = j + 1;
 80014c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c2:	3301      	adds	r3, #1
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
	 		}
	 	}
	     /*take data from barometer*/
	     if(baro_flag){
 80014c6:	4b69      	ldr	r3, [pc, #420]	; (800166c <main+0x324>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <main+0x1ac>
	     	baro_flag=false;
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <main+0x324>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	     	pressure_acquisition(&lps22hb_dev_ctx, k);
 80014d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 f9e5 	bl	80028ac <pressure_acquisition>
	 		 if (k == 40){
 80014e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e4:	2b28      	cmp	r3, #40	; 0x28
 80014e6:	d102      	bne.n	80014ee <main+0x1a6>
	 			k = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
 80014ec:	e002      	b.n	80014f4 <main+0x1ac>
	 		}else{
	 			k = k + 1;
 80014ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014f0:	3301      	adds	r3, #1
 80014f2:	643b      	str	r3, [r7, #64]	; 0x40
	 		}
	     }

	     /*every second print to LCD the result of the learned data*/
	     if(display_flag){
 80014f4:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <main+0x328>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8293 	beq.w	8001a24 <main+0x6dc>
	 		  display_flag=false;
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <main+0x328>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
	 		  /*print the result of the first accelerometer*/
	 		  if(sens==0){
 8001504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 80be 	bne.w	8001688 <main+0x340>
	 			  /*print X and Y*/
	 			  if(!page){
 800150c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001510:	2b00      	cmp	r3, #0
 8001512:	d13c      	bne.n	800158e <main+0x246>
	 					sprintf((char*)tx_buffer, "Acc1 X:%4d   ",
	 									  (int)acceleration_mg_mean[0]);
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <main+0x2d4>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
	 					sprintf((char*)tx_buffer, "Acc1 X:%4d   ",
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	4954      	ldr	r1, [pc, #336]	; (8001674 <main+0x32c>)
 8001524:	4854      	ldr	r0, [pc, #336]	; (8001678 <main+0x330>)
 8001526:	f006 fba7 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800152a:	4853      	ldr	r0, [pc, #332]	; (8001678 <main+0x330>)
 800152c:	f7fe fe88 	bl	8000240 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29b      	uxth	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	4850      	ldr	r0, [pc, #320]	; (8001678 <main+0x330>)
 8001538:	f001 f87e 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 800153c:	200a      	movs	r0, #10
 800153e:	f001 fdef 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 8001542:	2100      	movs	r1, #0
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff f88f 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 800154a:	484b      	ldr	r0, [pc, #300]	; (8001678 <main+0x330>)
 800154c:	f7ff f8ae 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
	 						 (int)acceleration_mg_mean[1]);
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <main+0x2d4>)
 8001552:	edd3 7a01 	vldr	s15, [r3, #4]
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	ee17 2a90 	vmov	r2, s15
 800155e:	4947      	ldr	r1, [pc, #284]	; (800167c <main+0x334>)
 8001560:	4845      	ldr	r0, [pc, #276]	; (8001678 <main+0x330>)
 8001562:	f006 fb89 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8001566:	4844      	ldr	r0, [pc, #272]	; (8001678 <main+0x330>)
 8001568:	f7fe fe6a 	bl	8000240 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	4841      	ldr	r0, [pc, #260]	; (8001678 <main+0x330>)
 8001574:	f001 f860 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 8001578:	200a      	movs	r0, #10
 800157a:	f001 fdd1 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 800157e:	2101      	movs	r1, #1
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff f871 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001586:	483c      	ldr	r0, [pc, #240]	; (8001678 <main+0x330>)
 8001588:	f7ff f890 	bl	80006ac <lcdPrint>
 800158c:	e24a      	b.n	8001a24 <main+0x6dc>
	 			  }else{
	 				 /*print Z*/
	 					sprintf((char*)tx_buffer, "Z: %4d       ",
	 									  (int)acceleration_mg_mean[2]);
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <main+0x2d4>)
 8001590:	edd3 7a02 	vldr	s15, [r3, #8]
	 					sprintf((char*)tx_buffer, "Z: %4d       ",
 8001594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001598:	ee17 2a90 	vmov	r2, s15
 800159c:	4938      	ldr	r1, [pc, #224]	; (8001680 <main+0x338>)
 800159e:	4836      	ldr	r0, [pc, #216]	; (8001678 <main+0x330>)
 80015a0:	f006 fb6a 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80015a4:	4834      	ldr	r0, [pc, #208]	; (8001678 <main+0x330>)
 80015a6:	f7fe fe4b 	bl	8000240 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	4831      	ldr	r0, [pc, #196]	; (8001678 <main+0x330>)
 80015b2:	f001 f841 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f001 fdb2 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff f852 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 80015c4:	482c      	ldr	r0, [pc, #176]	; (8001678 <main+0x330>)
 80015c6:	f7ff f871 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "                ");
 80015ca:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <main+0x330>)
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <main+0x33c>)
 80015ce:	4614      	mov	r4, r2
 80015d0:	461d      	mov	r5, r3
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	7023      	strb	r3, [r4, #0]
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80015da:	4827      	ldr	r0, [pc, #156]	; (8001678 <main+0x330>)
 80015dc:	f7fe fe30 	bl	8000240 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	4824      	ldr	r0, [pc, #144]	; (8001678 <main+0x330>)
 80015e8:	f001 f826 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 fd97 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 80015f2:	2101      	movs	r1, #1
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff f837 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 80015fa:	481f      	ldr	r0, [pc, #124]	; (8001678 <main+0x330>)
 80015fc:	f7ff f856 	bl	80006ac <lcdPrint>
 8001600:	e210      	b.n	8001a24 <main+0x6dc>
 8001602:	bf00      	nop
 8001604:	200007d0 	.word	0x200007d0
 8001608:	20000710 	.word	0x20000710
 800160c:	20000c20 	.word	0x20000c20
 8001610:	20000ce8 	.word	0x20000ce8
 8001614:	20000c60 	.word	0x20000c60
 8001618:	200006fe 	.word	0x200006fe
 800161c:	200002e0 	.word	0x200002e0
 8001620:	20000178 	.word	0x20000178
 8001624:	20000150 	.word	0x20000150
 8001628:	20000128 	.word	0x20000128
 800162c:	200002ec 	.word	0x200002ec
 8001630:	200001f0 	.word	0x200001f0
 8001634:	200001c8 	.word	0x200001c8
 8001638:	200001a0 	.word	0x200001a0
 800163c:	20000304 	.word	0x20000304
 8001640:	20000100 	.word	0x20000100
 8001644:	200000d8 	.word	0x200000d8
 8001648:	200000b0 	.word	0x200000b0
 800164c:	200002f8 	.word	0x200002f8
 8001650:	20000230 	.word	0x20000230
 8001654:	20000224 	.word	0x20000224
 8001658:	20000218 	.word	0x20000218
 800165c:	200002dc 	.word	0x200002dc
 8001660:	2000023c 	.word	0x2000023c
 8001664:	200006fc 	.word	0x200006fc
 8001668:	200006fd 	.word	0x200006fd
 800166c:	200006ff 	.word	0x200006ff
 8001670:	20000700 	.word	0x20000700
 8001674:	0800849c 	.word	0x0800849c
 8001678:	20000314 	.word	0x20000314
 800167c:	080084ac 	.word	0x080084ac
 8001680:	080084bc 	.word	0x080084bc
 8001684:	080084cc 	.word	0x080084cc
	 			  }

	 			  /*print the result of the second accelerometer*/
	 		  }else if(sens==1){
 8001688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168a:	2b01      	cmp	r3, #1
 800168c:	d17a      	bne.n	8001784 <main+0x43c>
	 			  /*print X and Y*/
	 			  if(!page){
 800168e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001692:	2b00      	cmp	r3, #0
 8001694:	d13c      	bne.n	8001710 <main+0x3c8>
	 					sprintf((char*)tx_buffer, "Acc2 X:%4d   ",
	 									 (int)acceleration2_mean_mean[0]);
 8001696:	4bba      	ldr	r3, [pc, #744]	; (8001980 <main+0x638>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
	 					sprintf((char*)tx_buffer, "Acc2 X:%4d   ",
 800169c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a0:	ee17 2a90 	vmov	r2, s15
 80016a4:	49b7      	ldr	r1, [pc, #732]	; (8001984 <main+0x63c>)
 80016a6:	48b8      	ldr	r0, [pc, #736]	; (8001988 <main+0x640>)
 80016a8:	f006 fae6 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80016ac:	48b6      	ldr	r0, [pc, #728]	; (8001988 <main+0x640>)
 80016ae:	f7fe fdc7 	bl	8000240 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	48b3      	ldr	r0, [pc, #716]	; (8001988 <main+0x640>)
 80016ba:	f000 ffbd 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80016be:	200a      	movs	r0, #10
 80016c0:	f001 fd2e 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7fe ffce 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 80016cc:	48ae      	ldr	r0, [pc, #696]	; (8001988 <main+0x640>)
 80016ce:	f7fe ffed 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
	 							(int)acceleration2_mean_mean[1]);
 80016d2:	4bab      	ldr	r3, [pc, #684]	; (8001980 <main+0x638>)
 80016d4:	edd3 7a01 	vldr	s15, [r3, #4]
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
 80016d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016dc:	ee17 2a90 	vmov	r2, s15
 80016e0:	49aa      	ldr	r1, [pc, #680]	; (800198c <main+0x644>)
 80016e2:	48a9      	ldr	r0, [pc, #676]	; (8001988 <main+0x640>)
 80016e4:	f006 fac8 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80016e8:	48a7      	ldr	r0, [pc, #668]	; (8001988 <main+0x640>)
 80016ea:	f7fe fda9 	bl	8000240 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	48a4      	ldr	r0, [pc, #656]	; (8001988 <main+0x640>)
 80016f6:	f000 ff9f 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f001 fd10 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 8001700:	2101      	movs	r1, #1
 8001702:	2000      	movs	r0, #0
 8001704:	f7fe ffb0 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001708:	489f      	ldr	r0, [pc, #636]	; (8001988 <main+0x640>)
 800170a:	f7fe ffcf 	bl	80006ac <lcdPrint>
 800170e:	e189      	b.n	8001a24 <main+0x6dc>
	 			  }else{
	 				  /*print Z*/
	 					sprintf((char*)tx_buffer, "Z: %4d       ",
	 							(int)acceleration2_mean_mean[2]);
 8001710:	4b9b      	ldr	r3, [pc, #620]	; (8001980 <main+0x638>)
 8001712:	edd3 7a02 	vldr	s15, [r3, #8]
	 					sprintf((char*)tx_buffer, "Z: %4d       ",
 8001716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171a:	ee17 2a90 	vmov	r2, s15
 800171e:	499c      	ldr	r1, [pc, #624]	; (8001990 <main+0x648>)
 8001720:	4899      	ldr	r0, [pc, #612]	; (8001988 <main+0x640>)
 8001722:	f006 faa9 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8001726:	4898      	ldr	r0, [pc, #608]	; (8001988 <main+0x640>)
 8001728:	f7fe fd8a 	bl	8000240 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29b      	uxth	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	4895      	ldr	r0, [pc, #596]	; (8001988 <main+0x640>)
 8001734:	f000 ff80 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f001 fcf1 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7fe ff91 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001746:	4890      	ldr	r0, [pc, #576]	; (8001988 <main+0x640>)
 8001748:	f7fe ffb0 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "                ");
 800174c:	4a8e      	ldr	r2, [pc, #568]	; (8001988 <main+0x640>)
 800174e:	4b91      	ldr	r3, [pc, #580]	; (8001994 <main+0x64c>)
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	7023      	strb	r3, [r4, #0]
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800175c:	488a      	ldr	r0, [pc, #552]	; (8001988 <main+0x640>)
 800175e:	f7fe fd6f 	bl	8000240 <strlen>
 8001762:	4603      	mov	r3, r0
 8001764:	b29b      	uxth	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	4887      	ldr	r0, [pc, #540]	; (8001988 <main+0x640>)
 800176a:	f000 ff65 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 800176e:	200a      	movs	r0, #10
 8001770:	f001 fcd6 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 8001774:	2101      	movs	r1, #1
 8001776:	2000      	movs	r0, #0
 8001778:	f7fe ff76 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 800177c:	4882      	ldr	r0, [pc, #520]	; (8001988 <main+0x640>)
 800177e:	f7fe ff95 	bl	80006ac <lcdPrint>
 8001782:	e14f      	b.n	8001a24 <main+0x6dc>
	 			  }
	 		/*print the result of the gyroscope*/
	 		  }else if(sens == 2){
 8001784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001786:	2b02      	cmp	r3, #2
 8001788:	d17a      	bne.n	8001880 <main+0x538>
	 			  /*print X and Y*/
	 			  if(!page){
 800178a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800178e:	2b00      	cmp	r3, #0
 8001790:	d13c      	bne.n	800180c <main+0x4c4>
	 					sprintf((char*)tx_buffer, "Ang X:%4d    ",
	 									  (int)angular_mean[0]);
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <main+0x650>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
	 					sprintf((char*)tx_buffer, "Ang X:%4d    ",
 8001798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179c:	ee17 2a90 	vmov	r2, s15
 80017a0:	497e      	ldr	r1, [pc, #504]	; (800199c <main+0x654>)
 80017a2:	4879      	ldr	r0, [pc, #484]	; (8001988 <main+0x640>)
 80017a4:	f006 fa68 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80017a8:	4877      	ldr	r0, [pc, #476]	; (8001988 <main+0x640>)
 80017aa:	f7fe fd49 	bl	8000240 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	4874      	ldr	r0, [pc, #464]	; (8001988 <main+0x640>)
 80017b6:	f000 ff3f 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80017ba:	200a      	movs	r0, #10
 80017bc:	f001 fcb0 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7fe ff50 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 80017c8:	486f      	ldr	r0, [pc, #444]	; (8001988 <main+0x640>)
 80017ca:	f7fe ff6f 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
	 							(int)angular_mean[1]);
 80017ce:	4b72      	ldr	r3, [pc, #456]	; (8001998 <main+0x650>)
 80017d0:	edd3 7a01 	vldr	s15, [r3, #4]
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
 80017d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d8:	ee17 2a90 	vmov	r2, s15
 80017dc:	496b      	ldr	r1, [pc, #428]	; (800198c <main+0x644>)
 80017de:	486a      	ldr	r0, [pc, #424]	; (8001988 <main+0x640>)
 80017e0:	f006 fa4a 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80017e4:	4868      	ldr	r0, [pc, #416]	; (8001988 <main+0x640>)
 80017e6:	f7fe fd2b 	bl	8000240 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4865      	ldr	r0, [pc, #404]	; (8001988 <main+0x640>)
 80017f2:	f000 ff21 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80017f6:	200a      	movs	r0, #10
 80017f8:	f001 fc92 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 80017fc:	2101      	movs	r1, #1
 80017fe:	2000      	movs	r0, #0
 8001800:	f7fe ff32 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001804:	4860      	ldr	r0, [pc, #384]	; (8001988 <main+0x640>)
 8001806:	f7fe ff51 	bl	80006ac <lcdPrint>
 800180a:	e10b      	b.n	8001a24 <main+0x6dc>
	 			  }else{
	 				  /*print Z*/
	 					sprintf((char*)tx_buffer, "Z: %4d       ",
	 							(int)angular_mean[2]);
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <main+0x650>)
 800180e:	edd3 7a02 	vldr	s15, [r3, #8]
	 					sprintf((char*)tx_buffer, "Z: %4d       ",
 8001812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001816:	ee17 2a90 	vmov	r2, s15
 800181a:	495d      	ldr	r1, [pc, #372]	; (8001990 <main+0x648>)
 800181c:	485a      	ldr	r0, [pc, #360]	; (8001988 <main+0x640>)
 800181e:	f006 fa2b 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8001822:	4859      	ldr	r0, [pc, #356]	; (8001988 <main+0x640>)
 8001824:	f7fe fd0c 	bl	8000240 <strlen>
 8001828:	4603      	mov	r3, r0
 800182a:	b29b      	uxth	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	4856      	ldr	r0, [pc, #344]	; (8001988 <main+0x640>)
 8001830:	f000 ff02 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 8001834:	200a      	movs	r0, #10
 8001836:	f001 fc73 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 800183a:	2100      	movs	r1, #0
 800183c:	2000      	movs	r0, #0
 800183e:	f7fe ff13 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001842:	4851      	ldr	r0, [pc, #324]	; (8001988 <main+0x640>)
 8001844:	f7fe ff32 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "                ");
 8001848:	4a4f      	ldr	r2, [pc, #316]	; (8001988 <main+0x640>)
 800184a:	4b52      	ldr	r3, [pc, #328]	; (8001994 <main+0x64c>)
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	7023      	strb	r3, [r4, #0]
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8001858:	484b      	ldr	r0, [pc, #300]	; (8001988 <main+0x640>)
 800185a:	f7fe fcf1 	bl	8000240 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29b      	uxth	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	4848      	ldr	r0, [pc, #288]	; (8001988 <main+0x640>)
 8001866:	f000 fee7 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 800186a:	200a      	movs	r0, #10
 800186c:	f001 fc58 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 8001870:	2101      	movs	r1, #1
 8001872:	2000      	movs	r0, #0
 8001874:	f7fe fef8 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001878:	4843      	ldr	r0, [pc, #268]	; (8001988 <main+0x640>)
 800187a:	f7fe ff17 	bl	80006ac <lcdPrint>
 800187e:	e0d1      	b.n	8001a24 <main+0x6dc>
	 			  }
	 			  /*print the result of the magnetometer*/
	 		  }else if(sens == 3){
 8001880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001882:	2b03      	cmp	r3, #3
 8001884:	f040 8092 	bne.w	80019ac <main+0x664>
	 			  /*print X and Y*/
	 			  if(!page){
 8001888:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800188c:	2b00      	cmp	r3, #0
 800188e:	d13c      	bne.n	800190a <main+0x5c2>
	 					sprintf((char*)tx_buffer, "Mag X:%4d    ",
	 									 (int) magnetic_mean[0]);
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <main+0x658>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
	 					sprintf((char*)tx_buffer, "Mag X:%4d    ",
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 2a90 	vmov	r2, s15
 800189e:	4941      	ldr	r1, [pc, #260]	; (80019a4 <main+0x65c>)
 80018a0:	4839      	ldr	r0, [pc, #228]	; (8001988 <main+0x640>)
 80018a2:	f006 f9e9 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80018a6:	4838      	ldr	r0, [pc, #224]	; (8001988 <main+0x640>)
 80018a8:	f7fe fcca 	bl	8000240 <strlen>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	4835      	ldr	r0, [pc, #212]	; (8001988 <main+0x640>)
 80018b4:	f000 fec0 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f001 fc31 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 80018be:	2100      	movs	r1, #0
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7fe fed1 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 80018c6:	4830      	ldr	r0, [pc, #192]	; (8001988 <main+0x640>)
 80018c8:	f7fe fef0 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
	 							(int)magnetic_mean[1]);
 80018cc:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <main+0x658>)
 80018ce:	edd3 7a01 	vldr	s15, [r3, #4]
	 					sprintf((char*)tx_buffer, "Y: %4d       ",
 80018d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d6:	ee17 2a90 	vmov	r2, s15
 80018da:	492c      	ldr	r1, [pc, #176]	; (800198c <main+0x644>)
 80018dc:	482a      	ldr	r0, [pc, #168]	; (8001988 <main+0x640>)
 80018de:	f006 f9cb 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80018e2:	4829      	ldr	r0, [pc, #164]	; (8001988 <main+0x640>)
 80018e4:	f7fe fcac 	bl	8000240 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4619      	mov	r1, r3
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <main+0x640>)
 80018f0:	f000 fea2 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f001 fc13 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 80018fa:	2101      	movs	r1, #1
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7fe feb3 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001902:	4821      	ldr	r0, [pc, #132]	; (8001988 <main+0x640>)
 8001904:	f7fe fed2 	bl	80006ac <lcdPrint>
 8001908:	e08c      	b.n	8001a24 <main+0x6dc>
	 			  }else{
	 				  /*print Z*/
	 					sprintf((char*)tx_buffer, "Z: %4d    ",
	 							(int)magnetic_mean[2]);
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <main+0x658>)
 800190c:	edd3 7a02 	vldr	s15, [r3, #8]
	 					sprintf((char*)tx_buffer, "Z: %4d    ",
 8001910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001914:	ee17 2a90 	vmov	r2, s15
 8001918:	4923      	ldr	r1, [pc, #140]	; (80019a8 <main+0x660>)
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <main+0x640>)
 800191c:	f006 f9ac 	bl	8007c78 <siprintf>
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <main+0x640>)
 8001922:	f7fe fc8d 	bl	8000240 <strlen>
 8001926:	4603      	mov	r3, r0
 8001928:	b29b      	uxth	r3, r3
 800192a:	4619      	mov	r1, r3
 800192c:	4816      	ldr	r0, [pc, #88]	; (8001988 <main+0x640>)
 800192e:	f000 fe83 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 8001932:	200a      	movs	r0, #10
 8001934:	f001 fbf4 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,0);
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	f7fe fe94 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001940:	4811      	ldr	r0, [pc, #68]	; (8001988 <main+0x640>)
 8001942:	f7fe feb3 	bl	80006ac <lcdPrint>
	 					sprintf((char*)tx_buffer, "                ");
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <main+0x640>)
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <main+0x64c>)
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001952:	682b      	ldr	r3, [r5, #0]
 8001954:	7023      	strb	r3, [r4, #0]
	 					tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8001956:	480c      	ldr	r0, [pc, #48]	; (8001988 <main+0x640>)
 8001958:	f7fe fc72 	bl	8000240 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	b29b      	uxth	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <main+0x640>)
 8001964:	f000 fe68 	bl	8002638 <tx_com>
	 					HAL_Delay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f001 fbd9 	bl	8003120 <HAL_Delay>
	 					lcdSetCursor(0,1);
 800196e:	2101      	movs	r1, #1
 8001970:	2000      	movs	r0, #0
 8001972:	f7fe fe79 	bl	8000668 <lcdSetCursor>
	 					lcdPrint(tx_buffer);
 8001976:	4804      	ldr	r0, [pc, #16]	; (8001988 <main+0x640>)
 8001978:	f7fe fe98 	bl	80006ac <lcdPrint>
 800197c:	e052      	b.n	8001a24 <main+0x6dc>
 800197e:	bf00      	nop
 8001980:	200002ec 	.word	0x200002ec
 8001984:	080084e0 	.word	0x080084e0
 8001988:	20000314 	.word	0x20000314
 800198c:	080084ac 	.word	0x080084ac
 8001990:	080084bc 	.word	0x080084bc
 8001994:	080084cc 	.word	0x080084cc
 8001998:	20000304 	.word	0x20000304
 800199c:	080084f0 	.word	0x080084f0
 80019a0:	200002f8 	.word	0x200002f8
 80019a4:	08008500 	.word	0x08008500
 80019a8:	08008510 	.word	0x08008510
	 			  }
	 		/*print the result of the barometer*/
	 		}else if (sens == 4){
 80019ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d138      	bne.n	8001a24 <main+0x6dc>
	 			sprintf((char*)tx_buffer, "Prs :%6d    ", (int)pressure);
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <main+0x758>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019bc:	ee17 2a90 	vmov	r2, s15
 80019c0:	4938      	ldr	r1, [pc, #224]	; (8001aa4 <main+0x75c>)
 80019c2:	4839      	ldr	r0, [pc, #228]	; (8001aa8 <main+0x760>)
 80019c4:	f006 f958 	bl	8007c78 <siprintf>
	 			tx_com(tx_buffer, strlen((char const*)tx_buffer));
 80019c8:	4837      	ldr	r0, [pc, #220]	; (8001aa8 <main+0x760>)
 80019ca:	f7fe fc39 	bl	8000240 <strlen>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4619      	mov	r1, r3
 80019d4:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <main+0x760>)
 80019d6:	f000 fe2f 	bl	8002638 <tx_com>
	 			HAL_Delay(10);
 80019da:	200a      	movs	r0, #10
 80019dc:	f001 fba0 	bl	8003120 <HAL_Delay>
	 			lcdSetCursor(0,0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7fe fe40 	bl	8000668 <lcdSetCursor>
	 			lcdPrint(tx_buffer);
 80019e8:	482f      	ldr	r0, [pc, #188]	; (8001aa8 <main+0x760>)
 80019ea:	f7fe fe5f 	bl	80006ac <lcdPrint>
	 			sprintf((char*)tx_buffer, "                ");
 80019ee:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <main+0x760>)
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <main+0x764>)
 80019f2:	4614      	mov	r4, r2
 80019f4:	461d      	mov	r5, r3
 80019f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	7023      	strb	r3, [r4, #0]
	 			tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 80019fe:	482a      	ldr	r0, [pc, #168]	; (8001aa8 <main+0x760>)
 8001a00:	f7fe fc1e 	bl	8000240 <strlen>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4827      	ldr	r0, [pc, #156]	; (8001aa8 <main+0x760>)
 8001a0c:	f000 fe14 	bl	8002638 <tx_com>
	 			HAL_Delay(10);
 8001a10:	200a      	movs	r0, #10
 8001a12:	f001 fb85 	bl	8003120 <HAL_Delay>
	 			lcdSetCursor(0,1);
 8001a16:	2101      	movs	r1, #1
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7fe fe25 	bl	8000668 <lcdSetCursor>
	 			lcdPrint(tx_buffer);
 8001a1e:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <main+0x760>)
 8001a20:	f7fe fe44 	bl	80006ac <lcdPrint>
	 		}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
	     /*check if a button has been pressed and check which one*/
	     	uint8_t but = lcdReadButtons();
 8001a24:	f7fe fdfe 	bl	8000624 <lcdReadButtons>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	     	if(but == 0 || but == 1111){
 8001a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f43f acd4 	beq.w	80013e0 <main+0x98>
	     	}else{
	     		/*If press the first button, the sensor to be displayed on the LCD is changed forward*/
	     		if(!(but & 0x01)) {
 8001a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <main+0x710>
	     			if(sens < 4){
 8001a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	dc03      	bgt.n	8001a52 <main+0x70a>
	     				sens = sens + 1;
 8001a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a50:	e4c6      	b.n	80013e0 <main+0x98>
	     			}else{
	     				sens = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a56:	e4c3      	b.n	80013e0 <main+0x98>
	     			}
	     		}else if (!(but & 0x02)) {
 8001a58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10b      	bne.n	8001a7c <main+0x734>
	     			/*If you press the first button, the variable to be displayed on the LCD is changed*/
	     			if(page){
 8001a64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <main+0x72c>
	     				page=false;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a72:	e4b5      	b.n	80013e0 <main+0x98>
	     			}else{
	     				page=true;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a7a:	e4b1      	b.n	80013e0 <main+0x98>
	     			}
	     			/*If you press the fourth  button, the sensor to be displayed on the LCD is changed backwards*/
	     		}else if (!(but & 0x08)) {
 8001a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f47f acab 	bne.w	80013e0 <main+0x98>
	     			if(sens > 0){
 8001a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	dd03      	ble.n	8001a98 <main+0x750>
	     				sens = sens - 1;
 8001a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a92:	3b01      	subs	r3, #1
 8001a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a96:	e4a3      	b.n	80013e0 <main+0x98>
	     			}else{
	     				sens = 4;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  {
 8001a9c:	e4a0      	b.n	80013e0 <main+0x98>
 8001a9e:	bf00      	nop
 8001aa0:	200002dc 	.word	0x200002dc
 8001aa4:	0800851c 	.word	0x0800851c
 8001aa8:	20000314 	.word	0x20000314
 8001aac:	080084cc 	.word	0x080084cc

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0b8      	sub	sp, #224	; 0xe0
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aba:	2234      	movs	r2, #52	; 0x34
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f006 f8d2 	bl	8007c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	2290      	movs	r2, #144	; 0x90
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f006 f8c3 	bl	8007c68 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ae2:	f003 fb91 	bl	8005208 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <SystemClock_Config+0x124>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <SystemClock_Config+0x124>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <SystemClock_Config+0x124>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <SystemClock_Config+0x128>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b06:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <SystemClock_Config+0x128>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <SystemClock_Config+0x128>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b36:	2304      	movs	r3, #4
 8001b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b3c:	2360      	movs	r3, #96	; 0x60
 8001b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fbb8 	bl	80052c8 <HAL_RCC_OscConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b5e:	f000 ff76 	bl	8002a4e <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b62:	f003 fb61 	bl	8005228 <HAL_PWREx_EnableOverDrive>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b6c:	f000 ff6f 	bl	8002a4e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b76:	2302      	movs	r3, #2
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b94:	2103      	movs	r1, #3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fe44 	bl	8005824 <HAL_RCC_ClockConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001ba2:	f000 ff54 	bl	8002a4e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <SystemClock_Config+0x12c>)
 8001ba8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 f829 	bl	8005c14 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001bc8:	f000 ff41 	bl	8002a4e <Error_Handler>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	37e0      	adds	r7, #224	; 0xe0
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	00204100 	.word	0x00204100

08001be0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_ETH_Init+0x78>)
 8001be6:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <MX_ETH_Init+0x7c>)
 8001be8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_ETH_Init+0x78>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_ETH_Init+0x78>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_ETH_Init+0x78>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	22e1      	movs	r2, #225	; 0xe1
 8001c10:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	3303      	adds	r3, #3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	3305      	adds	r3, #5
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c42:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_ETH_Init+0x78>)
 8001c46:	f001 fb9f 	bl	8003388 <HAL_ETH_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001c50:	f000 fefd 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000ca0 	.word	0x20000ca0
 8001c5c:	40028000 	.word	0x40028000

08001c60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_I2C1_Init+0x78>)
 8001c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <MX_I2C1_Init+0x7c>)
 8001c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c9a:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001c9c:	f002 f9a4 	bl	8003fe8 <HAL_I2C_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ca6:	f000 fed2 	bl	8002a4e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001caa:	2100      	movs	r1, #0
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001cae:	f003 f8cb 	bl	8004e48 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cb8:	f000 fec9 	bl	8002a4e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_I2C1_Init+0x74>)
 8001cc0:	f003 f90d 	bl	8004ede <HAL_I2CEx_ConfigDigitalFilter>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cca:	f000 fec0 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200007d0 	.word	0x200007d0
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	20303e5d 	.word	0x20303e5d

08001ce0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <MX_TIM3_Init+0x9c>)
 8001d02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2999;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d06:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d14:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001d18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d26:	4814      	ldr	r0, [pc, #80]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d28:	f004 fb9a 	bl	8006460 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001d32:	f000 fe8c 	bl	8002a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d44:	f004 fd02 	bl	800674c <HAL_TIM_ConfigClockSource>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001d4e:	f000 fe7e 	bl	8002a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_TIM3_Init+0x98>)
 8001d60:	f004 ff10 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001d6a:	f000 fe70 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000c20 	.word	0x20000c20
 8001d7c:	40000400 	.word	0x40000400

08001d80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001da0:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <MX_TIM4_Init+0x9c>)
 8001da2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2999;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001da6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001daa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 31999;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001db4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001db8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001dc8:	f004 fb4a 	bl	8006460 <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001dd2:	f000 fe3c 	bl	8002a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001de4:	f004 fcb2 	bl	800674c <HAL_TIM_ConfigClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001dee:	f000 fe2e 	bl	8002a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_TIM4_Init+0x98>)
 8001e00:	f004 fec0 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001e0a:	f000 fe20 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000710 	.word	0x20000710
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <MX_TIM6_Init+0x6c>)
 8001e34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e38:	f240 128f 	movw	r2, #399	; 0x18f
 8001e3c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3199;
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e46:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001e4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e54:	f004 fb04 	bl	8006460 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001e5e:	f000 fdf6 	bl	8002a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e70:	f004 fe88 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001e7a:	f000 fde8 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000c60 	.word	0x20000c60
 8001e8c:	40001000 	.word	0x40001000

08001e90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001ea2:	4a16      	ldr	r2, [pc, #88]	; (8001efc <MX_TIM7_Init+0x6c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3199;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001eb6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001eba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001ec4:	f004 facc 	bl	8006460 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001ece:	f000 fdbe 	bl	8002a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_TIM7_Init+0x68>)
 8001ee0:	f004 fe50 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001eea:	f000 fdb0 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000ce8 	.word	0x20000ce8
 8001efc:	40001400 	.word	0x40001400

08001f00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <MX_USART3_UART_Init+0x5c>)
 8001f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f26:	220c      	movs	r2, #12
 8001f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f44:	f004 feca 	bl	8006cdc <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f4e:	f000 fd7e 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000750 	.word	0x20000750
 8001f5c:	40004800 	.word	0x40004800

08001f60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6e:	2206      	movs	r2, #6
 8001f70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f80:	2202      	movs	r2, #2
 8001f82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa4:	f002 ffe7 	bl	8004f76 <HAL_PCD_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fae:	f000 fd4e 	bl	8002a4e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000081c 	.word	0x2000081c

08001fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08c      	sub	sp, #48	; 0x30
 8001fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <MX_GPIO_Init+0x130>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a45      	ldr	r2, [pc, #276]	; (80020ec <MX_GPIO_Init+0x130>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <MX_GPIO_Init+0x130>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fea:	4b40      	ldr	r3, [pc, #256]	; (80020ec <MX_GPIO_Init+0x130>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a3f      	ldr	r2, [pc, #252]	; (80020ec <MX_GPIO_Init+0x130>)
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <MX_GPIO_Init+0x130>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <MX_GPIO_Init+0x130>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a39      	ldr	r2, [pc, #228]	; (80020ec <MX_GPIO_Init+0x130>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <MX_GPIO_Init+0x130>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <MX_GPIO_Init+0x130>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a33      	ldr	r2, [pc, #204]	; (80020ec <MX_GPIO_Init+0x130>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <MX_GPIO_Init+0x130>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <MX_GPIO_Init+0x130>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a2d      	ldr	r2, [pc, #180]	; (80020ec <MX_GPIO_Init+0x130>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <MX_GPIO_Init+0x130>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <MX_GPIO_Init+0x130>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a27      	ldr	r2, [pc, #156]	; (80020ec <MX_GPIO_Init+0x130>)
 8002050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <MX_GPIO_Init+0x130>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	f244 0181 	movw	r1, #16513	; 0x4081
 8002068:	4821      	ldr	r0, [pc, #132]	; (80020f0 <MX_GPIO_Init+0x134>)
 800206a:	f001 ffa3 	bl	8003fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	4820      	ldr	r0, [pc, #128]	; (80020f4 <MX_GPIO_Init+0x138>)
 8002074:	f001 ff9e 	bl	8003fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <MX_GPIO_Init+0x13c>)
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	481b      	ldr	r0, [pc, #108]	; (80020fc <MX_GPIO_Init+0x140>)
 800208e:	f001 fde7 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002092:	f244 0381 	movw	r3, #16513	; 0x4081
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <MX_GPIO_Init+0x134>)
 80020ac:	f001 fdd8 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	480b      	ldr	r0, [pc, #44]	; (80020f4 <MX_GPIO_Init+0x138>)
 80020c8:	f001 fdca 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_GPIO_Init+0x138>)
 80020e0:	f001 fdbe 	bl	8003c60 <HAL_GPIO_Init>

}
 80020e4:	bf00      	nop
 80020e6:	3730      	adds	r7, #48	; 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40021800 	.word	0x40021800
 80020f8:	10110000 	.word	0x10110000
 80020fc:	40020800 	.word	0x40020800

08002100 <initialization>:
/* USER CODE BEGIN 4 */
/*
 * Inizialization
 */
/*Initialization of all variables that trigger the calculation of data as false*/
static void initialization(){
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	display_flag = false;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <initialization+0x28>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
	acc_and_giro_flag = false;
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <initialization+0x2c>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
	magn_flag = false;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <initialization+0x30>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
	baro_flag = false;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <initialization+0x34>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000700 	.word	0x20000700
 800212c:	200006fc 	.word	0x200006fc
 8002130:	200006fd 	.word	0x200006fd
 8002134:	200006ff 	.word	0x200006ff

08002138 <lps22hb_init_mg>:
/* Initialization of all sensors*/


static stmdev_ctx_t lps22hb_init_mg(I2C_HandleTypeDef *hi2c){
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]


	stmdev_ctx_t lps22hb_dev_ctx;
	lps22hb_dev_ctx.write_reg = lps22hb_platform_write;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <lps22hb_init_mg+0x7c>)
 8002144:	60fb      	str	r3, [r7, #12]
	lps22hb_dev_ctx.read_reg = lps22hb_platform_read;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <lps22hb_init_mg+0x80>)
 8002148:	613b      	str	r3, [r7, #16]
	lps22hb_dev_ctx.handle = &hi2c1;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <lps22hb_init_mg+0x84>)
 800214c:	617b      	str	r3, [r7, #20]

	/* Check device ID */
	lps22hb_device_id_get(&lps22hb_dev_ctx, &whoamI);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <lps22hb_init_mg+0x88>)
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fba6 	bl	80008a6 <lps22hb_device_id_get>
	if (whoamI != LPS22HB_ID){
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <lps22hb_init_mg+0x88>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2bb1      	cmp	r3, #177	; 0xb1
 8002160:	d000      	beq.n	8002164 <lps22hb_init_mg+0x2c>
		while(1)/* manage here device not found */;
 8002162:	e7fe      	b.n	8002162 <lps22hb_init_mg+0x2a>
	}
	/* Restore default configuration */
	lps22hb_reset_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2101      	movs	r1, #1
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fbac 	bl	80008c8 <lps22hb_reset_set>
	do {
		lps22hb_reset_get(&lps22hb_dev_ctx, &rst);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4913      	ldr	r1, [pc, #76]	; (80021c4 <lps22hb_init_mg+0x8c>)
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fbcc 	bl	8000914 <lps22hb_reset_get>
	} while (rst);
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <lps22hb_init_mg+0x8c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f5      	bne.n	8002170 <lps22hb_init_mg+0x38>

	/* Enable Block Data Update */
	//lps22hb_block_data_update_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);

	/* Can be enabled low pass filter on output */
	lps22hb_low_pass_filter_mode_set(&lps22hb_dev_ctx, LPS22HB_LPF_ODR_DIV_2);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fb2e 	bl	80007ec <lps22hb_low_pass_filter_mode_set>

	/* Can be set Data-ready signal on INT_DRDY pin */
	//lps22hb_drdy_on_int_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);

	/* Set Output Data Rate */
	lps22hb_data_rate_set(&lps22hb_dev_ctx, LPS22HB_ODR_10_Hz);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fb4e 	bl	8000838 <lps22hb_data_rate_set>

	return lps22hb_dev_ctx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461c      	mov	r4, r3
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	08002471 	.word	0x08002471
 80021b8:	080024b9 	.word	0x080024b9
 80021bc:	200007d0 	.word	0x200007d0
 80021c0:	20000310 	.word	0x20000310
 80021c4:	20000311 	.word	0x20000311

080021c8 <lsm303agr_init_xl>:


static stmdev_ctx_t lsm303agr_init_xl(I2C_HandleTypeDef *hi2c){
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	 /* Initialize mems driver interface */
	  stmdev_ctx_t dev_ctx_xl;
	  dev_ctx_xl.write_reg = lsm303agr_platform_write;
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <lsm303agr_init_xl+0x88>)
 80021d4:	60fb      	str	r3, [r7, #12]
	  dev_ctx_xl.read_reg = lsm303agr_platform_read;
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <lsm303agr_init_xl+0x8c>)
 80021d8:	613b      	str	r3, [r7, #16]
	  dev_ctx_xl.handle = (void*)LSM303AGR_I2C_ADD_XL;
 80021da:	2333      	movs	r3, #51	; 0x33
 80021dc:	617b      	str	r3, [r7, #20]

	  /* Check device ID */
	  whoamI = 0;
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <lsm303agr_init_xl+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	  lsm303agr_xl_device_id_get(&dev_ctx_xl, &whoamI);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	491b      	ldr	r1, [pc, #108]	; (8002258 <lsm303agr_init_xl+0x90>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fdde 	bl	8000dac <lsm303agr_xl_device_id_get>
	  if ( whoamI != LSM303AGR_ID_XL )
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <lsm303agr_init_xl+0x90>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b33      	cmp	r3, #51	; 0x33
 80021f6:	d000      	beq.n	80021fa <lsm303agr_init_xl+0x32>
	    while(1); /*manage here device not found */
 80021f8:	e7fe      	b.n	80021f8 <lsm303agr_init_xl+0x30>


	  /* Enable Block Data Update */
	  lsm303agr_xl_block_data_update_set(&dev_ctx_xl, PROPERTY_ENABLE);
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	2101      	movs	r1, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fccd 	bl	8000ba0 <lsm303agr_xl_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm303agr_xl_data_rate_set(&dev_ctx_xl, LSM303AGR_XL_ODR_1Hz);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fc7b 	bl	8000b08 <lsm303agr_xl_data_rate_set>
	  /* Set accelerometer full scale */
	  lsm303agr_xl_full_scale_set(&dev_ctx_xl, LSM303AGR_2g);
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fc9b 	bl	8000b54 <lsm303agr_xl_full_scale_set>
	  /* Enable temperature sensor */
	  lsm303agr_temperature_meas_set(&dev_ctx_xl, LSM303AGR_TEMP_ENABLE);
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fbf1 	bl	8000a0c <lsm303agr_temperature_meas_set>
	  /* Set device in continuos mode */
	  lsm303agr_xl_operating_mode_set(&dev_ctx_xl, LSM303AGR_HR_12bit);
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fc11 	bl	8000a58 <lsm303agr_xl_operating_mode_set>



	  return dev_ctx_xl;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	461c      	mov	r4, r3
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	bf00      	nop
 8002250:	08002501 	.word	0x08002501
 8002254:	08002555 	.word	0x08002555
 8002258:	20000310 	.word	0x20000310

0800225c <lsm6dsl_init>:

static stmdev_ctx_t lsm6dsl_init(I2C_HandleTypeDef *hi2c){
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	stmdev_ctx_t lsm6dsl_dev_ctx;
	  lsm6dsl_dev_ctx.write_reg = lsm6dsl_platform_write;
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <lsm6dsl_init+0xcc>)
 8002268:	60fb      	str	r3, [r7, #12]
	  lsm6dsl_dev_ctx.read_reg = lsm6dsl_platform_read;
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <lsm6dsl_init+0xd0>)
 800226c:	613b      	str	r3, [r7, #16]
	  lsm6dsl_dev_ctx.handle = hi2c;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	617b      	str	r3, [r7, #20]


	  whoamI = 0;
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <lsm6dsl_init+0xd4>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
	  lsm6dsl_device_id_get(&lsm6dsl_dev_ctx, &whoamI);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	492c      	ldr	r1, [pc, #176]	; (8002330 <lsm6dsl_init+0xd4>)
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ff47 	bl	8001112 <lsm6dsl_device_id_get>
	  if ( whoamI != LSM6DSL_ID )
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <lsm6dsl_init+0xd4>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b6a      	cmp	r3, #106	; 0x6a
 800228a:	d000      	beq.n	800228e <lsm6dsl_init+0x32>
		  while(1)
 800228c:	e7fe      	b.n	800228c <lsm6dsl_init+0x30>
	      	; /*manage here device not found */
	  /*
	   *  Restore default configuration
	   */
		lsm6dsl_reset_set(&lsm6dsl_dev_ctx, PROPERTY_ENABLE);
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff4d 	bl	8001134 <lsm6dsl_reset_set>
		do {
		  lsm6dsl_reset_get(&lsm6dsl_dev_ctx, &rst);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4925      	ldr	r1, [pc, #148]	; (8002334 <lsm6dsl_init+0xd8>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe ff6d 	bl	8001180 <lsm6dsl_reset_get>
		} while (rst);
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <lsm6dsl_init+0xd8>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f5      	bne.n	800229a <lsm6dsl_init+0x3e>
		/*
		*  Enable Block Data Update
		*/
		lsm6dsl_block_data_update_set(&lsm6dsl_dev_ctx, PROPERTY_ENABLE);
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fed3 	bl	8001060 <lsm6dsl_block_data_update_set>
		/*
		* Set Output Data Rate
		*/
		lsm6dsl_xl_data_rate_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fe5b 	bl	8000f7c <lsm6dsl_xl_data_rate_set>
		lsm6dsl_gy_data_rate_set(&lsm6dsl_dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2101      	movs	r1, #1
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fea1 	bl	8001014 <lsm6dsl_gy_data_rate_set>
		/*
		* Set full scale
		*/
		lsm6dsl_xl_full_scale_set(&lsm6dsl_dev_ctx, LSM6DSL_2g);
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fe29 	bl	8000f30 <lsm6dsl_xl_full_scale_set>
		lsm6dsl_gy_full_scale_set(&lsm6dsl_dev_ctx, LSM6DSL_2000dps);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	2106      	movs	r1, #6
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fe6f 	bl	8000fc8 <lsm6dsl_gy_full_scale_set>

		/*
		* Configure filtering chain(No aux interface)
		*/
		/* Accelerometer - analog filter */
		lsm6dsl_xl_filter_analog_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe ff5e 	bl	80011b2 <lsm6dsl_xl_filter_analog_set>

		/* Accelerometer - LPF1 path ( LPF2 not used )*/
		//lsm6dsl_xl_lp1_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_LP1_ODR_DIV_4);

		/* Accelerometer - LPF1 + LPF2 path */
		lsm6dsl_xl_lp2_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2111      	movs	r1, #17
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe ff7e 	bl	80011fe <lsm6dsl_xl_lp2_bandwidth_set>
		/* Accelerometer - High Pass / Slope path */
		//lsm6dsl_xl_reference_mode_set(&lsm6dsl_dev_ctx, PROPERTY_DISABLE);
		//lsm6dsl_xl_hp_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_HP_ODR_DIV_100);

		/* Gyroscope - filtering chain */
		lsm6dsl_gy_band_pass_set(&lsm6dsl_dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	21a8      	movs	r1, #168	; 0xa8
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe ffaf 	bl	800126c <lsm6dsl_gy_band_pass_set>
		return lsm6dsl_dev_ctx;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	461c      	mov	r4, r3
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800231a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	080025a9 	.word	0x080025a9
 800232c:	080025f1 	.word	0x080025f1
 8002330:	20000310 	.word	0x20000310
 8002334:	20000311 	.word	0x20000311

08002338 <lsm303agr_init_mg>:

static stmdev_ctx_t lsm303agr_init_mg(I2C_HandleTypeDef *hi2c){
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	stmdev_ctx_t dev_ctx_mg;
	dev_ctx_mg.write_reg = lsm303agr_platform_write;
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <lsm303agr_init_mg+0xa8>)
 8002344:	60fb      	str	r3, [r7, #12]
	dev_ctx_mg.read_reg = lsm303agr_platform_read;
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <lsm303agr_init_mg+0xac>)
 8002348:	613b      	str	r3, [r7, #16]
	dev_ctx_mg.handle = (void*)LSM303AGR_I2C_ADD_MG;
 800234a:	233d      	movs	r3, #61	; 0x3d
 800234c:	617b      	str	r3, [r7, #20]
	/* Check device ID */
	whoamI = 0;
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <lsm303agr_init_mg+0xb0>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
	lsm303agr_mag_device_id_get(&dev_ctx_mg, &whoamI);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4923      	ldr	r1, [pc, #140]	; (80023e8 <lsm303agr_init_mg+0xb0>)
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fd37 	bl	8000dce <lsm303agr_mag_device_id_get>
	if ( whoamI != LSM303AGR_ID_MG )
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <lsm303agr_init_mg+0xb0>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d000      	beq.n	800236a <lsm303agr_init_mg+0x32>
	while(1); /*manage here device not found */
 8002368:	e7fe      	b.n	8002368 <lsm303agr_init_mg+0x30>

	/* Restore default configuration for magnetometer */
	lsm303agr_mag_reset_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fd3d 	bl	8000df0 <lsm303agr_mag_reset_set>
	do {
	 lsm303agr_mag_reset_get(&dev_ctx_mg, &rst);
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	491c      	ldr	r1, [pc, #112]	; (80023ec <lsm303agr_init_mg+0xb4>)
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fd5d 	bl	8000e3c <lsm303agr_mag_reset_get>
	} while (rst);
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <lsm303agr_init_mg+0xb4>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f5      	bne.n	8002376 <lsm303agr_init_mg+0x3e>
	/* Enable Block Data Update */
	lsm303agr_mag_block_data_update_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fcd4 	bl	8000d3e <lsm303agr_mag_block_data_update_set>
	/* Set Output Data Rate */
	lsm303agr_mag_data_rate_set(&dev_ctx_mg, LSM303AGR_MG_ODR_10Hz);
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fc5c 	bl	8000c5a <lsm303agr_mag_data_rate_set>
	/* Set / Reset magnetic sensor mode */
	lsm303agr_mag_set_rst_mode_set(&dev_ctx_mg, LSM303AGR_SENS_OFF_CANC_EVERY_ODR);
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fca2 	bl	8000cf2 <lsm303agr_mag_set_rst_mode_set>
	/* Enable temperature compensation on mag sensor */
	lsm303agr_mag_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fc76 	bl	8000ca6 <lsm303agr_mag_offset_temp_comp_set>
	/* Set magnetometer in continuos mode */
	lsm303agr_mag_operating_mode_set(&dev_ctx_mg, LSM303AGR_CONTINUOUS_MODE);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fc24 	bl	8000c0e <lsm303agr_mag_operating_mode_set>

	return dev_ctx_mg;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	461c      	mov	r4, r3
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	bf00      	nop
 80023e0:	08002501 	.word	0x08002501
 80023e4:	08002555 	.word	0x08002555
 80023e8:	20000310 	.word	0x20000310
 80023ec:	20000311 	.word	0x20000311

080023f0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	/*the variable that allows the LCD to be updated with an interrupt at 1 hz is activated*/
	 if(htim->Instance == TIM6){
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d102      	bne.n	8002408 <HAL_TIM_PeriodElapsedCallback+0x18>
		 baro_flag=true;
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
	 }
	 /*the variable that allows the compute of acceletometer and gyroscope with an interrupt at 30 hz is activated*/
	 if(htim->Instance == TIM7){
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d102      	bne.n	8002418 <HAL_TIM_PeriodElapsedCallback+0x28>
		 acc_and_giro_flag=true;
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
	 	 }
	 /*the variable that allows the compute of mean and magnetometer with an interrupt at 10 hz is activated*/
	 if(htim-> Instance == TIM4){
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d105      	bne.n	800242e <HAL_TIM_PeriodElapsedCallback+0x3e>
		 magn_flag =true;
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
		 mean_flag=true;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
	 }
	 /*the variable that allows the compute of barometer with an interrupt at 75 hz is activated*/
	 if(htim-> Instance == TIM3){
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <HAL_TIM_PeriodElapsedCallback+0x4e>
		display_flag =true;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
		 }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40001000 	.word	0x40001000
 8002450:	200006ff 	.word	0x200006ff
 8002454:	40001400 	.word	0x40001400
 8002458:	200006fc 	.word	0x200006fc
 800245c:	40000800 	.word	0x40000800
 8002460:	200006fd 	.word	0x200006fd
 8002464:	200006fe 	.word	0x200006fe
 8002468:	40000400 	.word	0x40000400
 800246c:	20000700 	.word	0x20000700

08002470 <lps22hb_platform_write>:



static int32_t lps22hb_platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af04      	add	r7, sp, #16
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	460b      	mov	r3, r1
 800247e:	72fb      	strb	r3, [r7, #11]
 8002480:	4613      	mov	r3, r2
 8002482:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <lps22hb_platform_write+0x44>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10d      	bne.n	80024a8 <lps22hb_platform_write+0x38>
		/* Write multiple command */
		HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD_H, reg,
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	b29a      	uxth	r2, r3
 8002490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	893b      	ldrh	r3, [r7, #8]
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	21bb      	movs	r1, #187	; 0xbb
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f002 f81a 	bl	80044dc <HAL_I2C_Mem_Write>
		I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	}
	return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200007d0 	.word	0x200007d0

080024b8 <lps22hb_platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hb_platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af04      	add	r7, sp, #16
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	72fb      	strb	r3, [r7, #11]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <lps22hb_platform_read+0x44>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10d      	bne.n	80024f0 <lps22hb_platform_read+0x38>
		/* Read multiple command */
		HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD_H, reg,
 80024d4:	7afb      	ldrb	r3, [r7, #11]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	893b      	ldrh	r3, [r7, #8]
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2301      	movs	r3, #1
 80024e8:	21bb      	movs	r1, #187	; 0xbb
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f002 f90a 	bl	8004704 <HAL_I2C_Mem_Read>
		I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	}
	return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200007d0 	.word	0x200007d0

08002500 <lsm303agr_platform_write>:
static int32_t lsm303agr_platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
                              uint16_t len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af04      	add	r7, sp, #16
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	72fb      	strb	r3, [r7, #11]
 8002510:	4613      	mov	r3, r2
 8002512:	813b      	strh	r3, [r7, #8]
  uint32_t i2c_add = (uint32_t)handle;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	617b      	str	r3, [r7, #20]
  if (i2c_add == LSM303AGR_I2C_ADD_XL)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b33      	cmp	r3, #51	; 0x33
 800251c:	d103      	bne.n	8002526 <lsm303agr_platform_write+0x26>
  {
    /* enable auto incremented in multiple read/write commands */
    Reg |= 0x80;
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002524:	72fb      	strb	r3, [r7, #11]
  }
  HAL_I2C_Mem_Write(&hi2c1, i2c_add, Reg,
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	b299      	uxth	r1, r3
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	b29a      	uxth	r2, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	893b      	ldrh	r3, [r7, #8]
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	4804      	ldr	r0, [pc, #16]	; (8002550 <lsm303agr_platform_write+0x50>)
 8002540:	f001 ffcc 	bl	80044dc <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200007d0 	.word	0x200007d0

08002554 <lsm303agr_platform_read>:

static int32_t lsm303agr_platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
                             uint16_t len)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af04      	add	r7, sp, #16
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	460b      	mov	r3, r1
 8002562:	72fb      	strb	r3, [r7, #11]
 8002564:	4613      	mov	r3, r2
 8002566:	813b      	strh	r3, [r7, #8]
  uint32_t i2c_add = (uint32_t)handle;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	617b      	str	r3, [r7, #20]
  if (i2c_add == LSM303AGR_I2C_ADD_XL)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b33      	cmp	r3, #51	; 0x33
 8002570:	d103      	bne.n	800257a <lsm303agr_platform_read+0x26>
  {
    /* enable auto incremented in multiple read/write commands */
    Reg |= 0x80;
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002578:	72fb      	strb	r3, [r7, #11]
  }
  HAL_I2C_Mem_Read(&hi2c1, (uint8_t) i2c_add, Reg,
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	b299      	uxth	r1, r3
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	b29a      	uxth	r2, r3
 8002584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	893b      	ldrh	r3, [r7, #8]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2301      	movs	r3, #1
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <lsm303agr_platform_read+0x50>)
 8002596:	f002 f8b5 	bl	8004704 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200007d0 	.word	0x200007d0

080025a8 <lsm6dsl_platform_write>:
static int32_t lsm6dsl_platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
                              uint16_t len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	460b      	mov	r3, r1
 80025b6:	72fb      	strb	r3, [r7, #11]
 80025b8:	4613      	mov	r3, r2
 80025ba:	813b      	strh	r3, [r7, #8]
  if (handle == &hi2c1)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <lsm6dsl_platform_write+0x44>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10d      	bne.n	80025e0 <lsm6dsl_platform_write+0x38>
  {
    HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg,
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	893b      	ldrh	r3, [r7, #8]
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2301      	movs	r3, #1
 80025d8:	21d7      	movs	r1, #215	; 0xd7
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 ff7e 	bl	80044dc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  }
  return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200007d0 	.word	0x200007d0

080025f0 <lsm6dsl_platform_read>:

static int32_t lsm6dsl_platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
                             uint16_t len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	461a      	mov	r2, r3
 80025fc:	460b      	mov	r3, r1
 80025fe:	72fb      	strb	r3, [r7, #11]
 8002600:	4613      	mov	r3, r2
 8002602:	813b      	strh	r3, [r7, #8]
  if (handle == &hi2c1)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <lsm6dsl_platform_read+0x44>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10d      	bne.n	8002628 <lsm6dsl_platform_read+0x38>
  {
      HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg,
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	b29a      	uxth	r2, r3
 8002610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	893b      	ldrh	r3, [r7, #8]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	21d7      	movs	r1, #215	; 0xd7
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f002 f86e 	bl	8004704 <HAL_I2C_Mem_Read>
                       I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  }
  return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200007d0 	.word	0x200007d0

08002638 <tx_com>:
 *
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len ) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart3, tx_buffer, len, 1000);
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <tx_com+0x24>)
 800264e:	f004 fb93 	bl	8006d78 <HAL_UART_Transmit>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000750 	.word	0x20000750

08002660 <acceleration1_acquisition>:


/*Take the accelerometer values and converted into the components of the acceleration vector on the 3 axes*/
static void acceleration1_acquisition(stmdev_ctx_t *dev_ctx, int8_t i){
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(dev_ctx, &reg.status_reg);
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fd1a 	bl	80010ac <lsm6dsl_status_reg_get>
	memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	481b      	ldr	r0, [pc, #108]	; (80026ec <acceleration1_acquisition+0x8c>)
 800267e:	f005 faf3 	bl	8007c68 <memset>
	lsm6dsl_acceleration_raw_get(dev_ctx, data_raw_acceleration.u8bit);
 8002682:	491a      	ldr	r1, [pc, #104]	; (80026ec <acceleration1_acquisition+0x8c>)
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe fd33 	bl	80010f0 <lsm6dsl_acceleration_raw_get>
	coda_x_acc1[i] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[0]);
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <acceleration1_acquisition+0x8c>)
 800268c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002690:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fc1b 	bl	8000ed0 <lsm6dsl_from_fs2g_to_mg>
 800269a:	eef0 7a40 	vmov.f32	s15, s0
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <acceleration1_acquisition+0x90>)
 80026a0:	00a3      	lsls	r3, r4, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	edc3 7a00 	vstr	s15, [r3]
	coda_y_acc1[i] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[1]);
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <acceleration1_acquisition+0x8c>)
 80026aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026ae:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fc0c 	bl	8000ed0 <lsm6dsl_from_fs2g_to_mg>
 80026b8:	eef0 7a40 	vmov.f32	s15, s0
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <acceleration1_acquisition+0x94>)
 80026be:	00a3      	lsls	r3, r4, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	edc3 7a00 	vstr	s15, [r3]
	coda_z_acc1[i] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[2]);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <acceleration1_acquisition+0x8c>)
 80026c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026cc:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fbfd 	bl	8000ed0 <lsm6dsl_from_fs2g_to_mg>
 80026d6:	eef0 7a40 	vmov.f32	s15, s0
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <acceleration1_acquisition+0x98>)
 80026dc:	00a3      	lsls	r3, r4, #2
 80026de:	4413      	add	r3, r2
 80026e0:	edc3 7a00 	vstr	s15, [r3]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	20000098 	.word	0x20000098
 80026f0:	20000128 	.word	0x20000128
 80026f4:	20000150 	.word	0x20000150
 80026f8:	20000178 	.word	0x20000178

080026fc <acceleration2_acquisition>:
/*Take the accelerometer values and converted into the components of the acceleration vector on the 3 axes*/
static void acceleration2_acquisition(stmdev_ctx_t *dev_ctx, int8_t i){
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
			/* Read magnetic field data */
	memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8002708:	2206      	movs	r2, #6
 800270a:	2100      	movs	r1, #0
 800270c:	481b      	ldr	r0, [pc, #108]	; (800277c <acceleration2_acquisition+0x80>)
 800270e:	f005 faab 	bl	8007c68 <memset>
	lsm303agr_acceleration_raw_get(dev_ctx, data_raw_acceleration.u8bit);
 8002712:	491a      	ldr	r1, [pc, #104]	; (800277c <acceleration2_acquisition+0x80>)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fe fa69 	bl	8000bec <lsm303agr_acceleration_raw_get>
	coda_x_acc2[i] = lsm303agr_from_fs_2g_hr_to_mg( data_raw_acceleration.i16bit[0] );
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <acceleration2_acquisition+0x80>)
 800271c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002720:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe f93f 	bl	80009a8 <lsm303agr_from_fs_2g_hr_to_mg>
 800272a:	eef0 7a40 	vmov.f32	s15, s0
 800272e:	4a14      	ldr	r2, [pc, #80]	; (8002780 <acceleration2_acquisition+0x84>)
 8002730:	00a3      	lsls	r3, r4, #2
 8002732:	4413      	add	r3, r2
 8002734:	edc3 7a00 	vstr	s15, [r3]
	coda_y_acc2[i] = lsm303agr_from_fs_2g_hr_to_mg( data_raw_acceleration.i16bit[1] );
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <acceleration2_acquisition+0x80>)
 800273a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800273e:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f930 	bl	80009a8 <lsm303agr_from_fs_2g_hr_to_mg>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <acceleration2_acquisition+0x88>)
 800274e:	00a3      	lsls	r3, r4, #2
 8002750:	4413      	add	r3, r2
 8002752:	edc3 7a00 	vstr	s15, [r3]
	coda_z_acc2[i] = lsm303agr_from_fs_2g_hr_to_mg( data_raw_acceleration.i16bit[2] );
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <acceleration2_acquisition+0x80>)
 8002758:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800275c:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe f921 	bl	80009a8 <lsm303agr_from_fs_2g_hr_to_mg>
 8002766:	eef0 7a40 	vmov.f32	s15, s0
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <acceleration2_acquisition+0x8c>)
 800276c:	00a3      	lsls	r3, r4, #2
 800276e:	4413      	add	r3, r2
 8002770:	edc3 7a00 	vstr	s15, [r3]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}
 800277c:	20000098 	.word	0x20000098
 8002780:	200001a0 	.word	0x200001a0
 8002784:	200001c8 	.word	0x200001c8
 8002788:	200001f0 	.word	0x200001f0

0800278c <magnetometer_acquisition>:
/*I take the values of the magnetometer converted into the components on the 3 axes of the magnetic flux density vector*/
static void magnetometer_acquisition(stmdev_ctx_t *dev_ctx, int8_t i){
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
	memset(data_raw_magnetic.u8bit, 0x00, 3*sizeof(int16_t));
 8002798:	2206      	movs	r2, #6
 800279a:	2100      	movs	r1, #0
 800279c:	481b      	ldr	r0, [pc, #108]	; (800280c <magnetometer_acquisition+0x80>)
 800279e:	f005 fa63 	bl	8007c68 <memset>
	lsm303agr_magnetic_raw_get(dev_ctx, data_raw_magnetic.u8bit);
 80027a2:	491a      	ldr	r1, [pc, #104]	; (800280c <magnetometer_acquisition+0x80>)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe faf0 	bl	8000d8a <lsm303agr_magnetic_raw_get>
	coda_mg_x[i] = lsm303agr_from_lsb_to_mgauss( data_raw_magnetic.i16bit[0]);
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <magnetometer_acquisition+0x80>)
 80027ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b0:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe f913 	bl	80009e0 <lsm303agr_from_lsb_to_mgauss>
 80027ba:	eef0 7a40 	vmov.f32	s15, s0
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <magnetometer_acquisition+0x84>)
 80027c0:	00a3      	lsls	r3, r4, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	edc3 7a00 	vstr	s15, [r3]
	coda_mg_y[i] = lsm303agr_from_lsb_to_mgauss( data_raw_magnetic.i16bit[1]);
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <magnetometer_acquisition+0x80>)
 80027ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ce:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe f904 	bl	80009e0 <lsm303agr_from_lsb_to_mgauss>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <magnetometer_acquisition+0x88>)
 80027de:	00a3      	lsls	r3, r4, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	edc3 7a00 	vstr	s15, [r3]
	coda_mg_z[i] = lsm303agr_from_lsb_to_mgauss( data_raw_magnetic.i16bit[2]);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <magnetometer_acquisition+0x80>)
 80027e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027ec:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f8f5 	bl	80009e0 <lsm303agr_from_lsb_to_mgauss>
 80027f6:	eef0 7a40 	vmov.f32	s15, s0
 80027fa:	4a07      	ldr	r2, [pc, #28]	; (8002818 <magnetometer_acquisition+0x8c>)
 80027fc:	00a3      	lsls	r3, r4, #2
 80027fe:	4413      	add	r3, r2
 8002800:	edc3 7a00 	vstr	s15, [r3]

}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	200000a0 	.word	0x200000a0
 8002810:	20000218 	.word	0x20000218
 8002814:	20000224 	.word	0x20000224
 8002818:	20000230 	.word	0x20000230

0800281c <gyroscope_acquisition>:
/*I take the values of the gyroscope and converted into the components of the angular velocity vector on the 3 axes*/
static void gyroscope_acquisition(stmdev_ctx_t *dev_ctx, int8_t i){
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
	memset(data_raw_angular_rate.u8bit, 0x00, 3*sizeof(int16_t));
 8002828:	2206      	movs	r2, #6
 800282a:	2100      	movs	r1, #0
 800282c:	481b      	ldr	r0, [pc, #108]	; (800289c <gyroscope_acquisition+0x80>)
 800282e:	f005 fa1b 	bl	8007c68 <memset>
	lsm6dsl_angular_rate_raw_get(dev_ctx, data_raw_angular_rate.u8bit);
 8002832:	491a      	ldr	r1, [pc, #104]	; (800289c <gyroscope_acquisition+0x80>)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fc4a 	bl	80010ce <lsm6dsl_angular_rate_raw_get>
	coda_x_ang[i] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]);
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <gyroscope_acquisition+0x80>)
 800283c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002840:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fb5b 	bl	8000f00 <lsm6dsl_from_fs2000dps_to_mdps>
 800284a:	eef0 7a40 	vmov.f32	s15, s0
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <gyroscope_acquisition+0x84>)
 8002850:	00a3      	lsls	r3, r4, #2
 8002852:	4413      	add	r3, r2
 8002854:	edc3 7a00 	vstr	s15, [r3]
	coda_y_ang[i] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]);
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <gyroscope_acquisition+0x80>)
 800285a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800285e:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb4c 	bl	8000f00 <lsm6dsl_from_fs2000dps_to_mdps>
 8002868:	eef0 7a40 	vmov.f32	s15, s0
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <gyroscope_acquisition+0x88>)
 800286e:	00a3      	lsls	r3, r4, #2
 8002870:	4413      	add	r3, r2
 8002872:	edc3 7a00 	vstr	s15, [r3]
	coda_z_ang[i] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <gyroscope_acquisition+0x80>)
 8002878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800287c:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fb3d 	bl	8000f00 <lsm6dsl_from_fs2000dps_to_mdps>
 8002886:	eef0 7a40 	vmov.f32	s15, s0
 800288a:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <gyroscope_acquisition+0x8c>)
 800288c:	00a3      	lsls	r3, r4, #2
 800288e:	4413      	add	r3, r2
 8002890:	edc3 7a00 	vstr	s15, [r3]

}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	200000a8 	.word	0x200000a8
 80028a0:	200000b0 	.word	0x200000b0
 80028a4:	200000d8 	.word	0x200000d8
 80028a8:	20000100 	.word	0x20000100

080028ac <pressure_acquisition>:
/*I take the values of the magnetometer converted into a pressure value*/
static void pressure_acquisition(stmdev_ctx_t *dev_ctx, int8_t i){
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80028b8:	2204      	movs	r2, #4
 80028ba:	2100      	movs	r1, #0
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <pressure_acquisition+0x44>)
 80028be:	f005 f9d3 	bl	8007c68 <memset>
  lps22hb_pressure_raw_get(dev_ctx, data_raw_pressure.u8bit);
 80028c2:	490b      	ldr	r1, [pc, #44]	; (80028f0 <pressure_acquisition+0x44>)
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7fd ffdd 	bl	8000884 <lps22hb_pressure_raw_get>
  coda_bar[i] = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <pressure_acquisition+0x44>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd ff72 	bl	80007bc <lps22hb_from_lsb_to_hpa>
 80028d8:	eef0 7a40 	vmov.f32	s15, s0
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <pressure_acquisition+0x48>)
 80028de:	00a3      	lsls	r3, r4, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	edc3 7a00 	vstr	s15, [r3]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000094 	.word	0x20000094
 80028f4:	2000023c 	.word	0x2000023c

080028f8 <compute_mean>:

/*compute the mean*/
static void compute_mean(int8_t size, float *buffx, float *buffy, float *buffz, float *result){
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
	float tot_x=0;
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
	float tot_y=0;
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
	float tot_z=0;
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
	int8_t i=0;
 800291a:	2300      	movs	r3, #0
 800291c:	74fb      	strb	r3, [r7, #19]
	while(i<=size){
 800291e:	e02a      	b.n	8002976 <compute_mean+0x7e>
		tot_x = tot_x + buffx[i];
 8002920:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	4413      	add	r3, r2
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	edc7 7a07 	vstr	s15, [r7, #28]
		tot_y = tot_y + buffy[i];
 800293a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ed97 7a06 	vldr	s14, [r7, #24]
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	edc7 7a06 	vstr	s15, [r7, #24]
		tot_z = tot_z + buffz[i];
 8002954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4413      	add	r3, r2
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	ed97 7a05 	vldr	s14, [r7, #20]
 8002966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296a:	edc7 7a05 	vstr	s15, [r7, #20]
		i=i+1;
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	3301      	adds	r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	74fb      	strb	r3, [r7, #19]
	while(i<=size){
 8002976:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	429a      	cmp	r2, r3
 8002980:	ddce      	ble.n	8002920 <compute_mean+0x28>
	}
	result[0]=tot_x/size;
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800298e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	edc3 7a00 	vstr	s15, [r3]
	result[1]=tot_y/size;
 800299c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	3304      	adds	r3, #4
 80029ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b4:	edc3 7a00 	vstr	s15, [r3]
	result[2]=tot_z/size;
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	3308      	adds	r3, #8
 80029c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80029cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d0:	edc3 7a00 	vstr	s15, [r3]
}
 80029d4:	bf00      	nop
 80029d6:	3724      	adds	r7, #36	; 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <compute_mean_bar>:

/*compute the mean of the barometer*/
static void compute_mean_bar(int8_t size, float *buff, float result){
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
	float tot=0;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
	int8_t i=0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	74fb      	strb	r3, [r7, #19]
	while(i<=size){
 80029fa:	e010      	b.n	8002a1e <compute_mean_bar+0x3e>
		tot = tot + buff[i];
 80029fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4413      	add	r3, r2
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	edc7 7a05 	vstr	s15, [r7, #20]
		i=i+1;
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	74fb      	strb	r3, [r7, #19]
	while(i<=size){
 8002a1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dde8      	ble.n	80029fc <compute_mean_bar+0x1c>
	}
	result = tot/size;
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a36:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3e:	edc7 7a01 	vstr	s15, [r7, #4]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_ETH_MspInit+0x158>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f040 8096 	bne.w	8002bf4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	623b      	str	r3, [r7, #32]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aea:	6313      	str	r3, [r2, #48]	; 0x30
 8002aec:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002afe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a3a      	ldr	r2, [pc, #232]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b62:	6313      	str	r3, [r2, #48]	; 0x30
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_ETH_MspInit+0x15c>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b70:	2332      	movs	r3, #50	; 0x32
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b80:	230b      	movs	r3, #11
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b88:	4619      	mov	r1, r3
 8002b8a:	481e      	ldr	r0, [pc, #120]	; (8002c04 <HAL_ETH_MspInit+0x160>)
 8002b8c:	f001 f868 	bl	8003c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b90:	2386      	movs	r3, #134	; 0x86
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ba0:	230b      	movs	r3, #11
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <HAL_ETH_MspInit+0x164>)
 8002bac:	f001 f858 	bl	8003c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bc2:	230b      	movs	r3, #11
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480f      	ldr	r0, [pc, #60]	; (8002c0c <HAL_ETH_MspInit+0x168>)
 8002bce:	f001 f847 	bl	8003c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002bd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002be4:	230b      	movs	r3, #11
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	4619      	mov	r1, r3
 8002bee:	4808      	ldr	r0, [pc, #32]	; (8002c10 <HAL_ETH_MspInit+0x16c>)
 8002bf0:	f001 f836 	bl	8003c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3738      	adds	r7, #56	; 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40028000 	.word	0x40028000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40021800 	.word	0x40021800

08002c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_I2C_MspInit+0x7c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d128      	bne.n	8002c88 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <HAL_I2C_MspInit+0x80>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_I2C_MspInit+0x80>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_I2C_MspInit+0x80>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c54:	2312      	movs	r3, #18
 8002c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c60:	2304      	movs	r3, #4
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480b      	ldr	r0, [pc, #44]	; (8002c98 <HAL_I2C_MspInit+0x84>)
 8002c6c:	f000 fff8 	bl	8003c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_I2C_MspInit+0x80>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <HAL_I2C_MspInit+0x80>)
 8002c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_I2C_MspInit+0x80>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c88:	bf00      	nop
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40005400 	.word	0x40005400
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40020400 	.word	0x40020400

08002c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_TIM_Base_MspInit+0xe0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d114      	bne.n	8002cd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	201d      	movs	r0, #29
 8002ccc:	f000 fb25 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cd0:	201d      	movs	r0, #29
 8002cd2:	f000 fb3e 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002cd6:	e04c      	b.n	8002d72 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_TIM_Base_MspInit+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d114      	bne.n	8002d0c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	201e      	movs	r0, #30
 8002d00:	f000 fb0b 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d04:	201e      	movs	r0, #30
 8002d06:	f000 fb24 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002d0a:	e032      	b.n	8002d72 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <HAL_TIM_Base_MspInit+0xec>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d114      	bne.n	8002d40 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002d1c:	f043 0310 	orr.w	r3, r3, #16
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	2036      	movs	r0, #54	; 0x36
 8002d34:	f000 faf1 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d38:	2036      	movs	r0, #54	; 0x36
 8002d3a:	f000 fb0a 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002d3e:	e018      	b.n	8002d72 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_TIM_Base_MspInit+0xf0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d113      	bne.n	8002d72 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002d50:	f043 0320 	orr.w	r3, r3, #32
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_TIM_Base_MspInit+0xe4>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2037      	movs	r0, #55	; 0x37
 8002d68:	f000 fad7 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d6c:	2037      	movs	r0, #55	; 0x37
 8002d6e:	f000 faf0 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40001000 	.word	0x40001000
 8002d8c:	40001400 	.word	0x40001400

08002d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_UART_MspInit+0x7c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d128      	bne.n	8002e04 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_UART_MspInit+0x80>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_UART_MspInit+0x80>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_UART_MspInit+0x80>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_UART_MspInit+0x80>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_UART_MspInit+0x80>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_UART_MspInit+0x80>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002df4:	2307      	movs	r3, #7
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <HAL_UART_MspInit+0x84>)
 8002e00:	f000 ff2e 	bl	8003c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020c00 	.word	0x40020c00

08002e18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e38:	d141      	bne.n	8002ebe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2303      	movs	r3, #3
 8002e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e64:	230a      	movs	r3, #10
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4817      	ldr	r0, [pc, #92]	; (8002ecc <HAL_PCD_MspInit+0xb4>)
 8002e70:	f000 fef6 	bl	8003c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4810      	ldr	r0, [pc, #64]	; (8002ecc <HAL_PCD_MspInit+0xb4>)
 8002e8a:	f000 fee9 	bl	8003c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e98:	6353      	str	r3, [r2, #52]	; 0x34
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PCD_MspInit+0xb0>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <HardFault_Handler+0x4>

08002ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <MemManage_Handler+0x4>

08002eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <BusFault_Handler+0x4>

08002ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <UsageFault_Handler+0x4>

08002ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f24:	f000 f8dc 	bl	80030e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <TIM3_IRQHandler+0x10>)
 8002f32:	f003 faeb 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000c20 	.word	0x20000c20

08002f40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <TIM4_IRQHandler+0x10>)
 8002f46:	f003 fae1 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000710 	.word	0x20000710

08002f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <TIM6_DAC_IRQHandler+0x10>)
 8002f5a:	f003 fad7 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000c60 	.word	0x20000c60

08002f68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <TIM7_IRQHandler+0x10>)
 8002f6e:	f003 facd 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000ce8 	.word	0x20000ce8

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <_sbrk+0x5c>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <_sbrk+0x60>)
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_sbrk+0x64>)
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <_sbrk+0x68>)
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fac:	f004 fe32 	bl	8007c14 <__errno>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e009      	b.n	8002fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <_sbrk+0x64>)
 8002fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20080000 	.word	0x20080000
 8002fdc:	00000400 	.word	0x00000400
 8002fe0:	20000704 	.word	0x20000704
 8002fe4:	20000d30 	.word	0x20000d30

08002fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <SystemInit+0x28>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <SystemInit+0x28>)
 8002ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <SystemInit+0x28>)
 8002ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003002:	609a      	str	r2, [r3, #8]
#endif
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800304c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800301a:	e003      	b.n	8003024 <LoopCopyDataInit>

0800301c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800301e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003022:	3104      	adds	r1, #4

08003024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800302a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800302c:	d3f6      	bcc.n	800301c <CopyDataInit>
  ldr  r2, =_sbss
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003030:	e002      	b.n	8003038 <LoopFillZerobss>

08003032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003034:	f842 3b04 	str.w	r3, [r2], #4

08003038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800303a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800303c:	d3f9      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303e:	f7ff ffd3 	bl	8002fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003042:	f004 fded 	bl	8007c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003046:	f7fe f97f 	bl	8001348 <main>
  bx  lr    
 800304a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800304c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003050:	08008588 	.word	0x08008588
  ldr  r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003058:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800305c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003060:	20000d30 	.word	0x20000d30

08003064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC_IRQHandler>

08003066 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306a:	2003      	movs	r0, #3
 800306c:	f000 f94a 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003070:	2000      	movs	r0, #0
 8003072:	f000 f805 	bl	8003080 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003076:	f7ff fcf1 	bl	8002a5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x54>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_InitTick+0x58>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003096:	fbb3 f3f1 	udiv	r3, r3, r1
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f965 	bl	800336e <HAL_SYSTICK_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e00e      	b.n	80030cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d80a      	bhi.n	80030ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b4:	2200      	movs	r2, #0
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
 80030bc:	f000 f92d 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c0:	4a06      	ldr	r2, [pc, #24]	; (80030dc <HAL_InitTick+0x5c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000008 	.word	0x20000008
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x20>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_IncTick+0x24>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_IncTick+0x24>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000008 	.word	0x20000008
 8003104:	20000d28 	.word	0x20000d28

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_GetTick+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000d28 	.word	0x20000d28

08003120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff ffee 	bl	8003108 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d005      	beq.n	8003146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_Delay+0x40>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003146:	bf00      	nop
 8003148:	f7ff ffde 	bl	8003108 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d8f7      	bhi.n	8003148 <HAL_Delay+0x28>
  {
  }
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000008 	.word	0x20000008

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 800318e:	4313      	orrs	r3, r2
 8003190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003192:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	60d3      	str	r3, [r2, #12]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00
 80031a8:	05fa0000 	.word	0x05fa0000

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff29 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff3e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff31 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003398:	4ba9      	ldr	r3, [pc, #676]	; (8003640 <HAL_ETH_Init+0x2b8>)
 800339a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e183      	b.n	80036b6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fb6e 	bl	8002aa4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c8:	4b9e      	ldr	r3, [pc, #632]	; (8003644 <HAL_ETH_Init+0x2bc>)
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	4a9d      	ldr	r2, [pc, #628]	; (8003644 <HAL_ETH_Init+0x2bc>)
 80033ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d2:	6453      	str	r3, [r2, #68]	; 0x44
 80033d4:	4b9b      	ldr	r3, [pc, #620]	; (8003644 <HAL_ETH_Init+0x2bc>)
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033e0:	4b99      	ldr	r3, [pc, #612]	; (8003648 <HAL_ETH_Init+0x2c0>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a98      	ldr	r2, [pc, #608]	; (8003648 <HAL_ETH_Init+0x2c0>)
 80033e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033ea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033ec:	4b96      	ldr	r3, [pc, #600]	; (8003648 <HAL_ETH_Init+0x2c0>)
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4994      	ldr	r1, [pc, #592]	; (8003648 <HAL_ETH_Init+0x2c0>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003410:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003412:	f7ff fe79 	bl	8003108 <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003418:	e011      	b.n	800343e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800341a:	f7ff fe75 	bl	8003108 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003428:	d909      	bls.n	800343e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2203      	movs	r2, #3
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e13b      	b.n	80036b6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e4      	bne.n	800341a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f023 031c 	bic.w	r3, r3, #28
 800345e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003460:	f002 fba4 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8003464:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4a78      	ldr	r2, [pc, #480]	; (800364c <HAL_ETH_Init+0x2c4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d908      	bls.n	8003480 <HAL_ETH_Init+0xf8>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4a77      	ldr	r2, [pc, #476]	; (8003650 <HAL_ETH_Init+0x2c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d804      	bhi.n	8003480 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f043 0308 	orr.w	r3, r3, #8
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e027      	b.n	80034d0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4a73      	ldr	r2, [pc, #460]	; (8003650 <HAL_ETH_Init+0x2c8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d908      	bls.n	800349a <HAL_ETH_Init+0x112>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4a72      	ldr	r2, [pc, #456]	; (8003654 <HAL_ETH_Init+0x2cc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d804      	bhi.n	800349a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f043 030c 	orr.w	r3, r3, #12
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e01a      	b.n	80034d0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4a6d      	ldr	r2, [pc, #436]	; (8003654 <HAL_ETH_Init+0x2cc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d903      	bls.n	80034aa <HAL_ETH_Init+0x122>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4a6c      	ldr	r2, [pc, #432]	; (8003658 <HAL_ETH_Init+0x2d0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d911      	bls.n	80034ce <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4a6a      	ldr	r2, [pc, #424]	; (8003658 <HAL_ETH_Init+0x2d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d908      	bls.n	80034c4 <HAL_ETH_Init+0x13c>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_ETH_Init+0x2d4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d804      	bhi.n	80034c4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	e005      	b.n	80034d0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f043 0310 	orr.w	r3, r3, #16
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e000      	b.n	80034d0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80034ce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80034d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034dc:	2100      	movs	r1, #0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f956 	bl	8003790 <HAL_ETH_WritePHYRegister>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80034ee:	6939      	ldr	r1, [r7, #16]
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9b3 	bl	800385c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0d9      	b.n	80036b6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003502:	20ff      	movs	r0, #255	; 0xff
 8003504:	f7ff fe0c 	bl	8003120 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a7 	beq.w	8003660 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003512:	f7ff fdf9 	bl	8003108 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003518:	f107 030c 	add.w	r3, r7, #12
 800351c:	461a      	mov	r2, r3
 800351e:	2101      	movs	r1, #1
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8cd 	bl	80036c0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003526:	f7ff fdef 	bl	8003108 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d90f      	bls.n	8003558 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800353c:	6939      	ldr	r1, [r7, #16]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f98c 	bl	800385c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0ae      	b.n	80036b6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0da      	beq.n	8003518 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003566:	2100      	movs	r1, #0
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f911 	bl	8003790 <HAL_ETH_WritePHYRegister>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003578:	6939      	ldr	r1, [r7, #16]
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f96e 	bl	800385c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003588:	2301      	movs	r3, #1
 800358a:	e094      	b.n	80036b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800358c:	f7ff fdbc 	bl	8003108 <HAL_GetTick>
 8003590:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003592:	f107 030c 	add.w	r3, r7, #12
 8003596:	461a      	mov	r2, r3
 8003598:	2101      	movs	r1, #1
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f890 	bl	80036c0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80035a0:	f7ff fdb2 	bl	8003108 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d90f      	bls.n	80035d2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80035b6:	6939      	ldr	r1, [r7, #16]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f94f 	bl	800385c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e071      	b.n	80036b6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0da      	beq.n	8003592 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	461a      	mov	r2, r3
 80035e2:	211f      	movs	r1, #31
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f86b 	bl	80036c0 <HAL_ETH_ReadPHYRegister>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80035f4:	6939      	ldr	r1, [r7, #16]
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f930 	bl	800385c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003604:	2301      	movs	r3, #1
 8003606:	e056      	b.n	80036b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	e002      	b.n	8003622 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	e037      	b.n	80036a4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e032      	b.n	80036a4 <HAL_ETH_Init+0x31c>
 800363e:	bf00      	nop
 8003640:	03938700 	.word	0x03938700
 8003644:	40023800 	.word	0x40023800
 8003648:	40013800 	.word	0x40013800
 800364c:	01312cff 	.word	0x01312cff
 8003650:	02160ebf 	.word	0x02160ebf
 8003654:	039386ff 	.word	0x039386ff
 8003658:	05f5e0ff 	.word	0x05f5e0ff
 800365c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	08db      	lsrs	r3, r3, #3
 8003666:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003670:	4313      	orrs	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	2100      	movs	r1, #0
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f889 	bl	8003790 <HAL_ETH_WritePHYRegister>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003688:	6939      	ldr	r1, [r7, #16]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8e6 	bl	800385c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e00c      	b.n	80036b6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800369c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80036a0:	f7ff fd3e 	bl	8003120 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80036a4:	6939      	ldr	r1, [r7, #16]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8d8 	bl	800385c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop

080036c0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	460b      	mov	r3, r1
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b82      	cmp	r3, #130	; 0x82
 80036e0:	d101      	bne.n	80036e6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	e050      	b.n	8003788 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2282      	movs	r2, #130	; 0x82
 80036ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 031c 	and.w	r3, r3, #28
 80036fc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8a1b      	ldrh	r3, [r3, #16]
 8003702:	02db      	lsls	r3, r3, #11
 8003704:	b29b      	uxth	r3, r3
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	019b      	lsls	r3, r3, #6
 8003710:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 0302 	bic.w	r3, r3, #2
 8003720:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003732:	f7ff fce9 	bl	8003108 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003738:	e015      	b.n	8003766 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800373a:	f7ff fce5 	bl	8003108 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d309      	bcc.n	800375e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e014      	b.n	8003788 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e4      	bne.n	800373a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	460b      	mov	r3, r1
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b42      	cmp	r3, #66	; 0x42
 80037b0:	d101      	bne.n	80037b6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	e04e      	b.n	8003854 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2242      	movs	r2, #66	; 0x42
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 031c 	and.w	r3, r3, #28
 80037cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8a1b      	ldrh	r3, [r3, #16]
 80037d2:	02db      	lsls	r3, r3, #11
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80037dc:	897b      	ldrh	r3, [r7, #10]
 80037de:	019b      	lsls	r3, r3, #6
 80037e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800380c:	f7ff fc7c 	bl	8003108 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003812:	e015      	b.n	8003840 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003814:	f7ff fc78 	bl	8003108 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003822:	d309      	bcc.n	8003838 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e00d      	b.n	8003854 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e4      	bne.n	8003814 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b0b0      	sub	sp, #192	; 0xc0
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003878:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003880:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003886:	2300      	movs	r3, #0
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800388a:	2300      	movs	r3, #0
 800388c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80038a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	e001      	b.n	80038ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80038ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80038b8:	2300      	movs	r3, #0
 80038ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80038c8:	2340      	movs	r3, #64	; 0x40
 80038ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003930:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003934:	4bab      	ldr	r3, [pc, #684]	; (8003be4 <ETH_MACDMAConfig+0x388>)
 8003936:	4013      	ands	r3, r2
 8003938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800393c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800393e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003940:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003944:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003948:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800394e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003952:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003956:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800395c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800395e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003960:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003964:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003968:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800396c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800396e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003970:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003984:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003990:	2001      	movs	r0, #1
 8003992:	f7ff fbc5 	bl	8003120 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800399e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80039a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80039a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80039a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80039aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80039ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80039b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80039b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80039b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80039ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80039bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80039c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80039cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80039da:	2001      	movs	r0, #1
 80039dc:	f7ff fba0 	bl	8003120 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80039fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003a10:	4013      	ands	r3, r2
 8003a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003a20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003a26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003a2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003a32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003a34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003a38:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003a3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f7ff fb61 	bl	8003120 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003a68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003a6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7ff fb4c 	bl	8003120 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003aa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003aa4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003ada:	2300      	movs	r3, #0
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f241 0318 	movw	r3, #4120	; 0x1018
 8003ae6:	4413      	add	r3, r2
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003aee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <ETH_MACDMAConfig+0x38c>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003afa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003afc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003afe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003b00:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003b02:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003b04:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003b06:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003b08:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003b0a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003b0c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003b0e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003b10:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003b12:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003b16:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003b1a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b2e:	4413      	add	r3, r2
 8003b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b34:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b3e:	4413      	add	r3, r2
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b46:	2001      	movs	r0, #1
 8003b48:	f7ff faea 	bl	8003120 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b54:	4413      	add	r3, r2
 8003b56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b5a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b60:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003b64:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003b68:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003b6c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b70:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003b72:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003b76:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b84:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b94:	2001      	movs	r0, #1
 8003b96:	f7ff fac3 	bl	8003120 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ba6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d10d      	bne.n	8003bcc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	f241 031c 	movw	r3, #4124	; 0x101c
 8003bb8:	4413      	add	r3, r2
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6811      	ldr	r1, [r2, #0]
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <ETH_MACDMAConfig+0x390>)
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	f241 031c 	movw	r3, #4124	; 0x101c
 8003bc8:	440b      	add	r3, r1
 8003bca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f80b 	bl	8003bf0 <ETH_MACAddressConfig>
}
 8003bda:	bf00      	nop
 8003bdc:	37c0      	adds	r7, #192	; 0xc0
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	ff20810f 	.word	0xff20810f
 8003be8:	f8de3f23 	.word	0xf8de3f23
 8003bec:	00010040 	.word	0x00010040

08003bf0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3305      	adds	r3, #5
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	3204      	adds	r2, #4
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <ETH_MACAddressConfig+0x68>)
 8003c12:	4413      	add	r3, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3303      	adds	r3, #3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	061a      	lsls	r2, r3, #24
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3302      	adds	r3, #2
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	4313      	orrs	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	7812      	ldrb	r2, [r2, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <ETH_MACAddressConfig+0x6c>)
 8003c42:	4413      	add	r3, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40028040 	.word	0x40028040
 8003c5c:	40028044 	.word	0x40028044

08003c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e175      	b.n	8003f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8164 	bne.w	8003f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d00b      	beq.n	8003cbe <HAL_GPIO_Init+0x5e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d007      	beq.n	8003cbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cb2:	2b11      	cmp	r3, #17
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b12      	cmp	r3, #18
 8003cbc:	d130      	bne.n	8003d20 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	2203      	movs	r2, #3
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 0201 	and.w	r2, r3, #1
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x100>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b12      	cmp	r3, #18
 8003d5e:	d123      	bne.n	8003da8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3208      	adds	r2, #8
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80be 	beq.w	8003f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	4b65      	ldr	r3, [pc, #404]	; (8003f80 <HAL_GPIO_Init+0x320>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	4a64      	ldr	r2, [pc, #400]	; (8003f80 <HAL_GPIO_Init+0x320>)
 8003df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df4:	6453      	str	r3, [r2, #68]	; 0x44
 8003df6:	4b62      	ldr	r3, [pc, #392]	; (8003f80 <HAL_GPIO_Init+0x320>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e02:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <HAL_GPIO_Init+0x324>)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a57      	ldr	r2, [pc, #348]	; (8003f88 <HAL_GPIO_Init+0x328>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d037      	beq.n	8003e9e <HAL_GPIO_Init+0x23e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a56      	ldr	r2, [pc, #344]	; (8003f8c <HAL_GPIO_Init+0x32c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d031      	beq.n	8003e9a <HAL_GPIO_Init+0x23a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a55      	ldr	r2, [pc, #340]	; (8003f90 <HAL_GPIO_Init+0x330>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02b      	beq.n	8003e96 <HAL_GPIO_Init+0x236>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a54      	ldr	r2, [pc, #336]	; (8003f94 <HAL_GPIO_Init+0x334>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d025      	beq.n	8003e92 <HAL_GPIO_Init+0x232>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a53      	ldr	r2, [pc, #332]	; (8003f98 <HAL_GPIO_Init+0x338>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <HAL_GPIO_Init+0x22e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_GPIO_Init+0x33c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d019      	beq.n	8003e8a <HAL_GPIO_Init+0x22a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a51      	ldr	r2, [pc, #324]	; (8003fa0 <HAL_GPIO_Init+0x340>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x226>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a50      	ldr	r2, [pc, #320]	; (8003fa4 <HAL_GPIO_Init+0x344>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x222>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4f      	ldr	r2, [pc, #316]	; (8003fa8 <HAL_GPIO_Init+0x348>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x21e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4e      	ldr	r2, [pc, #312]	; (8003fac <HAL_GPIO_Init+0x34c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x21a>
 8003e76:	2309      	movs	r3, #9
 8003e78:	e012      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e7a:	230a      	movs	r3, #10
 8003e7c:	e010      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	e00e      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e82:	2307      	movs	r3, #7
 8003e84:	e00c      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e86:	2306      	movs	r3, #6
 8003e88:	e00a      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	e008      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e004      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x240>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	f002 0203 	and.w	r2, r2, #3
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003eb0:	4934      	ldr	r1, [pc, #208]	; (8003f84 <HAL_GPIO_Init+0x324>)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ebe:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee2:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ee8:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f0c:	4a28      	ldr	r2, [pc, #160]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f12:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f36:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f3c:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <HAL_GPIO_Init+0x350>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	f67f ae86 	bls.w	8003c80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	3724      	adds	r7, #36	; 0x24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40021400 	.word	0x40021400
 8003fa0:	40021800 	.word	0x40021800
 8003fa4:	40021c00 	.word	0x40021c00
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	40022400 	.word	0x40022400
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fc4:	787b      	ldrb	r3, [r7, #1]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fd0:	e003      	b.n	8003fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	041a      	lsls	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e07f      	b.n	80040fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fe fe00 	bl	8002c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e006      	b.n	8004070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800406e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d104      	bne.n	8004082 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_I2C_Init+0x11c>)
 800408e:	430b      	orrs	r3, r1
 8004090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	ea42 0103 	orr.w	r1, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	021a      	lsls	r2, r3, #8
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69d9      	ldr	r1, [r3, #28]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	02008000 	.word	0x02008000

08004108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	f040 80da 	bne.w	80042de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_I2C_Master_Transmit+0x30>
 8004134:	2302      	movs	r3, #2
 8004136:	e0d3      	b.n	80042e0 <HAL_I2C_Master_Transmit+0x1d8>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004140:	f7fe ffe2 	bl	8003108 <HAL_GetTick>
 8004144:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2319      	movs	r3, #25
 800414c:	2201      	movs	r2, #1
 800414e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fcbc 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0be      	b.n	80042e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2221      	movs	r2, #33	; 0x21
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2210      	movs	r2, #16
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	893a      	ldrh	r2, [r7, #8]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2bff      	cmp	r3, #255	; 0xff
 8004192:	d90e      	bls.n	80041b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	4b51      	ldr	r3, [pc, #324]	; (80042e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fe1e 	bl	8004dec <I2C_TransferConfig>
 80041b0:	e06c      	b.n	800428c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	8979      	ldrh	r1, [r7, #10]
 80041c4:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fe0d 	bl	8004dec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80041d2:	e05b      	b.n	800428c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	6a39      	ldr	r1, [r7, #32]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fcb9 	bl	8004b50 <I2C_WaitOnTXISFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e07b      	b.n	80042e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d034      	beq.n	800428c <HAL_I2C_Master_Transmit+0x184>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d130      	bne.n	800428c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2200      	movs	r2, #0
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fc4b 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e04d      	b.n	80042e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2bff      	cmp	r3, #255	; 0xff
 800424c:	d90e      	bls.n	800426c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	b2da      	uxtb	r2, r3
 800425a:	8979      	ldrh	r1, [r7, #10]
 800425c:	2300      	movs	r3, #0
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fdc1 	bl	8004dec <I2C_TransferConfig>
 800426a:	e00f      	b.n	800428c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	b2da      	uxtb	r2, r3
 800427c:	8979      	ldrh	r1, [r7, #10]
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fdb0 	bl	8004dec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d19e      	bne.n	80041d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fc98 	bl	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e01a      	b.n	80042e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2220      	movs	r2, #32
 80042b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_I2C_Master_Transmit+0x1e4>)
 80042be:	400b      	ands	r3, r1
 80042c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	80002000 	.word	0x80002000
 80042ec:	fe00e800 	.word	0xfe00e800

080042f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	461a      	mov	r2, r3
 80042fc:	460b      	mov	r3, r1
 80042fe:	817b      	strh	r3, [r7, #10]
 8004300:	4613      	mov	r3, r2
 8004302:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b20      	cmp	r3, #32
 800430e:	f040 80db 	bne.w	80044c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_I2C_Master_Receive+0x30>
 800431c:	2302      	movs	r3, #2
 800431e:	e0d4      	b.n	80044ca <HAL_I2C_Master_Receive+0x1da>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004328:	f7fe feee 	bl	8003108 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2319      	movs	r3, #25
 8004334:	2201      	movs	r2, #1
 8004336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fbc8 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0bf      	b.n	80044ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2222      	movs	r2, #34	; 0x22
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2210      	movs	r2, #16
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	893a      	ldrh	r2, [r7, #8]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2bff      	cmp	r3, #255	; 0xff
 800437a:	d90e      	bls.n	800439a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	b2da      	uxtb	r2, r3
 8004388:	8979      	ldrh	r1, [r7, #10]
 800438a:	4b52      	ldr	r3, [pc, #328]	; (80044d4 <HAL_I2C_Master_Receive+0x1e4>)
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fd2a 	bl	8004dec <I2C_TransferConfig>
 8004398:	e06d      	b.n	8004476 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	8979      	ldrh	r1, [r7, #10]
 80043ac:	4b49      	ldr	r3, [pc, #292]	; (80044d4 <HAL_I2C_Master_Receive+0x1e4>)
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fd19 	bl	8004dec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80043ba:	e05c      	b.n	8004476 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	6a39      	ldr	r1, [r7, #32]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fc41 	bl	8004c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e07c      	b.n	80044ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d034      	beq.n	8004476 <HAL_I2C_Master_Receive+0x186>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d130      	bne.n	8004476 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	2200      	movs	r2, #0
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb56 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e04d      	b.n	80044ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	2bff      	cmp	r3, #255	; 0xff
 8004436:	d90e      	bls.n	8004456 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	22ff      	movs	r2, #255	; 0xff
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	b2da      	uxtb	r2, r3
 8004444:	8979      	ldrh	r1, [r7, #10]
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fccc 	bl	8004dec <I2C_TransferConfig>
 8004454:	e00f      	b.n	8004476 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	b2da      	uxtb	r2, r3
 8004466:	8979      	ldrh	r1, [r7, #10]
 8004468:	2300      	movs	r3, #0
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fcbb 	bl	8004dec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d19d      	bne.n	80043bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	6a39      	ldr	r1, [r7, #32]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fba3 	bl	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e01a      	b.n	80044ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2220      	movs	r2, #32
 800449a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_I2C_Master_Receive+0x1e8>)
 80044a8:	400b      	ands	r3, r1
 80044aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	80002400 	.word	0x80002400
 80044d8:	fe00e800 	.word	0xfe00e800

080044dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b20      	cmp	r3, #32
 8004500:	f040 80f9 	bne.w	80046f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_I2C_Mem_Write+0x34>
 800450a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0ed      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_I2C_Mem_Write+0x4e>
 8004526:	2302      	movs	r3, #2
 8004528:	e0e6      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004532:	f7fe fde9 	bl	8003108 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2319      	movs	r3, #25
 800453e:	2201      	movs	r2, #1
 8004540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fac3 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0d1      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2221      	movs	r2, #33	; 0x21
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800457c:	88f8      	ldrh	r0, [r7, #6]
 800457e:	893a      	ldrh	r2, [r7, #8]
 8004580:	8979      	ldrh	r1, [r7, #10]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4603      	mov	r3, r0
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f9d3 	bl	8004938 <I2C_RequestMemoryWrite>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0a9      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	d90e      	bls.n	80045cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	8979      	ldrh	r1, [r7, #10]
 80045bc:	2300      	movs	r3, #0
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fc11 	bl	8004dec <I2C_TransferConfig>
 80045ca:	e00f      	b.n	80045ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	8979      	ldrh	r1, [r7, #10]
 80045de:	2300      	movs	r3, #0
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fc00 	bl	8004dec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 faad 	bl	8004b50 <I2C_WaitOnTXISFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e07b      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d034      	beq.n	80046a4 <HAL_I2C_Mem_Write+0x1c8>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d130      	bne.n	80046a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fa3f 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e04d      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2bff      	cmp	r3, #255	; 0xff
 8004664:	d90e      	bls.n	8004684 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	b2da      	uxtb	r2, r3
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fbb5 	bl	8004dec <I2C_TransferConfig>
 8004682:	e00f      	b.n	80046a4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	b2da      	uxtb	r2, r3
 8004694:	8979      	ldrh	r1, [r7, #10]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fba4 	bl	8004dec <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d19e      	bne.n	80045ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa8c 	bl	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e01a      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2220      	movs	r2, #32
 80046c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_I2C_Mem_Write+0x224>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	fe00e800 	.word	0xfe00e800

08004704 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	817b      	strh	r3, [r7, #10]
 8004716:	460b      	mov	r3, r1
 8004718:	813b      	strh	r3, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b20      	cmp	r3, #32
 8004728:	f040 80fd 	bne.w	8004926 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_I2C_Mem_Read+0x34>
 8004732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0f1      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_I2C_Mem_Read+0x4e>
 800474e:	2302      	movs	r3, #2
 8004750:	e0ea      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800475a:	f7fe fcd5 	bl	8003108 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2319      	movs	r3, #25
 8004766:	2201      	movs	r2, #1
 8004768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f9af 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0d5      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2222      	movs	r2, #34	; 0x22
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a3a      	ldr	r2, [r7, #32]
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a4:	88f8      	ldrh	r0, [r7, #6]
 80047a6:	893a      	ldrh	r2, [r7, #8]
 80047a8:	8979      	ldrh	r1, [r7, #10]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	4603      	mov	r3, r0
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f913 	bl	80049e0 <I2C_RequestMemoryRead>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0ad      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2bff      	cmp	r3, #255	; 0xff
 80047d4:	d90e      	bls.n	80047f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	8979      	ldrh	r1, [r7, #10]
 80047e4:	4b52      	ldr	r3, [pc, #328]	; (8004930 <HAL_I2C_Mem_Read+0x22c>)
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fafd 	bl	8004dec <I2C_TransferConfig>
 80047f2:	e00f      	b.n	8004814 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	b2da      	uxtb	r2, r3
 8004804:	8979      	ldrh	r1, [r7, #10]
 8004806:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_I2C_Mem_Read+0x22c>)
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 faec 	bl	8004dec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	2200      	movs	r2, #0
 800481c:	2104      	movs	r1, #4
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f956 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e07c      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d034      	beq.n	80048d4 <HAL_I2C_Mem_Read+0x1d0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d130      	bne.n	80048d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	; 0x80
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f927 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e04d      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2bff      	cmp	r3, #255	; 0xff
 8004894:	d90e      	bls.n	80048b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	22ff      	movs	r2, #255	; 0xff
 800489a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	8979      	ldrh	r1, [r7, #10]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fa9d 	bl	8004dec <I2C_TransferConfig>
 80048b2:	e00f      	b.n	80048d4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	8979      	ldrh	r1, [r7, #10]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fa8c 	bl	8004dec <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d19a      	bne.n	8004814 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f974 	bl	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e01a      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2220      	movs	r2, #32
 80048f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_I2C_Mem_Read+0x230>)
 8004906:	400b      	ands	r3, r1
 8004908:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	80002400 	.word	0x80002400
 8004934:	fe00e800 	.word	0xfe00e800

08004938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	b2da      	uxtb	r2, r3
 8004956:	8979      	ldrh	r1, [r7, #10]
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <I2C_RequestMemoryWrite+0xa4>)
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fa43 	bl	8004dec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f8f0 	bl	8004b50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e02c      	b.n	80049d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004980:	893b      	ldrh	r3, [r7, #8]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	629a      	str	r2, [r3, #40]	; 0x28
 800498a:	e015      	b.n	80049b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800498c:	893b      	ldrh	r3, [r7, #8]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	b29b      	uxth	r3, r3
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	69b9      	ldr	r1, [r7, #24]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f8d6 	bl	8004b50 <I2C_WaitOnTXISFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e012      	b.n	80049d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2200      	movs	r2, #0
 80049c0:	2180      	movs	r1, #128	; 0x80
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f884 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	80002000 	.word	0x80002000

080049e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	461a      	mov	r2, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	817b      	strh	r3, [r7, #10]
 80049f2:	460b      	mov	r3, r1
 80049f4:	813b      	strh	r3, [r7, #8]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	8979      	ldrh	r1, [r7, #10]
 8004a00:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <I2C_RequestMemoryRead+0xa4>)
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f9f0 	bl	8004dec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f89d 	bl	8004b50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e02c      	b.n	8004a7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a26:	893b      	ldrh	r3, [r7, #8]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a30:	e015      	b.n	8004a5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a32:	893b      	ldrh	r3, [r7, #8]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	69b9      	ldr	r1, [r7, #24]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f883 	bl	8004b50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e012      	b.n	8004a7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2140      	movs	r1, #64	; 0x40
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f831 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	80002000 	.word	0x80002000

08004a88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d103      	bne.n	8004aa6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d007      	beq.n	8004ac4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	619a      	str	r2, [r3, #24]
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae0:	e022      	b.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d01e      	beq.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe fb0d 	bl	8003108 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d113      	bne.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e00f      	b.n	8004b48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4013      	ands	r3, r2
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d0cd      	beq.n	8004ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b5c:	e02c      	b.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f8dc 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e02a      	b.n	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d01e      	beq.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7a:	f7fe fac5 	bl	8003108 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d302      	bcc.n	8004b90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d113      	bne.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e007      	b.n	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d1cb      	bne.n	8004b5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bdc:	e028      	b.n	8004c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f89c 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e026      	b.n	8004c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fe fa89 	bl	8003108 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d113      	bne.n	8004c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e007      	b.n	8004c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d1cf      	bne.n	8004bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c54:	e055      	b.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f860 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e053      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d129      	bne.n	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d105      	bne.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e03f      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2220      	movs	r2, #32
 8004c98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e022      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fe fa1c 	bl	8003108 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10f      	bne.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e007      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d1a2      	bne.n	8004c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	fe00e800 	.word	0xfe00e800

08004d20 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d151      	bne.n	8004dde <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d3a:	e022      	b.n	8004d82 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d01e      	beq.n	8004d82 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7fe f9e0 	bl	8003108 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_IsAcknowledgeFailed+0x3a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d113      	bne.n	8004d82 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e02e      	b.n	8004de0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d1d5      	bne.n	8004d3c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2210      	movs	r2, #16
 8004d96:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff fe71 	bl	8004a88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0204 	orr.w	r2, r3, #4
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	fe00e800 	.word	0xfe00e800

08004dec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	817b      	strh	r3, [r7, #10]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	0d5b      	lsrs	r3, r3, #21
 8004e08:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <I2C_TransferConfig+0x58>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	43db      	mvns	r3, r3
 8004e12:	ea02 0103 	and.w	r1, r2, r3
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e1c:	7a7b      	ldrb	r3, [r7, #9]
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	03ff63ff 	.word	0x03ff63ff

08004e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d138      	bne.n	8004ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e032      	b.n	8004ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d139      	bne.n	8004f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e033      	b.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2224      	movs	r2, #36	; 0x24
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f78:	b08f      	sub	sp, #60	; 0x3c
 8004f7a:	af0a      	add	r7, sp, #40	; 0x28
 8004f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e116      	b.n	80051b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fd ff38 	bl	8002e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2203      	movs	r2, #3
 8004fac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f002 fbcc 	bl	8007764 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	687e      	ldr	r6, [r7, #4]
 8004fd4:	466d      	mov	r5, sp
 8004fd6:	f106 0410 	add.w	r4, r6, #16
 8004fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fea:	1d33      	adds	r3, r6, #4
 8004fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fee:	6838      	ldr	r0, [r7, #0]
 8004ff0:	f002 fb60 	bl	80076b4 <USB_CoreInit>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0d7      	b.n	80051b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f002 fbba 	bl	8007786 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e04a      	b.n	80050ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	333d      	adds	r3, #61	; 0x3d
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	333c      	adds	r3, #60	; 0x3c
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	b298      	uxth	r0, r3
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3342      	adds	r3, #66	; 0x42
 8005054:	4602      	mov	r2, r0
 8005056:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	333f      	adds	r3, #63	; 0x3f
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3344      	adds	r3, #68	; 0x44
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3348      	adds	r3, #72	; 0x48
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005094:	7bfa      	ldrb	r2, [r7, #15]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	3350      	adds	r3, #80	; 0x50
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	3301      	adds	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3af      	bcc.n	8005018 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
 80050bc:	e044      	b.n	8005148 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050d4:	7bfa      	ldrb	r2, [r7, #15]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	3301      	adds	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d3b5      	bcc.n	80050be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	687e      	ldr	r6, [r7, #4]
 800515a:	466d      	mov	r5, sp
 800515c:	f106 0410 	add.w	r4, r6, #16
 8005160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800516c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005170:	1d33      	adds	r3, r6, #4
 8005172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005174:	6838      	ldr	r0, [r7, #0]
 8005176:	f002 fb31 	bl	80077dc <USB_DevInit>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e014      	b.n	80051b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d102      	bne.n	80051aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f80b 	bl	80051c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f002 fce3 	bl	8007b7a <USB_DevDisconnect>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080051c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_PCDEx_ActivateLPM+0x44>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	10000003 	.word	0x10000003

08005208 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a04      	ldr	r2, [pc, #16]	; (8005224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005216:	6013      	str	r3, [r2, #0]
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40007000 	.word	0x40007000

08005228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800524a:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005254:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005256:	f7fd ff57 	bl	8003108 <HAL_GetTick>
 800525a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800525c:	e009      	b.n	8005272 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800525e:	f7fd ff53 	bl	8003108 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526c:	d901      	bls.n	8005272 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e022      	b.n	80052b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005272:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527e:	d1ee      	bne.n	800525e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005280:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800528c:	f7fd ff3c 	bl	8003108 <HAL_GetTick>
 8005290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005292:	e009      	b.n	80052a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005294:	f7fd ff38 	bl	8003108 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a2:	d901      	bls.n	80052a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e007      	b.n	80052b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b4:	d1ee      	bne.n	8005294 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40007000 	.word	0x40007000

080052c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052d0:	2300      	movs	r3, #0
 80052d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e29b      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8087 	beq.w	80053fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052ec:	4b96      	ldr	r3, [pc, #600]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d00c      	beq.n	8005312 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f8:	4b93      	ldr	r3, [pc, #588]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b08      	cmp	r3, #8
 8005302:	d112      	bne.n	800532a <HAL_RCC_OscConfig+0x62>
 8005304:	4b90      	ldr	r3, [pc, #576]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005310:	d10b      	bne.n	800532a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005312:	4b8d      	ldr	r3, [pc, #564]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d06c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x130>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d168      	bne.n	80053f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e275      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x7a>
 8005334:	4b84      	ldr	r3, [pc, #528]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a83      	ldr	r2, [pc, #524]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800533a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e02e      	b.n	80053a0 <HAL_RCC_OscConfig+0xd8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x9c>
 800534a:	4b7f      	ldr	r3, [pc, #508]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7e      	ldr	r2, [pc, #504]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b7c      	ldr	r3, [pc, #496]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7b      	ldr	r2, [pc, #492]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800535c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e01d      	b.n	80053a0 <HAL_RCC_OscConfig+0xd8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0xc0>
 800536e:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a75      	ldr	r2, [pc, #468]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b73      	ldr	r3, [pc, #460]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a72      	ldr	r2, [pc, #456]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xd8>
 8005388:	4b6f      	ldr	r3, [pc, #444]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6e      	ldr	r2, [pc, #440]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b6c      	ldr	r3, [pc, #432]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a6b      	ldr	r2, [pc, #428]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fd feae 	bl	8003108 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd feaa 	bl	8003108 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e229      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b61      	ldr	r3, [pc, #388]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0xe8>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd fe9a 	bl	8003108 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fe96 	bl	8003108 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e215      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	4b57      	ldr	r3, [pc, #348]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x110>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d069      	beq.n	80054da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005406:	4b50      	ldr	r3, [pc, #320]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b4d      	ldr	r3, [pc, #308]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x190>
 800541e:	4b4a      	ldr	r3, [pc, #296]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	4b47      	ldr	r3, [pc, #284]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x17a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1e9      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b41      	ldr	r3, [pc, #260]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	493d      	ldr	r1, [pc, #244]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	e040      	b.n	80054da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d023      	beq.n	80054a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005460:	4b39      	ldr	r3, [pc, #228]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a38      	ldr	r2, [pc, #224]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd fe4c 	bl	8003108 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005474:	f7fd fe48 	bl	8003108 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1c7      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	4b30      	ldr	r3, [pc, #192]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005492:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4929      	ldr	r1, [pc, #164]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	e018      	b.n	80054da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a8:	4b27      	ldr	r3, [pc, #156]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fd fe28 	bl	8003108 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054bc:	f7fd fe24 	bl	8003108 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1a3      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d038      	beq.n	8005558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d019      	beq.n	8005522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ee:	4b16      	ldr	r3, [pc, #88]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80054f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fd fe05 	bl	8003108 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005502:	f7fd fe01 	bl	8003108 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e180      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x23a>
 8005520:	e01a      	b.n	8005558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	4a08      	ldr	r2, [pc, #32]	; (8005548 <HAL_RCC_OscConfig+0x280>)
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552e:	f7fd fdeb 	bl	8003108 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005534:	e00a      	b.n	800554c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005536:	f7fd fde7 	bl	8003108 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d903      	bls.n	800554c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e166      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
 8005548:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	4b92      	ldr	r3, [pc, #584]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800554e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ee      	bne.n	8005536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a4 	beq.w	80056ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005566:	4b8c      	ldr	r3, [pc, #560]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10d      	bne.n	800558e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	4a88      	ldr	r2, [pc, #544]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6413      	str	r3, [r2, #64]	; 0x40
 800557e:	4b86      	ldr	r3, [pc, #536]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558e:	4b83      	ldr	r3, [pc, #524]	; (800579c <HAL_RCC_OscConfig+0x4d4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d118      	bne.n	80055cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800559a:	4b80      	ldr	r3, [pc, #512]	; (800579c <HAL_RCC_OscConfig+0x4d4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a7f      	ldr	r2, [pc, #508]	; (800579c <HAL_RCC_OscConfig+0x4d4>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a6:	f7fd fdaf 	bl	8003108 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fd fdab 	bl	8003108 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b64      	cmp	r3, #100	; 0x64
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e12a      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c0:	4b76      	ldr	r3, [pc, #472]	; (800579c <HAL_RCC_OscConfig+0x4d4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d106      	bne.n	80055e2 <HAL_RCC_OscConfig+0x31a>
 80055d4:	4b70      	ldr	r3, [pc, #448]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a6f      	ldr	r2, [pc, #444]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
 80055e0:	e02d      	b.n	800563e <HAL_RCC_OscConfig+0x376>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10c      	bne.n	8005604 <HAL_RCC_OscConfig+0x33c>
 80055ea:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a6a      	ldr	r2, [pc, #424]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
 80055f6:	4b68      	ldr	r3, [pc, #416]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4a67      	ldr	r2, [pc, #412]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	6713      	str	r3, [r2, #112]	; 0x70
 8005602:	e01c      	b.n	800563e <HAL_RCC_OscConfig+0x376>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b05      	cmp	r3, #5
 800560a:	d10c      	bne.n	8005626 <HAL_RCC_OscConfig+0x35e>
 800560c:	4b62      	ldr	r3, [pc, #392]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	4a61      	ldr	r2, [pc, #388]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005612:	f043 0304 	orr.w	r3, r3, #4
 8005616:	6713      	str	r3, [r2, #112]	; 0x70
 8005618:	4b5f      	ldr	r3, [pc, #380]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561c:	4a5e      	ldr	r2, [pc, #376]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6713      	str	r3, [r2, #112]	; 0x70
 8005624:	e00b      	b.n	800563e <HAL_RCC_OscConfig+0x376>
 8005626:	4b5c      	ldr	r3, [pc, #368]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	4a5b      	ldr	r2, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	6713      	str	r3, [r2, #112]	; 0x70
 8005632:	4b59      	ldr	r3, [pc, #356]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	4a58      	ldr	r2, [pc, #352]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005638:	f023 0304 	bic.w	r3, r3, #4
 800563c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d015      	beq.n	8005672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005646:	f7fd fd5f 	bl	8003108 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	e00a      	b.n	8005664 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564e:	f7fd fd5b 	bl	8003108 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e0d8      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005664:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ee      	beq.n	800564e <HAL_RCC_OscConfig+0x386>
 8005670:	e014      	b.n	800569c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005672:	f7fd fd49 	bl	8003108 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005678:	e00a      	b.n	8005690 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd fd45 	bl	8003108 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	; 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0c2      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005690:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ee      	bne.n	800567a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d105      	bne.n	80056ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a2:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80056a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80ae 	beq.w	8005814 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056b8:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d06d      	beq.n	80057a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d14b      	bne.n	8005764 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056cc:	4b32      	ldr	r3, [pc, #200]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a31      	ldr	r2, [pc, #196]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80056d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd fd16 	bl	8003108 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd fd12 	bl	8003108 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e091      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	071b      	lsls	r3, r3, #28
 800572a:	491b      	ldr	r1, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005730:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800573a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fd fce4 	bl	8003108 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005744:	f7fd fce0 	bl	8003108 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e05f      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x47c>
 8005762:	e057      	b.n	8005814 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800576a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fd fcca 	bl	8003108 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005778:	f7fd fcc6 	bl	8003108 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e045      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_RCC_OscConfig+0x4d0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x4b0>
 8005796:	e03d      	b.n	8005814 <HAL_RCC_OscConfig+0x54c>
 8005798:	40023800 	.word	0x40023800
 800579c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057a0:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_RCC_OscConfig+0x558>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d030      	beq.n	8005810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d129      	bne.n	8005810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d122      	bne.n	8005810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057d0:	4013      	ands	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057d8:	4293      	cmp	r3, r2
 80057da:	d119      	bne.n	8005810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	3b01      	subs	r3, #1
 80057ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d10f      	bne.n	8005810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d001      	beq.n	8005814 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800

08005824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0d0      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800583c:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d910      	bls.n	800586c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 020f 	bic.w	r2, r3, #15
 8005852:	4965      	ldr	r1, [pc, #404]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0b8      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d020      	beq.n	80058ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005884:	4b59      	ldr	r3, [pc, #356]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a58      	ldr	r2, [pc, #352]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 800588a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800588e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800589c:	4b53      	ldr	r3, [pc, #332]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a52      	ldr	r2, [pc, #328]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80058a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a8:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	494d      	ldr	r1, [pc, #308]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d040      	beq.n	8005948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	4b47      	ldr	r3, [pc, #284]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e07f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e073      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f6:	4b3d      	ldr	r3, [pc, #244]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e06b      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005906:	4b39      	ldr	r3, [pc, #228]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4936      	ldr	r1, [pc, #216]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005918:	f7fd fbf6 	bl	8003108 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fd fbf2 	bl	8003108 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e053      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 020c 	and.w	r2, r3, #12
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	429a      	cmp	r2, r3
 8005946:	d1eb      	bne.n	8005920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d210      	bcs.n	8005978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f023 020f 	bic.w	r2, r3, #15
 800595e:	4922      	ldr	r1, [pc, #136]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e032      	b.n	80059de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4916      	ldr	r1, [pc, #88]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	490e      	ldr	r1, [pc, #56]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059b6:	f000 f821 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 80059ba:	4601      	mov	r1, r0
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_RCC_ClockConfig+0x1c8>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <HAL_RCC_ClockConfig+0x1cc>)
 80059c8:	5cd3      	ldrb	r3, [r2, r3]
 80059ca:	fa21 f303 	lsr.w	r3, r1, r3
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <HAL_RCC_ClockConfig+0x1d0>)
 80059d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1d4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fb52 	bl	8003080 <HAL_InitTick>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40023c00 	.word	0x40023c00
 80059ec:	40023800 	.word	0x40023800
 80059f0:	0800852c 	.word	0x0800852c
 80059f4:	20000000 	.word	0x20000000
 80059f8:	20000004 	.word	0x20000004

080059fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a12:	4b63      	ldr	r3, [pc, #396]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d007      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x32>
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d008      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x38>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 80b4 	bne.w	8005b90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b5e      	ldr	r3, [pc, #376]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a2a:	60bb      	str	r3, [r7, #8]
      break;
 8005a2c:	e0b3      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a2e:	4b5e      	ldr	r3, [pc, #376]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a30:	60bb      	str	r3, [r7, #8]
      break;
 8005a32:	e0b0      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a34:	4b5a      	ldr	r3, [pc, #360]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a3e:	4b58      	ldr	r3, [pc, #352]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04a      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b55      	ldr	r3, [pc, #340]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	f04f 0400 	mov.w	r4, #0
 8005a54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	ea03 0501 	and.w	r5, r3, r1
 8005a60:	ea04 0602 	and.w	r6, r4, r2
 8005a64:	4629      	mov	r1, r5
 8005a66:	4632      	mov	r2, r6
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	0154      	lsls	r4, r2, #5
 8005a72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a76:	014b      	lsls	r3, r1, #5
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	1b49      	subs	r1, r1, r5
 8005a7e:	eb62 0206 	sbc.w	r2, r2, r6
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	f04f 0400 	mov.w	r4, #0
 8005a8a:	0194      	lsls	r4, r2, #6
 8005a8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a90:	018b      	lsls	r3, r1, #6
 8005a92:	1a5b      	subs	r3, r3, r1
 8005a94:	eb64 0402 	sbc.w	r4, r4, r2
 8005a98:	f04f 0100 	mov.w	r1, #0
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	00e2      	lsls	r2, r4, #3
 8005aa2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005aa6:	00d9      	lsls	r1, r3, #3
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4614      	mov	r4, r2
 8005aac:	195b      	adds	r3, r3, r5
 8005aae:	eb44 0406 	adc.w	r4, r4, r6
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	0262      	lsls	r2, r4, #9
 8005abc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ac0:	0259      	lsls	r1, r3, #9
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	4621      	mov	r1, r4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f04f 0400 	mov.w	r4, #0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	f7fa fc0c 	bl	80002f0 <__aeabi_uldivmod>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e049      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae0:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	099b      	lsrs	r3, r3, #6
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	ea03 0501 	and.w	r5, r3, r1
 8005af6:	ea04 0602 	and.w	r6, r4, r2
 8005afa:	4629      	mov	r1, r5
 8005afc:	4632      	mov	r2, r6
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	f04f 0400 	mov.w	r4, #0
 8005b06:	0154      	lsls	r4, r2, #5
 8005b08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b0c:	014b      	lsls	r3, r1, #5
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4622      	mov	r2, r4
 8005b12:	1b49      	subs	r1, r1, r5
 8005b14:	eb62 0206 	sbc.w	r2, r2, r6
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	0194      	lsls	r4, r2, #6
 8005b22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b26:	018b      	lsls	r3, r1, #6
 8005b28:	1a5b      	subs	r3, r3, r1
 8005b2a:	eb64 0402 	sbc.w	r4, r4, r2
 8005b2e:	f04f 0100 	mov.w	r1, #0
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	00e2      	lsls	r2, r4, #3
 8005b38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b3c:	00d9      	lsls	r1, r3, #3
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4614      	mov	r4, r2
 8005b42:	195b      	adds	r3, r3, r5
 8005b44:	eb44 0406 	adc.w	r4, r4, r6
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	02a2      	lsls	r2, r4, #10
 8005b52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b56:	0299      	lsls	r1, r3, #10
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4614      	mov	r4, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4621      	mov	r1, r4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f04f 0400 	mov.w	r4, #0
 8005b66:	461a      	mov	r2, r3
 8005b68:	4623      	mov	r3, r4
 8005b6a:	f7fa fbc1 	bl	80002f0 <__aeabi_uldivmod>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	60bb      	str	r3, [r7, #8]
      break;
 8005b8e:	e002      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b92:	60bb      	str	r3, [r7, #8]
      break;
 8005b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b96:	68bb      	ldr	r3, [r7, #8]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	00f42400 	.word	0x00f42400
 8005ba8:	007a1200 	.word	0x007a1200

08005bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb0:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000000 	.word	0x20000000

08005bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bc8:	f7ff fff0 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bcc:	4601      	mov	r1, r0
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	0a9b      	lsrs	r3, r3, #10
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4a03      	ldr	r2, [pc, #12]	; (8005be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40023800 	.word	0x40023800
 8005be8:	0800853c 	.word	0x0800853c

08005bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bf0:	f7ff ffdc 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bf4:	4601      	mov	r1, r0
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	0b5b      	lsrs	r3, r3, #13
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	4a03      	ldr	r2, [pc, #12]	; (8005c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c02:	5cd3      	ldrb	r3, [r2, r3]
 8005c04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	0800853c 	.word	0x0800853c

08005c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c3c:	4b69      	ldr	r3, [pc, #420]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4a68      	ldr	r2, [pc, #416]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c46:	6093      	str	r3, [r2, #8]
 8005c48:	4b66      	ldr	r3, [pc, #408]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	4964      	ldr	r1, [pc, #400]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d017      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c6e:	4b5d      	ldr	r3, [pc, #372]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7c:	4959      	ldr	r1, [pc, #356]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d017      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005caa:	4b4e      	ldr	r3, [pc, #312]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	494a      	ldr	r1, [pc, #296]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc8:	d101      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 808b 	beq.w	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cf8:	4b3a      	ldr	r3, [pc, #232]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	4a39      	ldr	r2, [pc, #228]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d02:	6413      	str	r3, [r2, #64]	; 0x40
 8005d04:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d10:	4b35      	ldr	r3, [pc, #212]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a34      	ldr	r2, [pc, #208]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1c:	f7fd f9f4 	bl	8003108 <HAL_GetTick>
 8005d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d24:	f7fd f9f0 	bl	8003108 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e38d      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d36:	4b2c      	ldr	r3, [pc, #176]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d42:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d035      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d02e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d60:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d76:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d88:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d114      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fd f9b8 	bl	8003108 <HAL_GetTick>
 8005d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fd f9b4 	bl	8003108 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e34f      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ee      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dca:	d111      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dda:	400b      	ands	r3, r1
 8005ddc:	4901      	ldr	r1, [pc, #4]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	608b      	str	r3, [r1, #8]
 8005de2:	e00b      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005de4:	40023800 	.word	0x40023800
 8005de8:	40007000 	.word	0x40007000
 8005dec:	0ffffcff 	.word	0x0ffffcff
 8005df0:	4bb3      	ldr	r3, [pc, #716]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4ab2      	ldr	r2, [pc, #712]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dfa:	6093      	str	r3, [r2, #8]
 8005dfc:	4bb0      	ldr	r3, [pc, #704]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e08:	49ad      	ldr	r1, [pc, #692]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d010      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e1a:	4ba9      	ldr	r3, [pc, #676]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e20:	4aa7      	ldr	r2, [pc, #668]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e2a:	4ba5      	ldr	r3, [pc, #660]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	49a2      	ldr	r1, [pc, #648]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e48:	4b9d      	ldr	r3, [pc, #628]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e56:	499a      	ldr	r1, [pc, #616]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e6a:	4b95      	ldr	r3, [pc, #596]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e78:	4991      	ldr	r1, [pc, #580]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e8c:	4b8c      	ldr	r3, [pc, #560]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	4989      	ldr	r1, [pc, #548]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005eae:	4b84      	ldr	r3, [pc, #528]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4980      	ldr	r1, [pc, #512]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ed0:	4b7b      	ldr	r3, [pc, #492]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed6:	f023 0203 	bic.w	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	4978      	ldr	r1, [pc, #480]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ef2:	4b73      	ldr	r3, [pc, #460]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f023 020c 	bic.w	r2, r3, #12
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f00:	496f      	ldr	r1, [pc, #444]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f14:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	4967      	ldr	r1, [pc, #412]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f36:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	495e      	ldr	r1, [pc, #376]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f58:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	4956      	ldr	r1, [pc, #344]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f7a:	4b51      	ldr	r3, [pc, #324]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	494d      	ldr	r1, [pc, #308]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005f9c:	4b48      	ldr	r3, [pc, #288]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	4945      	ldr	r1, [pc, #276]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005fbe:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fcc:	493c      	ldr	r1, [pc, #240]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fe0:	4b37      	ldr	r3, [pc, #220]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fee:	4934      	ldr	r1, [pc, #208]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d011      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006008:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006010:	492b      	ldr	r1, [pc, #172]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006020:	d101      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006022:	2301      	movs	r3, #1
 8006024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006032:	2301      	movs	r3, #1
 8006034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006042:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006050:	491b      	ldr	r1, [pc, #108]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006074:	4912      	ldr	r1, [pc, #72]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006088:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006098:	4909      	ldr	r1, [pc, #36]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00f      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800
 80060c4:	4985      	ldr	r1, [pc, #532]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060d8:	4b80      	ldr	r3, [pc, #512]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e8:	497c      	ldr	r1, [pc, #496]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d005      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060fe:	f040 80d6 	bne.w	80062ae <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006102:	4b76      	ldr	r3, [pc, #472]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a75      	ldr	r2, [pc, #468]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800610c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610e:	f7fc fffb 	bl	8003108 <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006114:	e008      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006116:	f7fc fff7 	bl	8003108 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b64      	cmp	r3, #100	; 0x64
 8006122:	d901      	bls.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e194      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006128:	4b6c      	ldr	r3, [pc, #432]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f0      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d021      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11d      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006148:	4b64      	ldr	r3, [pc, #400]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800614a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006156:	4b61      	ldr	r3, [pc, #388]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615c:	0e1b      	lsrs	r3, r3, #24
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	019a      	lsls	r2, r3, #6
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	431a      	orrs	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	071b      	lsls	r3, r3, #28
 800617c:	4957      	ldr	r1, [pc, #348]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d02e      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ae:	d129      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061b0:	4b4a      	ldr	r3, [pc, #296]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c4:	0f1b      	lsrs	r3, r3, #28
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	019a      	lsls	r2, r3, #6
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	041b      	lsls	r3, r3, #16
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	431a      	orrs	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	071b      	lsls	r3, r3, #28
 80061e4:	493d      	ldr	r1, [pc, #244]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061ec:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f2:	f023 021f 	bic.w	r2, r3, #31
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4937      	ldr	r1, [pc, #220]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01d      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006210:	4b32      	ldr	r3, [pc, #200]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006216:	0e1b      	lsrs	r3, r3, #24
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800621e:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006224:	0f1b      	lsrs	r3, r3, #28
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	019a      	lsls	r2, r3, #6
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	431a      	orrs	r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	061b      	lsls	r3, r3, #24
 800623e:	431a      	orrs	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	071b      	lsls	r3, r3, #28
 8006244:	4925      	ldr	r1, [pc, #148]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d011      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	019a      	lsls	r2, r3, #6
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	071b      	lsls	r3, r3, #28
 8006274:	4919      	ldr	r1, [pc, #100]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a16      	ldr	r2, [pc, #88]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006288:	f7fc ff3e 	bl	8003108 <HAL_GetTick>
 800628c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006290:	f7fc ff3a 	bl	8003108 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e0d7      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062a2:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	f040 80cd 	bne.w	8006450 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a08      	ldr	r2, [pc, #32]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c2:	f7fc ff21 	bl	8003108 <HAL_GetTick>
 80062c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062c8:	e00a      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062ca:	f7fc ff1d 	bl	8003108 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b64      	cmp	r3, #100	; 0x64
 80062d6:	d903      	bls.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e0ba      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80062dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062e0:	4b5e      	ldr	r3, [pc, #376]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ec:	d0ed      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02e      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d12a      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006316:	4b51      	ldr	r3, [pc, #324]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006324:	4b4d      	ldr	r3, [pc, #308]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	0f1b      	lsrs	r3, r3, #28
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	019a      	lsls	r2, r3, #6
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	431a      	orrs	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	071b      	lsls	r3, r3, #28
 800634a:	4944      	ldr	r1, [pc, #272]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006352:	4b42      	ldr	r3, [pc, #264]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	3b01      	subs	r3, #1
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	493d      	ldr	r1, [pc, #244]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d022      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006380:	d11d      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006382:	4b36      	ldr	r3, [pc, #216]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	0e1b      	lsrs	r3, r3, #24
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006390:	4b32      	ldr	r3, [pc, #200]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	0f1b      	lsrs	r3, r3, #28
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	019a      	lsls	r2, r3, #6
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	431a      	orrs	r2, r3
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	061b      	lsls	r3, r3, #24
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	071b      	lsls	r3, r3, #28
 80063b6:	4929      	ldr	r1, [pc, #164]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d028      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	0e1b      	lsrs	r3, r3, #24
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063d8:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	019a      	lsls	r2, r3, #6
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	061b      	lsls	r3, r3, #24
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	071b      	lsls	r3, r3, #28
 80063fe:	4917      	ldr	r1, [pc, #92]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006406:	4b15      	ldr	r3, [pc, #84]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4911      	ldr	r1, [pc, #68]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0e      	ldr	r2, [pc, #56]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006428:	f7fc fe6e 	bl	8003108 <HAL_GetTick>
 800642c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006430:	f7fc fe6a 	bl	8003108 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e007      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644e:	d1ef      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800

08006460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e01d      	b.n	80064ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fc fc08 	bl	8002c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f000 fa36 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <HAL_TIM_Base_Start_IT+0x50>)
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b06      	cmp	r3, #6
 80064e0:	d00b      	beq.n	80064fa <HAL_TIM_Base_Start_IT+0x42>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d007      	beq.n	80064fa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	00010007 	.word	0x00010007

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0202 	mvn.w	r2, #2
 8006538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f9c0 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9b2 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f9c3 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f996 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f988 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f999 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0208 	mvn.w	r2, #8
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f96c 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f95e 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f96f 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f942 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f934 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f945 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0201 	mvn.w	r2, #1
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fb feb0 	bl	80023f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d10e      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fafc 	bl	8006cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 faef 	bl	8006cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d10e      	bne.n	8006716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d107      	bne.n	8006716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800670e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8f3 	bl	80068fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d10e      	bne.n	8006742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d107      	bne.n	8006742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f06f 0220 	mvn.w	r2, #32
 800673a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 faaf 	bl	8006ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_TIM_ConfigClockSource+0x18>
 8006760:	2302      	movs	r3, #2
 8006762:	e0a6      	b.n	80068b2 <HAL_TIM_ConfigClockSource+0x166>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4b4f      	ldr	r3, [pc, #316]	; (80068bc <HAL_TIM_ConfigClockSource+0x170>)
 8006780:	4013      	ands	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d067      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x120>
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d80b      	bhi.n	80067b8 <HAL_TIM_ConfigClockSource+0x6c>
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d073      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x140>
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d802      	bhi.n	80067ae <HAL_TIM_ConfigClockSource+0x62>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d06f      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80067ac:	e078      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d06c      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x140>
 80067b2:	2b30      	cmp	r3, #48	; 0x30
 80067b4:	d06a      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067b6:	e073      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067b8:	2b70      	cmp	r3, #112	; 0x70
 80067ba:	d00d      	beq.n	80067d8 <HAL_TIM_ConfigClockSource+0x8c>
 80067bc:	2b70      	cmp	r3, #112	; 0x70
 80067be:	d804      	bhi.n	80067ca <HAL_TIM_ConfigClockSource+0x7e>
 80067c0:	2b50      	cmp	r3, #80	; 0x50
 80067c2:	d033      	beq.n	800682c <HAL_TIM_ConfigClockSource+0xe0>
 80067c4:	2b60      	cmp	r3, #96	; 0x60
 80067c6:	d041      	beq.n	800684c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067c8:	e06a      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	d066      	beq.n	800689e <HAL_TIM_ConfigClockSource+0x152>
 80067d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d4:	d017      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80067d6:	e063      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6899      	ldr	r1, [r3, #8]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f000 f9ac 	bl	8006b44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]
      break;
 8006804:	e04c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6899      	ldr	r1, [r3, #8]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f000 f995 	bl	8006b44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e039      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	461a      	mov	r2, r3
 800683a:	f000 f909 	bl	8006a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2150      	movs	r1, #80	; 0x50
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f962 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 800684a:	e029      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	461a      	mov	r2, r3
 800685a:	f000 f928 	bl	8006aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2160      	movs	r1, #96	; 0x60
 8006864:	4618      	mov	r0, r3
 8006866:	f000 f952 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 800686a:	e019      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	461a      	mov	r2, r3
 800687a:	f000 f8e9 	bl	8006a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2140      	movs	r1, #64	; 0x40
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f942 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 800688a:	e009      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f000 f939 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 800689c:	e000      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800689e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	fffeff88 	.word	0xfffeff88

080068c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a40      	ldr	r2, [pc, #256]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d00f      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a3d      	ldr	r2, [pc, #244]	; (8006a28 <TIM_Base_SetConfig+0x118>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a3c      	ldr	r2, [pc, #240]	; (8006a2c <TIM_Base_SetConfig+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a3b      	ldr	r2, [pc, #236]	; (8006a30 <TIM_Base_SetConfig+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a3a      	ldr	r2, [pc, #232]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d02b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d027      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <TIM_Base_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d023      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <TIM_Base_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01f      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <TIM_Base_SetConfig+0x120>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d017      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a28      	ldr	r2, [pc, #160]	; (8006a38 <TIM_Base_SetConfig+0x128>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <TIM_Base_SetConfig+0x12c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00f      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <TIM_Base_SetConfig+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a25      	ldr	r2, [pc, #148]	; (8006a44 <TIM_Base_SetConfig+0x134>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d007      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <TIM_Base_SetConfig+0x138>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <TIM_Base_SetConfig+0x13c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_Base_SetConfig+0xf8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d103      	bne.n	8006a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	615a      	str	r2, [r3, #20]
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40010400 	.word	0x40010400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800
 8006a44:	40001800 	.word	0x40001800
 8006a48:	40001c00 	.word	0x40001c00
 8006a4c:	40002000 	.word	0x40002000

08006a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0201 	bic.w	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 030a 	bic.w	r3, r3, #10
 8006a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f023 0210 	bic.w	r2, r3, #16
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b085      	sub	sp, #20
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f043 0307 	orr.w	r3, r3, #7
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	021a      	lsls	r2, r3, #8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e06d      	b.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a30      	ldr	r2, [pc, #192]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2f      	ldr	r2, [pc, #188]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d108      	bne.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d022      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d01d      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1c      	ldr	r2, [pc, #112]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10c      	bne.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40001800 	.word	0x40001800

08006ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e040      	b.n	8006d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fc f846 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	; 0x24
 8006d08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8be 	bl	8006e9c <UART_SetConfig>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e022      	b.n	8006d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fb5c 	bl	80073f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fbe3 	bl	8007534 <UART_CheckIdleState>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	; 0x28
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d17f      	bne.n	8006e90 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_UART_Transmit+0x24>
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e078      	b.n	8006e92 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Transmit+0x36>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e071      	b.n	8006e92 <HAL_UART_Transmit+0x11a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2221      	movs	r2, #33	; 0x21
 8006dc0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fc f9a1 	bl	8003108 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de0:	d108      	bne.n	8006df4 <HAL_UART_Transmit+0x7c>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e003      	b.n	8006dfc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006e04:	e02c      	b.n	8006e60 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fbd4 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e038      	b.n	8006e92 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e007      	b.n	8006e4e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	781a      	ldrb	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1cc      	bne.n	8006e06 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2200      	movs	r2, #0
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fba1 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e005      	b.n	8006e92 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e000      	b.n	8006e92 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006e90:	2302      	movs	r3, #2
  }
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4bb1      	ldr	r3, [pc, #708]	; (8007190 <UART_SetConfig+0x2f4>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	6939      	ldr	r1, [r7, #16]
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a9f      	ldr	r2, [pc, #636]	; (8007194 <UART_SetConfig+0x2f8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d121      	bne.n	8006f60 <UART_SetConfig+0xc4>
 8006f1c:	4b9e      	ldr	r3, [pc, #632]	; (8007198 <UART_SetConfig+0x2fc>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d816      	bhi.n	8006f58 <UART_SetConfig+0xbc>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x94>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f41 	.word	0x08006f41
 8006f34:	08006f4d 	.word	0x08006f4d
 8006f38:	08006f47 	.word	0x08006f47
 8006f3c:	08006f53 	.word	0x08006f53
 8006f40:	2301      	movs	r3, #1
 8006f42:	77fb      	strb	r3, [r7, #31]
 8006f44:	e151      	b.n	80071ea <UART_SetConfig+0x34e>
 8006f46:	2302      	movs	r3, #2
 8006f48:	77fb      	strb	r3, [r7, #31]
 8006f4a:	e14e      	b.n	80071ea <UART_SetConfig+0x34e>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e14b      	b.n	80071ea <UART_SetConfig+0x34e>
 8006f52:	2308      	movs	r3, #8
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e148      	b.n	80071ea <UART_SetConfig+0x34e>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	bf00      	nop
 8006f5e:	e144      	b.n	80071ea <UART_SetConfig+0x34e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a8d      	ldr	r2, [pc, #564]	; (800719c <UART_SetConfig+0x300>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d134      	bne.n	8006fd4 <UART_SetConfig+0x138>
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <UART_SetConfig+0x2fc>)
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f003 030c 	and.w	r3, r3, #12
 8006f74:	2b0c      	cmp	r3, #12
 8006f76:	d829      	bhi.n	8006fcc <UART_SetConfig+0x130>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <UART_SetConfig+0xe4>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006fb5 	.word	0x08006fb5
 8006f84:	08006fcd 	.word	0x08006fcd
 8006f88:	08006fcd 	.word	0x08006fcd
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fc1 	.word	0x08006fc1
 8006f94:	08006fcd 	.word	0x08006fcd
 8006f98:	08006fcd 	.word	0x08006fcd
 8006f9c:	08006fcd 	.word	0x08006fcd
 8006fa0:	08006fbb 	.word	0x08006fbb
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fcd 	.word	0x08006fcd
 8006fb0:	08006fc7 	.word	0x08006fc7
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e117      	b.n	80071ea <UART_SetConfig+0x34e>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e114      	b.n	80071ea <UART_SetConfig+0x34e>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e111      	b.n	80071ea <UART_SetConfig+0x34e>
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e10e      	b.n	80071ea <UART_SetConfig+0x34e>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	bf00      	nop
 8006fd2:	e10a      	b.n	80071ea <UART_SetConfig+0x34e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a71      	ldr	r2, [pc, #452]	; (80071a0 <UART_SetConfig+0x304>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d120      	bne.n	8007020 <UART_SetConfig+0x184>
 8006fde:	4b6e      	ldr	r3, [pc, #440]	; (8007198 <UART_SetConfig+0x2fc>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d00f      	beq.n	800700c <UART_SetConfig+0x170>
 8006fec:	2b10      	cmp	r3, #16
 8006fee:	d802      	bhi.n	8006ff6 <UART_SetConfig+0x15a>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <UART_SetConfig+0x164>
 8006ff4:	e010      	b.n	8007018 <UART_SetConfig+0x17c>
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d005      	beq.n	8007006 <UART_SetConfig+0x16a>
 8006ffa:	2b30      	cmp	r3, #48	; 0x30
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0x176>
 8006ffe:	e00b      	b.n	8007018 <UART_SetConfig+0x17c>
 8007000:	2300      	movs	r3, #0
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e0f1      	b.n	80071ea <UART_SetConfig+0x34e>
 8007006:	2302      	movs	r3, #2
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e0ee      	b.n	80071ea <UART_SetConfig+0x34e>
 800700c:	2304      	movs	r3, #4
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e0eb      	b.n	80071ea <UART_SetConfig+0x34e>
 8007012:	2308      	movs	r3, #8
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e0e8      	b.n	80071ea <UART_SetConfig+0x34e>
 8007018:	2310      	movs	r3, #16
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	bf00      	nop
 800701e:	e0e4      	b.n	80071ea <UART_SetConfig+0x34e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a5f      	ldr	r2, [pc, #380]	; (80071a4 <UART_SetConfig+0x308>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d120      	bne.n	800706c <UART_SetConfig+0x1d0>
 800702a:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <UART_SetConfig+0x2fc>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007030:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d00f      	beq.n	8007058 <UART_SetConfig+0x1bc>
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d802      	bhi.n	8007042 <UART_SetConfig+0x1a6>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <UART_SetConfig+0x1b0>
 8007040:	e010      	b.n	8007064 <UART_SetConfig+0x1c8>
 8007042:	2b80      	cmp	r3, #128	; 0x80
 8007044:	d005      	beq.n	8007052 <UART_SetConfig+0x1b6>
 8007046:	2bc0      	cmp	r3, #192	; 0xc0
 8007048:	d009      	beq.n	800705e <UART_SetConfig+0x1c2>
 800704a:	e00b      	b.n	8007064 <UART_SetConfig+0x1c8>
 800704c:	2300      	movs	r3, #0
 800704e:	77fb      	strb	r3, [r7, #31]
 8007050:	e0cb      	b.n	80071ea <UART_SetConfig+0x34e>
 8007052:	2302      	movs	r3, #2
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	e0c8      	b.n	80071ea <UART_SetConfig+0x34e>
 8007058:	2304      	movs	r3, #4
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e0c5      	b.n	80071ea <UART_SetConfig+0x34e>
 800705e:	2308      	movs	r3, #8
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e0c2      	b.n	80071ea <UART_SetConfig+0x34e>
 8007064:	2310      	movs	r3, #16
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	bf00      	nop
 800706a:	e0be      	b.n	80071ea <UART_SetConfig+0x34e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a4d      	ldr	r2, [pc, #308]	; (80071a8 <UART_SetConfig+0x30c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d124      	bne.n	80070c0 <UART_SetConfig+0x224>
 8007076:	4b48      	ldr	r3, [pc, #288]	; (8007198 <UART_SetConfig+0x2fc>)
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007084:	d012      	beq.n	80070ac <UART_SetConfig+0x210>
 8007086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708a:	d802      	bhi.n	8007092 <UART_SetConfig+0x1f6>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d007      	beq.n	80070a0 <UART_SetConfig+0x204>
 8007090:	e012      	b.n	80070b8 <UART_SetConfig+0x21c>
 8007092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007096:	d006      	beq.n	80070a6 <UART_SetConfig+0x20a>
 8007098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0x216>
 800709e:	e00b      	b.n	80070b8 <UART_SetConfig+0x21c>
 80070a0:	2300      	movs	r3, #0
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e0a1      	b.n	80071ea <UART_SetConfig+0x34e>
 80070a6:	2302      	movs	r3, #2
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e09e      	b.n	80071ea <UART_SetConfig+0x34e>
 80070ac:	2304      	movs	r3, #4
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e09b      	b.n	80071ea <UART_SetConfig+0x34e>
 80070b2:	2308      	movs	r3, #8
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e098      	b.n	80071ea <UART_SetConfig+0x34e>
 80070b8:	2310      	movs	r3, #16
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	bf00      	nop
 80070be:	e094      	b.n	80071ea <UART_SetConfig+0x34e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a39      	ldr	r2, [pc, #228]	; (80071ac <UART_SetConfig+0x310>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d124      	bne.n	8007114 <UART_SetConfig+0x278>
 80070ca:	4b33      	ldr	r3, [pc, #204]	; (8007198 <UART_SetConfig+0x2fc>)
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d8:	d012      	beq.n	8007100 <UART_SetConfig+0x264>
 80070da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070de:	d802      	bhi.n	80070e6 <UART_SetConfig+0x24a>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <UART_SetConfig+0x258>
 80070e4:	e012      	b.n	800710c <UART_SetConfig+0x270>
 80070e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ea:	d006      	beq.n	80070fa <UART_SetConfig+0x25e>
 80070ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070f0:	d009      	beq.n	8007106 <UART_SetConfig+0x26a>
 80070f2:	e00b      	b.n	800710c <UART_SetConfig+0x270>
 80070f4:	2301      	movs	r3, #1
 80070f6:	77fb      	strb	r3, [r7, #31]
 80070f8:	e077      	b.n	80071ea <UART_SetConfig+0x34e>
 80070fa:	2302      	movs	r3, #2
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e074      	b.n	80071ea <UART_SetConfig+0x34e>
 8007100:	2304      	movs	r3, #4
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e071      	b.n	80071ea <UART_SetConfig+0x34e>
 8007106:	2308      	movs	r3, #8
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e06e      	b.n	80071ea <UART_SetConfig+0x34e>
 800710c:	2310      	movs	r3, #16
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	bf00      	nop
 8007112:	e06a      	b.n	80071ea <UART_SetConfig+0x34e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <UART_SetConfig+0x314>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d124      	bne.n	8007168 <UART_SetConfig+0x2cc>
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <UART_SetConfig+0x2fc>)
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712c:	d012      	beq.n	8007154 <UART_SetConfig+0x2b8>
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007132:	d802      	bhi.n	800713a <UART_SetConfig+0x29e>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <UART_SetConfig+0x2ac>
 8007138:	e012      	b.n	8007160 <UART_SetConfig+0x2c4>
 800713a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713e:	d006      	beq.n	800714e <UART_SetConfig+0x2b2>
 8007140:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007144:	d009      	beq.n	800715a <UART_SetConfig+0x2be>
 8007146:	e00b      	b.n	8007160 <UART_SetConfig+0x2c4>
 8007148:	2300      	movs	r3, #0
 800714a:	77fb      	strb	r3, [r7, #31]
 800714c:	e04d      	b.n	80071ea <UART_SetConfig+0x34e>
 800714e:	2302      	movs	r3, #2
 8007150:	77fb      	strb	r3, [r7, #31]
 8007152:	e04a      	b.n	80071ea <UART_SetConfig+0x34e>
 8007154:	2304      	movs	r3, #4
 8007156:	77fb      	strb	r3, [r7, #31]
 8007158:	e047      	b.n	80071ea <UART_SetConfig+0x34e>
 800715a:	2308      	movs	r3, #8
 800715c:	77fb      	strb	r3, [r7, #31]
 800715e:	e044      	b.n	80071ea <UART_SetConfig+0x34e>
 8007160:	2310      	movs	r3, #16
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	bf00      	nop
 8007166:	e040      	b.n	80071ea <UART_SetConfig+0x34e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <UART_SetConfig+0x318>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d139      	bne.n	80071e6 <UART_SetConfig+0x34a>
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <UART_SetConfig+0x2fc>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800717c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007180:	d027      	beq.n	80071d2 <UART_SetConfig+0x336>
 8007182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007186:	d817      	bhi.n	80071b8 <UART_SetConfig+0x31c>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01c      	beq.n	80071c6 <UART_SetConfig+0x32a>
 800718c:	e027      	b.n	80071de <UART_SetConfig+0x342>
 800718e:	bf00      	nop
 8007190:	efff69f3 	.word	0xefff69f3
 8007194:	40011000 	.word	0x40011000
 8007198:	40023800 	.word	0x40023800
 800719c:	40004400 	.word	0x40004400
 80071a0:	40004800 	.word	0x40004800
 80071a4:	40004c00 	.word	0x40004c00
 80071a8:	40005000 	.word	0x40005000
 80071ac:	40011400 	.word	0x40011400
 80071b0:	40007800 	.word	0x40007800
 80071b4:	40007c00 	.word	0x40007c00
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	d006      	beq.n	80071cc <UART_SetConfig+0x330>
 80071be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071c2:	d009      	beq.n	80071d8 <UART_SetConfig+0x33c>
 80071c4:	e00b      	b.n	80071de <UART_SetConfig+0x342>
 80071c6:	2300      	movs	r3, #0
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e00e      	b.n	80071ea <UART_SetConfig+0x34e>
 80071cc:	2302      	movs	r3, #2
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e00b      	b.n	80071ea <UART_SetConfig+0x34e>
 80071d2:	2304      	movs	r3, #4
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e008      	b.n	80071ea <UART_SetConfig+0x34e>
 80071d8:	2308      	movs	r3, #8
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e005      	b.n	80071ea <UART_SetConfig+0x34e>
 80071de:	2310      	movs	r3, #16
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	bf00      	nop
 80071e4:	e001      	b.n	80071ea <UART_SetConfig+0x34e>
 80071e6:	2310      	movs	r3, #16
 80071e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f2:	d17f      	bne.n	80072f4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80071f4:	7ffb      	ldrb	r3, [r7, #31]
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d85c      	bhi.n	80072b4 <UART_SetConfig+0x418>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x364>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007225 	.word	0x08007225
 8007204:	08007245 	.word	0x08007245
 8007208:	08007265 	.word	0x08007265
 800720c:	080072b5 	.word	0x080072b5
 8007210:	0800727d 	.word	0x0800727d
 8007214:	080072b5 	.word	0x080072b5
 8007218:	080072b5 	.word	0x080072b5
 800721c:	080072b5 	.word	0x080072b5
 8007220:	0800729d 	.word	0x0800729d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007224:	f7fe fcce 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 8007228:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	005a      	lsls	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	b29b      	uxth	r3, r3
 8007240:	61bb      	str	r3, [r7, #24]
        break;
 8007242:	e03a      	b.n	80072ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007244:	f7fe fcd2 	bl	8005bec <HAL_RCC_GetPCLK2Freq>
 8007248:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	005a      	lsls	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	fbb2 f3f3 	udiv	r3, r2, r3
 800725e:	b29b      	uxth	r3, r3
 8007260:	61bb      	str	r3, [r7, #24]
        break;
 8007262:	e02a      	b.n	80072ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	085a      	lsrs	r2, r3, #1
 800726a:	4b5f      	ldr	r3, [pc, #380]	; (80073e8 <UART_SetConfig+0x54c>)
 800726c:	4413      	add	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6852      	ldr	r2, [r2, #4]
 8007272:	fbb3 f3f2 	udiv	r3, r3, r2
 8007276:	b29b      	uxth	r3, r3
 8007278:	61bb      	str	r3, [r7, #24]
        break;
 800727a:	e01e      	b.n	80072ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727c:	f7fe fbbe 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8007280:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	005a      	lsls	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	fbb2 f3f3 	udiv	r3, r2, r3
 8007296:	b29b      	uxth	r3, r3
 8007298:	61bb      	str	r3, [r7, #24]
        break;
 800729a:	e00e      	b.n	80072ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	61bb      	str	r3, [r7, #24]
        break;
 80072b2:	e002      	b.n	80072ba <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
        break;
 80072b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b0f      	cmp	r3, #15
 80072be:	d916      	bls.n	80072ee <UART_SetConfig+0x452>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c6:	d212      	bcs.n	80072ee <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f023 030f 	bic.w	r3, r3, #15
 80072d0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	b29a      	uxth	r2, r3
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	897a      	ldrh	r2, [r7, #10]
 80072ea:	60da      	str	r2, [r3, #12]
 80072ec:	e070      	b.n	80073d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
 80072f2:	e06d      	b.n	80073d0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80072f4:	7ffb      	ldrb	r3, [r7, #31]
 80072f6:	2b08      	cmp	r3, #8
 80072f8:	d859      	bhi.n	80073ae <UART_SetConfig+0x512>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x464>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007325 	.word	0x08007325
 8007304:	08007343 	.word	0x08007343
 8007308:	08007361 	.word	0x08007361
 800730c:	080073af 	.word	0x080073af
 8007310:	08007379 	.word	0x08007379
 8007314:	080073af 	.word	0x080073af
 8007318:	080073af 	.word	0x080073af
 800731c:	080073af 	.word	0x080073af
 8007320:	08007397 	.word	0x08007397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007324:	f7fe fc4e 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 8007328:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	085a      	lsrs	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	441a      	add	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	b29b      	uxth	r3, r3
 800733e:	61bb      	str	r3, [r7, #24]
        break;
 8007340:	e038      	b.n	80073b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007342:	f7fe fc53 	bl	8005bec <HAL_RCC_GetPCLK2Freq>
 8007346:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	085a      	lsrs	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	441a      	add	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	61bb      	str	r3, [r7, #24]
        break;
 800735e:	e029      	b.n	80073b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	085a      	lsrs	r2, r3, #1
 8007366:	4b21      	ldr	r3, [pc, #132]	; (80073ec <UART_SetConfig+0x550>)
 8007368:	4413      	add	r3, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6852      	ldr	r2, [r2, #4]
 800736e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007372:	b29b      	uxth	r3, r3
 8007374:	61bb      	str	r3, [r7, #24]
        break;
 8007376:	e01d      	b.n	80073b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007378:	f7fe fb40 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 800737c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	085a      	lsrs	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	441a      	add	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	b29b      	uxth	r3, r3
 8007392:	61bb      	str	r3, [r7, #24]
        break;
 8007394:	e00e      	b.n	80073b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	61bb      	str	r3, [r7, #24]
        break;
 80073ac:	e002      	b.n	80073b4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
        break;
 80073b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b0f      	cmp	r3, #15
 80073b8:	d908      	bls.n	80073cc <UART_SetConfig+0x530>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c0:	d204      	bcs.n	80073cc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	e001      	b.n	80073d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	01e84800 	.word	0x01e84800
 80073ec:	00f42400 	.word	0x00f42400

080073f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ee:	d10a      	bne.n	8007506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007542:	f7fb fde1 	bl	8003108 <HAL_GetTick>
 8007546:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b08      	cmp	r3, #8
 8007554:	d10e      	bne.n	8007574 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f82a 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e020      	b.n	80075b6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0304 	and.w	r3, r3, #4
 800757e:	2b04      	cmp	r3, #4
 8007580:	d10e      	bne.n	80075a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007582:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f814 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e00a      	b.n	80075b6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	4613      	mov	r3, r2
 80075cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	e05d      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d059      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d8:	f7fb fd96 	bl	8003108 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d302      	bcc.n	80075ee <UART_WaitOnFlagUntilTimeout+0x30>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d11b      	bne.n	8007626 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e042      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02b      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007642:	d123      	bne.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800764c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800765c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e00f      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69da      	ldr	r2, [r3, #28]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d092      	beq.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 001c 	add.w	r0, r7, #28
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d120      	bne.n	800770e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	4b20      	ldr	r3, [pc, #128]	; (8007760 <USB_CoreInit+0xac>)
 80076de:	4013      	ands	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d105      	bne.n	8007702 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa52 	bl	8007bac <USB_CoreReset>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	e010      	b.n	8007730 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa46 	bl	8007bac <USB_CoreReset>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	2b01      	cmp	r3, #1
 8007734:	d10b      	bne.n	800774e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f043 0206 	orr.w	r2, r3, #6
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800775a:	b004      	add	sp, #16
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	ffbdffbf 	.word	0xffbdffbf

08007764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f023 0201 	bic.w	r2, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	e00b      	b.n	80077ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	e001      	b.n	80077ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e003      	b.n	80077d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80077ca:	2032      	movs	r0, #50	; 0x32
 80077cc:	f7fb fca8 	bl	8003120 <HAL_Delay>

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077dc:	b084      	sub	sp, #16
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	e009      	b.n	8007810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3340      	adds	r3, #64	; 0x40
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3301      	adds	r3, #1
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b0e      	cmp	r3, #14
 8007814:	d9f2      	bls.n	80077fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11c      	bne.n	8007856 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e005      	b.n	8007862 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007868:	461a      	mov	r2, r3
 800786a:	2300      	movs	r3, #0
 800786c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	4619      	mov	r1, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	461a      	mov	r2, r3
 800787e:	680b      	ldr	r3, [r1, #0]
 8007880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10c      	bne.n	80078a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800788e:	2100      	movs	r1, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f959 	bl	8007b48 <USB_SetDevSpeed>
 8007896:	e018      	b.n	80078ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007898:	2101      	movs	r1, #1
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f954 	bl	8007b48 <USB_SetDevSpeed>
 80078a0:	e013      	b.n	80078ca <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d10c      	bne.n	80078c2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f949 	bl	8007b48 <USB_SetDevSpeed>
 80078b6:	e008      	b.n	80078ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f944 	bl	8007b48 <USB_SetDevSpeed>
 80078c0:	e003      	b.n	80078ca <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078c2:	2103      	movs	r1, #3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f93f 	bl	8007b48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ca:	2110      	movs	r1, #16
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8f3 	bl	8007ab8 <USB_FlushTxFifo>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f911 	bl	8007b04 <USB_FlushRxFifo>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	461a      	mov	r2, r3
 80078f4:	2300      	movs	r3, #0
 80078f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	461a      	mov	r2, r3
 8007900:	2300      	movs	r3, #0
 8007902:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790a:	461a      	mov	r2, r3
 800790c:	2300      	movs	r3, #0
 800790e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	e043      	b.n	800799e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800792c:	d118      	bne.n	8007960 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	461a      	mov	r2, r3
 8007942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	e013      	b.n	8007972 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007956:	461a      	mov	r2, r3
 8007958:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e008      	b.n	8007972 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797e:	461a      	mov	r2, r3
 8007980:	2300      	movs	r3, #0
 8007982:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	461a      	mov	r2, r3
 8007992:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007996:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3301      	adds	r3, #1
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d3b7      	bcc.n	8007916 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e043      	b.n	8007a34 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c2:	d118      	bne.n	80079f6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d6:	461a      	mov	r2, r3
 80079d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e013      	b.n	8007a08 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	461a      	mov	r2, r3
 80079ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e008      	b.n	8007a08 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	461a      	mov	r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	461a      	mov	r2, r3
 8007a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3301      	adds	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d3b7      	bcc.n	80079ac <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f043 0210 	orr.w	r2, r3, #16
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <USB_DevInit+0x2d4>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f043 0208 	orr.w	r2, r3, #8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <USB_DevInit+0x2d8>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aac:	b004      	add	sp, #16
 8007aae:	4770      	bx	lr
 8007ab0:	803c3800 	.word	0x803c3800
 8007ab4:	40000004 	.word	0x40000004

08007ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	019b      	lsls	r3, r3, #6
 8007aca:	f043 0220 	orr.w	r2, r3, #32
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <USB_FlushTxFifo+0x48>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d901      	bls.n	8007ae4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e006      	b.n	8007af2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d0f0      	beq.n	8007ad2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	00030d40 	.word	0x00030d40

08007b04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2210      	movs	r2, #16
 8007b14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <USB_FlushRxFifo+0x40>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d901      	bls.n	8007b28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e006      	b.n	8007b36 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d0f0      	beq.n	8007b16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	00030d40 	.word	0x00030d40

08007b48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b94:	f043 0302 	orr.w	r3, r3, #2
 8007b98:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b9a:	2003      	movs	r0, #3
 8007b9c:	f7fb fac0 	bl	8003120 <HAL_Delay>

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <USB_CoreReset+0x64>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e01b      	b.n	8007c02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	daf2      	bge.n	8007bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f043 0201 	orr.w	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <USB_CoreReset+0x64>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d0f0      	beq.n	8007be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	00030d40 	.word	0x00030d40

08007c14 <__errno>:
 8007c14:	4b01      	ldr	r3, [pc, #4]	; (8007c1c <__errno+0x8>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	2000000c 	.word	0x2000000c

08007c20 <__libc_init_array>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	4e0d      	ldr	r6, [pc, #52]	; (8007c58 <__libc_init_array+0x38>)
 8007c24:	4c0d      	ldr	r4, [pc, #52]	; (8007c5c <__libc_init_array+0x3c>)
 8007c26:	1ba4      	subs	r4, r4, r6
 8007c28:	10a4      	asrs	r4, r4, #2
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	42a5      	cmp	r5, r4
 8007c2e:	d109      	bne.n	8007c44 <__libc_init_array+0x24>
 8007c30:	4e0b      	ldr	r6, [pc, #44]	; (8007c60 <__libc_init_array+0x40>)
 8007c32:	4c0c      	ldr	r4, [pc, #48]	; (8007c64 <__libc_init_array+0x44>)
 8007c34:	f000 fc26 	bl	8008484 <_init>
 8007c38:	1ba4      	subs	r4, r4, r6
 8007c3a:	10a4      	asrs	r4, r4, #2
 8007c3c:	2500      	movs	r5, #0
 8007c3e:	42a5      	cmp	r5, r4
 8007c40:	d105      	bne.n	8007c4e <__libc_init_array+0x2e>
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c48:	4798      	blx	r3
 8007c4a:	3501      	adds	r5, #1
 8007c4c:	e7ee      	b.n	8007c2c <__libc_init_array+0xc>
 8007c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c52:	4798      	blx	r3
 8007c54:	3501      	adds	r5, #1
 8007c56:	e7f2      	b.n	8007c3e <__libc_init_array+0x1e>
 8007c58:	08008580 	.word	0x08008580
 8007c5c:	08008580 	.word	0x08008580
 8007c60:	08008580 	.word	0x08008580
 8007c64:	08008584 	.word	0x08008584

08007c68 <memset>:
 8007c68:	4402      	add	r2, r0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d100      	bne.n	8007c72 <memset+0xa>
 8007c70:	4770      	bx	lr
 8007c72:	f803 1b01 	strb.w	r1, [r3], #1
 8007c76:	e7f9      	b.n	8007c6c <memset+0x4>

08007c78 <siprintf>:
 8007c78:	b40e      	push	{r1, r2, r3}
 8007c7a:	b500      	push	{lr}
 8007c7c:	b09c      	sub	sp, #112	; 0x70
 8007c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c80:	9002      	str	r0, [sp, #8]
 8007c82:	9006      	str	r0, [sp, #24]
 8007c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c88:	4809      	ldr	r0, [pc, #36]	; (8007cb0 <siprintf+0x38>)
 8007c8a:	9107      	str	r1, [sp, #28]
 8007c8c:	9104      	str	r1, [sp, #16]
 8007c8e:	4909      	ldr	r1, [pc, #36]	; (8007cb4 <siprintf+0x3c>)
 8007c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c94:	9105      	str	r1, [sp, #20]
 8007c96:	6800      	ldr	r0, [r0, #0]
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	a902      	add	r1, sp, #8
 8007c9c:	f000 f866 	bl	8007d6c <_svfiprintf_r>
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	b01c      	add	sp, #112	; 0x70
 8007ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cac:	b003      	add	sp, #12
 8007cae:	4770      	bx	lr
 8007cb0:	2000000c 	.word	0x2000000c
 8007cb4:	ffff0208 	.word	0xffff0208

08007cb8 <__ssputs_r>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	688e      	ldr	r6, [r1, #8]
 8007cbe:	429e      	cmp	r6, r3
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4690      	mov	r8, r2
 8007cc6:	4699      	mov	r9, r3
 8007cc8:	d837      	bhi.n	8007d3a <__ssputs_r+0x82>
 8007cca:	898a      	ldrh	r2, [r1, #12]
 8007ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd0:	d031      	beq.n	8007d36 <__ssputs_r+0x7e>
 8007cd2:	6825      	ldr	r5, [r4, #0]
 8007cd4:	6909      	ldr	r1, [r1, #16]
 8007cd6:	1a6f      	subs	r7, r5, r1
 8007cd8:	6965      	ldr	r5, [r4, #20]
 8007cda:	2302      	movs	r3, #2
 8007cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ce4:	f109 0301 	add.w	r3, r9, #1
 8007ce8:	443b      	add	r3, r7
 8007cea:	429d      	cmp	r5, r3
 8007cec:	bf38      	it	cc
 8007cee:	461d      	movcc	r5, r3
 8007cf0:	0553      	lsls	r3, r2, #21
 8007cf2:	d530      	bpl.n	8007d56 <__ssputs_r+0x9e>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f000 fb2b 	bl	8008350 <_malloc_r>
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	b950      	cbnz	r0, 8007d14 <__ssputs_r+0x5c>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	f8ca 3000 	str.w	r3, [sl]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	463a      	mov	r2, r7
 8007d16:	6921      	ldr	r1, [r4, #16]
 8007d18:	f000 faa8 	bl	800826c <memcpy>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	6126      	str	r6, [r4, #16]
 8007d2a:	6165      	str	r5, [r4, #20]
 8007d2c:	443e      	add	r6, r7
 8007d2e:	1bed      	subs	r5, r5, r7
 8007d30:	6026      	str	r6, [r4, #0]
 8007d32:	60a5      	str	r5, [r4, #8]
 8007d34:	464e      	mov	r6, r9
 8007d36:	454e      	cmp	r6, r9
 8007d38:	d900      	bls.n	8007d3c <__ssputs_r+0x84>
 8007d3a:	464e      	mov	r6, r9
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4641      	mov	r1, r8
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	f000 fa9e 	bl	8008282 <memmove>
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	1b9b      	subs	r3, r3, r6
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	441e      	add	r6, r3
 8007d50:	6026      	str	r6, [r4, #0]
 8007d52:	2000      	movs	r0, #0
 8007d54:	e7dc      	b.n	8007d10 <__ssputs_r+0x58>
 8007d56:	462a      	mov	r2, r5
 8007d58:	f000 fb54 	bl	8008404 <_realloc_r>
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1e2      	bne.n	8007d28 <__ssputs_r+0x70>
 8007d62:	6921      	ldr	r1, [r4, #16]
 8007d64:	4650      	mov	r0, sl
 8007d66:	f000 faa5 	bl	80082b4 <_free_r>
 8007d6a:	e7c8      	b.n	8007cfe <__ssputs_r+0x46>

08007d6c <_svfiprintf_r>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	461d      	mov	r5, r3
 8007d72:	898b      	ldrh	r3, [r1, #12]
 8007d74:	061f      	lsls	r7, r3, #24
 8007d76:	b09d      	sub	sp, #116	; 0x74
 8007d78:	4680      	mov	r8, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	d50f      	bpl.n	8007da0 <_svfiprintf_r+0x34>
 8007d80:	690b      	ldr	r3, [r1, #16]
 8007d82:	b96b      	cbnz	r3, 8007da0 <_svfiprintf_r+0x34>
 8007d84:	2140      	movs	r1, #64	; 0x40
 8007d86:	f000 fae3 	bl	8008350 <_malloc_r>
 8007d8a:	6020      	str	r0, [r4, #0]
 8007d8c:	6120      	str	r0, [r4, #16]
 8007d8e:	b928      	cbnz	r0, 8007d9c <_svfiprintf_r+0x30>
 8007d90:	230c      	movs	r3, #12
 8007d92:	f8c8 3000 	str.w	r3, [r8]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	e0c8      	b.n	8007f2e <_svfiprintf_r+0x1c2>
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	2300      	movs	r3, #0
 8007da2:	9309      	str	r3, [sp, #36]	; 0x24
 8007da4:	2320      	movs	r3, #32
 8007da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007daa:	2330      	movs	r3, #48	; 0x30
 8007dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007db0:	9503      	str	r5, [sp, #12]
 8007db2:	f04f 0b01 	mov.w	fp, #1
 8007db6:	4637      	mov	r7, r6
 8007db8:	463d      	mov	r5, r7
 8007dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007dbe:	b10b      	cbz	r3, 8007dc4 <_svfiprintf_r+0x58>
 8007dc0:	2b25      	cmp	r3, #37	; 0x25
 8007dc2:	d13e      	bne.n	8007e42 <_svfiprintf_r+0xd6>
 8007dc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007dc8:	d00b      	beq.n	8007de2 <_svfiprintf_r+0x76>
 8007dca:	4653      	mov	r3, sl
 8007dcc:	4632      	mov	r2, r6
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	f7ff ff71 	bl	8007cb8 <__ssputs_r>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f000 80a4 	beq.w	8007f24 <_svfiprintf_r+0x1b8>
 8007ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dde:	4453      	add	r3, sl
 8007de0:	9309      	str	r3, [sp, #36]	; 0x24
 8007de2:	783b      	ldrb	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 809d 	beq.w	8007f24 <_svfiprintf_r+0x1b8>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f04f 32ff 	mov.w	r2, #4294967295
 8007df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dfe:	462f      	mov	r7, r5
 8007e00:	2205      	movs	r2, #5
 8007e02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e06:	4850      	ldr	r0, [pc, #320]	; (8007f48 <_svfiprintf_r+0x1dc>)
 8007e08:	f7f8 fa22 	bl	8000250 <memchr>
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	b9d0      	cbnz	r0, 8007e46 <_svfiprintf_r+0xda>
 8007e10:	06d9      	lsls	r1, r3, #27
 8007e12:	bf44      	itt	mi
 8007e14:	2220      	movmi	r2, #32
 8007e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e1a:	071a      	lsls	r2, r3, #28
 8007e1c:	bf44      	itt	mi
 8007e1e:	222b      	movmi	r2, #43	; 0x2b
 8007e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e24:	782a      	ldrb	r2, [r5, #0]
 8007e26:	2a2a      	cmp	r2, #42	; 0x2a
 8007e28:	d015      	beq.n	8007e56 <_svfiprintf_r+0xea>
 8007e2a:	9a07      	ldr	r2, [sp, #28]
 8007e2c:	462f      	mov	r7, r5
 8007e2e:	2000      	movs	r0, #0
 8007e30:	250a      	movs	r5, #10
 8007e32:	4639      	mov	r1, r7
 8007e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e38:	3b30      	subs	r3, #48	; 0x30
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d94d      	bls.n	8007eda <_svfiprintf_r+0x16e>
 8007e3e:	b1b8      	cbz	r0, 8007e70 <_svfiprintf_r+0x104>
 8007e40:	e00f      	b.n	8007e62 <_svfiprintf_r+0xf6>
 8007e42:	462f      	mov	r7, r5
 8007e44:	e7b8      	b.n	8007db8 <_svfiprintf_r+0x4c>
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <_svfiprintf_r+0x1dc>)
 8007e48:	1a80      	subs	r0, r0, r2
 8007e4a:	fa0b f000 	lsl.w	r0, fp, r0
 8007e4e:	4318      	orrs	r0, r3
 8007e50:	9004      	str	r0, [sp, #16]
 8007e52:	463d      	mov	r5, r7
 8007e54:	e7d3      	b.n	8007dfe <_svfiprintf_r+0x92>
 8007e56:	9a03      	ldr	r2, [sp, #12]
 8007e58:	1d11      	adds	r1, r2, #4
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	9103      	str	r1, [sp, #12]
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	db01      	blt.n	8007e66 <_svfiprintf_r+0xfa>
 8007e62:	9207      	str	r2, [sp, #28]
 8007e64:	e004      	b.n	8007e70 <_svfiprintf_r+0x104>
 8007e66:	4252      	negs	r2, r2
 8007e68:	f043 0302 	orr.w	r3, r3, #2
 8007e6c:	9207      	str	r2, [sp, #28]
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	783b      	ldrb	r3, [r7, #0]
 8007e72:	2b2e      	cmp	r3, #46	; 0x2e
 8007e74:	d10c      	bne.n	8007e90 <_svfiprintf_r+0x124>
 8007e76:	787b      	ldrb	r3, [r7, #1]
 8007e78:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7a:	d133      	bne.n	8007ee4 <_svfiprintf_r+0x178>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	1d1a      	adds	r2, r3, #4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	9203      	str	r2, [sp, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bfb8      	it	lt
 8007e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e8c:	3702      	adds	r7, #2
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	4d2e      	ldr	r5, [pc, #184]	; (8007f4c <_svfiprintf_r+0x1e0>)
 8007e92:	7839      	ldrb	r1, [r7, #0]
 8007e94:	2203      	movs	r2, #3
 8007e96:	4628      	mov	r0, r5
 8007e98:	f7f8 f9da 	bl	8000250 <memchr>
 8007e9c:	b138      	cbz	r0, 8007eae <_svfiprintf_r+0x142>
 8007e9e:	2340      	movs	r3, #64	; 0x40
 8007ea0:	1b40      	subs	r0, r0, r5
 8007ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	4303      	orrs	r3, r0
 8007eaa:	3701      	adds	r7, #1
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	7839      	ldrb	r1, [r7, #0]
 8007eb0:	4827      	ldr	r0, [pc, #156]	; (8007f50 <_svfiprintf_r+0x1e4>)
 8007eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb6:	2206      	movs	r2, #6
 8007eb8:	1c7e      	adds	r6, r7, #1
 8007eba:	f7f8 f9c9 	bl	8000250 <memchr>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d038      	beq.n	8007f34 <_svfiprintf_r+0x1c8>
 8007ec2:	4b24      	ldr	r3, [pc, #144]	; (8007f54 <_svfiprintf_r+0x1e8>)
 8007ec4:	bb13      	cbnz	r3, 8007f0c <_svfiprintf_r+0x1a0>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	3307      	adds	r3, #7
 8007eca:	f023 0307 	bic.w	r3, r3, #7
 8007ece:	3308      	adds	r3, #8
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	444b      	add	r3, r9
 8007ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed8:	e76d      	b.n	8007db6 <_svfiprintf_r+0x4a>
 8007eda:	fb05 3202 	mla	r2, r5, r2, r3
 8007ede:	2001      	movs	r0, #1
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	e7a6      	b.n	8007e32 <_svfiprintf_r+0xc6>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	3701      	adds	r7, #1
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	4619      	mov	r1, r3
 8007eec:	250a      	movs	r5, #10
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef4:	3a30      	subs	r2, #48	; 0x30
 8007ef6:	2a09      	cmp	r2, #9
 8007ef8:	d903      	bls.n	8007f02 <_svfiprintf_r+0x196>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0c8      	beq.n	8007e90 <_svfiprintf_r+0x124>
 8007efe:	9105      	str	r1, [sp, #20]
 8007f00:	e7c6      	b.n	8007e90 <_svfiprintf_r+0x124>
 8007f02:	fb05 2101 	mla	r1, r5, r1, r2
 8007f06:	2301      	movs	r3, #1
 8007f08:	4607      	mov	r7, r0
 8007f0a:	e7f0      	b.n	8007eee <_svfiprintf_r+0x182>
 8007f0c:	ab03      	add	r3, sp, #12
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4622      	mov	r2, r4
 8007f12:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <_svfiprintf_r+0x1ec>)
 8007f14:	a904      	add	r1, sp, #16
 8007f16:	4640      	mov	r0, r8
 8007f18:	f3af 8000 	nop.w
 8007f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f20:	4681      	mov	r9, r0
 8007f22:	d1d6      	bne.n	8007ed2 <_svfiprintf_r+0x166>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	065b      	lsls	r3, r3, #25
 8007f28:	f53f af35 	bmi.w	8007d96 <_svfiprintf_r+0x2a>
 8007f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f2e:	b01d      	add	sp, #116	; 0x74
 8007f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	ab03      	add	r3, sp, #12
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <_svfiprintf_r+0x1ec>)
 8007f3c:	a904      	add	r1, sp, #16
 8007f3e:	4640      	mov	r0, r8
 8007f40:	f000 f882 	bl	8008048 <_printf_i>
 8007f44:	e7ea      	b.n	8007f1c <_svfiprintf_r+0x1b0>
 8007f46:	bf00      	nop
 8007f48:	08008544 	.word	0x08008544
 8007f4c:	0800854a 	.word	0x0800854a
 8007f50:	0800854e 	.word	0x0800854e
 8007f54:	00000000 	.word	0x00000000
 8007f58:	08007cb9 	.word	0x08007cb9

08007f5c <_printf_common>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	4691      	mov	r9, r2
 8007f62:	461f      	mov	r7, r3
 8007f64:	688a      	ldr	r2, [r1, #8]
 8007f66:	690b      	ldr	r3, [r1, #16]
 8007f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bfb8      	it	lt
 8007f70:	4613      	movlt	r3, r2
 8007f72:	f8c9 3000 	str.w	r3, [r9]
 8007f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	b112      	cbz	r2, 8007f86 <_printf_common+0x2a>
 8007f80:	3301      	adds	r3, #1
 8007f82:	f8c9 3000 	str.w	r3, [r9]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	0699      	lsls	r1, r3, #26
 8007f8a:	bf42      	ittt	mi
 8007f8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f90:	3302      	addmi	r3, #2
 8007f92:	f8c9 3000 	strmi.w	r3, [r9]
 8007f96:	6825      	ldr	r5, [r4, #0]
 8007f98:	f015 0506 	ands.w	r5, r5, #6
 8007f9c:	d107      	bne.n	8007fae <_printf_common+0x52>
 8007f9e:	f104 0a19 	add.w	sl, r4, #25
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	42ab      	cmp	r3, r5
 8007fac:	dc28      	bgt.n	8008000 <_printf_common+0xa4>
 8007fae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	3300      	adds	r3, #0
 8007fb6:	bf18      	it	ne
 8007fb8:	2301      	movne	r3, #1
 8007fba:	0692      	lsls	r2, r2, #26
 8007fbc:	d42d      	bmi.n	800801a <_printf_common+0xbe>
 8007fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	47c0      	blx	r8
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d020      	beq.n	800800e <_printf_common+0xb2>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	68e5      	ldr	r5, [r4, #12]
 8007fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8007fd4:	f003 0306 	and.w	r3, r3, #6
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	bf08      	it	eq
 8007fdc:	1aad      	subeq	r5, r5, r2
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	6922      	ldr	r2, [r4, #16]
 8007fe2:	bf0c      	ite	eq
 8007fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fe8:	2500      	movne	r5, #0
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bfc4      	itt	gt
 8007fee:	1a9b      	subgt	r3, r3, r2
 8007ff0:	18ed      	addgt	r5, r5, r3
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	341a      	adds	r4, #26
 8007ff8:	454d      	cmp	r5, r9
 8007ffa:	d11a      	bne.n	8008032 <_printf_common+0xd6>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e008      	b.n	8008012 <_printf_common+0xb6>
 8008000:	2301      	movs	r3, #1
 8008002:	4652      	mov	r2, sl
 8008004:	4639      	mov	r1, r7
 8008006:	4630      	mov	r0, r6
 8008008:	47c0      	blx	r8
 800800a:	3001      	adds	r0, #1
 800800c:	d103      	bne.n	8008016 <_printf_common+0xba>
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	3501      	adds	r5, #1
 8008018:	e7c3      	b.n	8007fa2 <_printf_common+0x46>
 800801a:	18e1      	adds	r1, r4, r3
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	2030      	movs	r0, #48	; 0x30
 8008020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008024:	4422      	add	r2, r4
 8008026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800802a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800802e:	3302      	adds	r3, #2
 8008030:	e7c5      	b.n	8007fbe <_printf_common+0x62>
 8008032:	2301      	movs	r3, #1
 8008034:	4622      	mov	r2, r4
 8008036:	4639      	mov	r1, r7
 8008038:	4630      	mov	r0, r6
 800803a:	47c0      	blx	r8
 800803c:	3001      	adds	r0, #1
 800803e:	d0e6      	beq.n	800800e <_printf_common+0xb2>
 8008040:	f109 0901 	add.w	r9, r9, #1
 8008044:	e7d8      	b.n	8007ff8 <_printf_common+0x9c>
	...

08008048 <_printf_i>:
 8008048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800804c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008050:	460c      	mov	r4, r1
 8008052:	7e09      	ldrb	r1, [r1, #24]
 8008054:	b085      	sub	sp, #20
 8008056:	296e      	cmp	r1, #110	; 0x6e
 8008058:	4617      	mov	r7, r2
 800805a:	4606      	mov	r6, r0
 800805c:	4698      	mov	r8, r3
 800805e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008060:	f000 80b3 	beq.w	80081ca <_printf_i+0x182>
 8008064:	d822      	bhi.n	80080ac <_printf_i+0x64>
 8008066:	2963      	cmp	r1, #99	; 0x63
 8008068:	d036      	beq.n	80080d8 <_printf_i+0x90>
 800806a:	d80a      	bhi.n	8008082 <_printf_i+0x3a>
 800806c:	2900      	cmp	r1, #0
 800806e:	f000 80b9 	beq.w	80081e4 <_printf_i+0x19c>
 8008072:	2958      	cmp	r1, #88	; 0x58
 8008074:	f000 8083 	beq.w	800817e <_printf_i+0x136>
 8008078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800807c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008080:	e032      	b.n	80080e8 <_printf_i+0xa0>
 8008082:	2964      	cmp	r1, #100	; 0x64
 8008084:	d001      	beq.n	800808a <_printf_i+0x42>
 8008086:	2969      	cmp	r1, #105	; 0x69
 8008088:	d1f6      	bne.n	8008078 <_printf_i+0x30>
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	6813      	ldr	r3, [r2, #0]
 800808e:	0605      	lsls	r5, r0, #24
 8008090:	f103 0104 	add.w	r1, r3, #4
 8008094:	d52a      	bpl.n	80080ec <_printf_i+0xa4>
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	da03      	bge.n	80080a6 <_printf_i+0x5e>
 800809e:	222d      	movs	r2, #45	; 0x2d
 80080a0:	425b      	negs	r3, r3
 80080a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80080a6:	486f      	ldr	r0, [pc, #444]	; (8008264 <_printf_i+0x21c>)
 80080a8:	220a      	movs	r2, #10
 80080aa:	e039      	b.n	8008120 <_printf_i+0xd8>
 80080ac:	2973      	cmp	r1, #115	; 0x73
 80080ae:	f000 809d 	beq.w	80081ec <_printf_i+0x1a4>
 80080b2:	d808      	bhi.n	80080c6 <_printf_i+0x7e>
 80080b4:	296f      	cmp	r1, #111	; 0x6f
 80080b6:	d020      	beq.n	80080fa <_printf_i+0xb2>
 80080b8:	2970      	cmp	r1, #112	; 0x70
 80080ba:	d1dd      	bne.n	8008078 <_printf_i+0x30>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	f043 0320 	orr.w	r3, r3, #32
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	e003      	b.n	80080ce <_printf_i+0x86>
 80080c6:	2975      	cmp	r1, #117	; 0x75
 80080c8:	d017      	beq.n	80080fa <_printf_i+0xb2>
 80080ca:	2978      	cmp	r1, #120	; 0x78
 80080cc:	d1d4      	bne.n	8008078 <_printf_i+0x30>
 80080ce:	2378      	movs	r3, #120	; 0x78
 80080d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080d4:	4864      	ldr	r0, [pc, #400]	; (8008268 <_printf_i+0x220>)
 80080d6:	e055      	b.n	8008184 <_printf_i+0x13c>
 80080d8:	6813      	ldr	r3, [r2, #0]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6011      	str	r1, [r2, #0]
 80080e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080e8:	2301      	movs	r3, #1
 80080ea:	e08c      	b.n	8008206 <_printf_i+0x1be>
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6011      	str	r1, [r2, #0]
 80080f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080f4:	bf18      	it	ne
 80080f6:	b21b      	sxthne	r3, r3
 80080f8:	e7cf      	b.n	800809a <_printf_i+0x52>
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1d18      	adds	r0, r3, #4
 8008100:	6010      	str	r0, [r2, #0]
 8008102:	0628      	lsls	r0, r5, #24
 8008104:	d501      	bpl.n	800810a <_printf_i+0xc2>
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	e002      	b.n	8008110 <_printf_i+0xc8>
 800810a:	0668      	lsls	r0, r5, #25
 800810c:	d5fb      	bpl.n	8008106 <_printf_i+0xbe>
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	4854      	ldr	r0, [pc, #336]	; (8008264 <_printf_i+0x21c>)
 8008112:	296f      	cmp	r1, #111	; 0x6f
 8008114:	bf14      	ite	ne
 8008116:	220a      	movne	r2, #10
 8008118:	2208      	moveq	r2, #8
 800811a:	2100      	movs	r1, #0
 800811c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008120:	6865      	ldr	r5, [r4, #4]
 8008122:	60a5      	str	r5, [r4, #8]
 8008124:	2d00      	cmp	r5, #0
 8008126:	f2c0 8095 	blt.w	8008254 <_printf_i+0x20c>
 800812a:	6821      	ldr	r1, [r4, #0]
 800812c:	f021 0104 	bic.w	r1, r1, #4
 8008130:	6021      	str	r1, [r4, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d13d      	bne.n	80081b2 <_printf_i+0x16a>
 8008136:	2d00      	cmp	r5, #0
 8008138:	f040 808e 	bne.w	8008258 <_printf_i+0x210>
 800813c:	4665      	mov	r5, ip
 800813e:	2a08      	cmp	r2, #8
 8008140:	d10b      	bne.n	800815a <_printf_i+0x112>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	07db      	lsls	r3, r3, #31
 8008146:	d508      	bpl.n	800815a <_printf_i+0x112>
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	6862      	ldr	r2, [r4, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	bfde      	ittt	le
 8008150:	2330      	movle	r3, #48	; 0x30
 8008152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008156:	f105 35ff 	addle.w	r5, r5, #4294967295
 800815a:	ebac 0305 	sub.w	r3, ip, r5
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	f8cd 8000 	str.w	r8, [sp]
 8008164:	463b      	mov	r3, r7
 8008166:	aa03      	add	r2, sp, #12
 8008168:	4621      	mov	r1, r4
 800816a:	4630      	mov	r0, r6
 800816c:	f7ff fef6 	bl	8007f5c <_printf_common>
 8008170:	3001      	adds	r0, #1
 8008172:	d14d      	bne.n	8008210 <_printf_i+0x1c8>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b005      	add	sp, #20
 800817a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800817e:	4839      	ldr	r0, [pc, #228]	; (8008264 <_printf_i+0x21c>)
 8008180:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	6821      	ldr	r1, [r4, #0]
 8008188:	1d1d      	adds	r5, r3, #4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6015      	str	r5, [r2, #0]
 800818e:	060a      	lsls	r2, r1, #24
 8008190:	d50b      	bpl.n	80081aa <_printf_i+0x162>
 8008192:	07ca      	lsls	r2, r1, #31
 8008194:	bf44      	itt	mi
 8008196:	f041 0120 	orrmi.w	r1, r1, #32
 800819a:	6021      	strmi	r1, [r4, #0]
 800819c:	b91b      	cbnz	r3, 80081a6 <_printf_i+0x15e>
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	f022 0220 	bic.w	r2, r2, #32
 80081a4:	6022      	str	r2, [r4, #0]
 80081a6:	2210      	movs	r2, #16
 80081a8:	e7b7      	b.n	800811a <_printf_i+0xd2>
 80081aa:	064d      	lsls	r5, r1, #25
 80081ac:	bf48      	it	mi
 80081ae:	b29b      	uxthmi	r3, r3
 80081b0:	e7ef      	b.n	8008192 <_printf_i+0x14a>
 80081b2:	4665      	mov	r5, ip
 80081b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80081b8:	fb02 3311 	mls	r3, r2, r1, r3
 80081bc:	5cc3      	ldrb	r3, [r0, r3]
 80081be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80081c2:	460b      	mov	r3, r1
 80081c4:	2900      	cmp	r1, #0
 80081c6:	d1f5      	bne.n	80081b4 <_printf_i+0x16c>
 80081c8:	e7b9      	b.n	800813e <_printf_i+0xf6>
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	6825      	ldr	r5, [r4, #0]
 80081ce:	6961      	ldr	r1, [r4, #20]
 80081d0:	1d18      	adds	r0, r3, #4
 80081d2:	6010      	str	r0, [r2, #0]
 80081d4:	0628      	lsls	r0, r5, #24
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	d501      	bpl.n	80081de <_printf_i+0x196>
 80081da:	6019      	str	r1, [r3, #0]
 80081dc:	e002      	b.n	80081e4 <_printf_i+0x19c>
 80081de:	066a      	lsls	r2, r5, #25
 80081e0:	d5fb      	bpl.n	80081da <_printf_i+0x192>
 80081e2:	8019      	strh	r1, [r3, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	4665      	mov	r5, ip
 80081ea:	e7b9      	b.n	8008160 <_printf_i+0x118>
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	1d19      	adds	r1, r3, #4
 80081f0:	6011      	str	r1, [r2, #0]
 80081f2:	681d      	ldr	r5, [r3, #0]
 80081f4:	6862      	ldr	r2, [r4, #4]
 80081f6:	2100      	movs	r1, #0
 80081f8:	4628      	mov	r0, r5
 80081fa:	f7f8 f829 	bl	8000250 <memchr>
 80081fe:	b108      	cbz	r0, 8008204 <_printf_i+0x1bc>
 8008200:	1b40      	subs	r0, r0, r5
 8008202:	6060      	str	r0, [r4, #4]
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	2300      	movs	r3, #0
 800820a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800820e:	e7a7      	b.n	8008160 <_printf_i+0x118>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	462a      	mov	r2, r5
 8008214:	4639      	mov	r1, r7
 8008216:	4630      	mov	r0, r6
 8008218:	47c0      	blx	r8
 800821a:	3001      	adds	r0, #1
 800821c:	d0aa      	beq.n	8008174 <_printf_i+0x12c>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	079b      	lsls	r3, r3, #30
 8008222:	d413      	bmi.n	800824c <_printf_i+0x204>
 8008224:	68e0      	ldr	r0, [r4, #12]
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	4298      	cmp	r0, r3
 800822a:	bfb8      	it	lt
 800822c:	4618      	movlt	r0, r3
 800822e:	e7a3      	b.n	8008178 <_printf_i+0x130>
 8008230:	2301      	movs	r3, #1
 8008232:	464a      	mov	r2, r9
 8008234:	4639      	mov	r1, r7
 8008236:	4630      	mov	r0, r6
 8008238:	47c0      	blx	r8
 800823a:	3001      	adds	r0, #1
 800823c:	d09a      	beq.n	8008174 <_printf_i+0x12c>
 800823e:	3501      	adds	r5, #1
 8008240:	68e3      	ldr	r3, [r4, #12]
 8008242:	9a03      	ldr	r2, [sp, #12]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	42ab      	cmp	r3, r5
 8008248:	dcf2      	bgt.n	8008230 <_printf_i+0x1e8>
 800824a:	e7eb      	b.n	8008224 <_printf_i+0x1dc>
 800824c:	2500      	movs	r5, #0
 800824e:	f104 0919 	add.w	r9, r4, #25
 8008252:	e7f5      	b.n	8008240 <_printf_i+0x1f8>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1ac      	bne.n	80081b2 <_printf_i+0x16a>
 8008258:	7803      	ldrb	r3, [r0, #0]
 800825a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800825e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008262:	e76c      	b.n	800813e <_printf_i+0xf6>
 8008264:	08008555 	.word	0x08008555
 8008268:	08008566 	.word	0x08008566

0800826c <memcpy>:
 800826c:	b510      	push	{r4, lr}
 800826e:	1e43      	subs	r3, r0, #1
 8008270:	440a      	add	r2, r1
 8008272:	4291      	cmp	r1, r2
 8008274:	d100      	bne.n	8008278 <memcpy+0xc>
 8008276:	bd10      	pop	{r4, pc}
 8008278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800827c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008280:	e7f7      	b.n	8008272 <memcpy+0x6>

08008282 <memmove>:
 8008282:	4288      	cmp	r0, r1
 8008284:	b510      	push	{r4, lr}
 8008286:	eb01 0302 	add.w	r3, r1, r2
 800828a:	d807      	bhi.n	800829c <memmove+0x1a>
 800828c:	1e42      	subs	r2, r0, #1
 800828e:	4299      	cmp	r1, r3
 8008290:	d00a      	beq.n	80082a8 <memmove+0x26>
 8008292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008296:	f802 4f01 	strb.w	r4, [r2, #1]!
 800829a:	e7f8      	b.n	800828e <memmove+0xc>
 800829c:	4283      	cmp	r3, r0
 800829e:	d9f5      	bls.n	800828c <memmove+0xa>
 80082a0:	1881      	adds	r1, r0, r2
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	42d3      	cmn	r3, r2
 80082a6:	d100      	bne.n	80082aa <memmove+0x28>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80082b2:	e7f7      	b.n	80082a4 <memmove+0x22>

080082b4 <_free_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d045      	beq.n	8008348 <_free_r+0x94>
 80082bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c0:	1f0c      	subs	r4, r1, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfb8      	it	lt
 80082c6:	18e4      	addlt	r4, r4, r3
 80082c8:	f000 f8d2 	bl	8008470 <__malloc_lock>
 80082cc:	4a1f      	ldr	r2, [pc, #124]	; (800834c <_free_r+0x98>)
 80082ce:	6813      	ldr	r3, [r2, #0]
 80082d0:	4610      	mov	r0, r2
 80082d2:	b933      	cbnz	r3, 80082e2 <_free_r+0x2e>
 80082d4:	6063      	str	r3, [r4, #4]
 80082d6:	6014      	str	r4, [r2, #0]
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082de:	f000 b8c8 	b.w	8008472 <__malloc_unlock>
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	d90c      	bls.n	8008300 <_free_r+0x4c>
 80082e6:	6821      	ldr	r1, [r4, #0]
 80082e8:	1862      	adds	r2, r4, r1
 80082ea:	4293      	cmp	r3, r2
 80082ec:	bf04      	itt	eq
 80082ee:	681a      	ldreq	r2, [r3, #0]
 80082f0:	685b      	ldreq	r3, [r3, #4]
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	bf04      	itt	eq
 80082f6:	1852      	addeq	r2, r2, r1
 80082f8:	6022      	streq	r2, [r4, #0]
 80082fa:	6004      	str	r4, [r0, #0]
 80082fc:	e7ec      	b.n	80082d8 <_free_r+0x24>
 80082fe:	4613      	mov	r3, r2
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	b10a      	cbz	r2, 8008308 <_free_r+0x54>
 8008304:	42a2      	cmp	r2, r4
 8008306:	d9fa      	bls.n	80082fe <_free_r+0x4a>
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	1858      	adds	r0, r3, r1
 800830c:	42a0      	cmp	r0, r4
 800830e:	d10b      	bne.n	8008328 <_free_r+0x74>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	4401      	add	r1, r0
 8008314:	1858      	adds	r0, r3, r1
 8008316:	4282      	cmp	r2, r0
 8008318:	6019      	str	r1, [r3, #0]
 800831a:	d1dd      	bne.n	80082d8 <_free_r+0x24>
 800831c:	6810      	ldr	r0, [r2, #0]
 800831e:	6852      	ldr	r2, [r2, #4]
 8008320:	605a      	str	r2, [r3, #4]
 8008322:	4401      	add	r1, r0
 8008324:	6019      	str	r1, [r3, #0]
 8008326:	e7d7      	b.n	80082d8 <_free_r+0x24>
 8008328:	d902      	bls.n	8008330 <_free_r+0x7c>
 800832a:	230c      	movs	r3, #12
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	e7d3      	b.n	80082d8 <_free_r+0x24>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428a      	cmp	r2, r1
 8008336:	bf04      	itt	eq
 8008338:	6811      	ldreq	r1, [r2, #0]
 800833a:	6852      	ldreq	r2, [r2, #4]
 800833c:	6062      	str	r2, [r4, #4]
 800833e:	bf04      	itt	eq
 8008340:	1809      	addeq	r1, r1, r0
 8008342:	6021      	streq	r1, [r4, #0]
 8008344:	605c      	str	r4, [r3, #4]
 8008346:	e7c7      	b.n	80082d8 <_free_r+0x24>
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	bf00      	nop
 800834c:	20000708 	.word	0x20000708

08008350 <_malloc_r>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	1ccd      	adds	r5, r1, #3
 8008354:	f025 0503 	bic.w	r5, r5, #3
 8008358:	3508      	adds	r5, #8
 800835a:	2d0c      	cmp	r5, #12
 800835c:	bf38      	it	cc
 800835e:	250c      	movcc	r5, #12
 8008360:	2d00      	cmp	r5, #0
 8008362:	4606      	mov	r6, r0
 8008364:	db01      	blt.n	800836a <_malloc_r+0x1a>
 8008366:	42a9      	cmp	r1, r5
 8008368:	d903      	bls.n	8008372 <_malloc_r+0x22>
 800836a:	230c      	movs	r3, #12
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	2000      	movs	r0, #0
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	f000 f87d 	bl	8008470 <__malloc_lock>
 8008376:	4a21      	ldr	r2, [pc, #132]	; (80083fc <_malloc_r+0xac>)
 8008378:	6814      	ldr	r4, [r2, #0]
 800837a:	4621      	mov	r1, r4
 800837c:	b991      	cbnz	r1, 80083a4 <_malloc_r+0x54>
 800837e:	4c20      	ldr	r4, [pc, #128]	; (8008400 <_malloc_r+0xb0>)
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	b91b      	cbnz	r3, 800838c <_malloc_r+0x3c>
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f863 	bl	8008450 <_sbrk_r>
 800838a:	6020      	str	r0, [r4, #0]
 800838c:	4629      	mov	r1, r5
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f85e 	bl	8008450 <_sbrk_r>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d124      	bne.n	80083e2 <_malloc_r+0x92>
 8008398:	230c      	movs	r3, #12
 800839a:	6033      	str	r3, [r6, #0]
 800839c:	4630      	mov	r0, r6
 800839e:	f000 f868 	bl	8008472 <__malloc_unlock>
 80083a2:	e7e4      	b.n	800836e <_malloc_r+0x1e>
 80083a4:	680b      	ldr	r3, [r1, #0]
 80083a6:	1b5b      	subs	r3, r3, r5
 80083a8:	d418      	bmi.n	80083dc <_malloc_r+0x8c>
 80083aa:	2b0b      	cmp	r3, #11
 80083ac:	d90f      	bls.n	80083ce <_malloc_r+0x7e>
 80083ae:	600b      	str	r3, [r1, #0]
 80083b0:	50cd      	str	r5, [r1, r3]
 80083b2:	18cc      	adds	r4, r1, r3
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 f85c 	bl	8008472 <__malloc_unlock>
 80083ba:	f104 000b 	add.w	r0, r4, #11
 80083be:	1d23      	adds	r3, r4, #4
 80083c0:	f020 0007 	bic.w	r0, r0, #7
 80083c4:	1ac3      	subs	r3, r0, r3
 80083c6:	d0d3      	beq.n	8008370 <_malloc_r+0x20>
 80083c8:	425a      	negs	r2, r3
 80083ca:	50e2      	str	r2, [r4, r3]
 80083cc:	e7d0      	b.n	8008370 <_malloc_r+0x20>
 80083ce:	428c      	cmp	r4, r1
 80083d0:	684b      	ldr	r3, [r1, #4]
 80083d2:	bf16      	itet	ne
 80083d4:	6063      	strne	r3, [r4, #4]
 80083d6:	6013      	streq	r3, [r2, #0]
 80083d8:	460c      	movne	r4, r1
 80083da:	e7eb      	b.n	80083b4 <_malloc_r+0x64>
 80083dc:	460c      	mov	r4, r1
 80083de:	6849      	ldr	r1, [r1, #4]
 80083e0:	e7cc      	b.n	800837c <_malloc_r+0x2c>
 80083e2:	1cc4      	adds	r4, r0, #3
 80083e4:	f024 0403 	bic.w	r4, r4, #3
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d005      	beq.n	80083f8 <_malloc_r+0xa8>
 80083ec:	1a21      	subs	r1, r4, r0
 80083ee:	4630      	mov	r0, r6
 80083f0:	f000 f82e 	bl	8008450 <_sbrk_r>
 80083f4:	3001      	adds	r0, #1
 80083f6:	d0cf      	beq.n	8008398 <_malloc_r+0x48>
 80083f8:	6025      	str	r5, [r4, #0]
 80083fa:	e7db      	b.n	80083b4 <_malloc_r+0x64>
 80083fc:	20000708 	.word	0x20000708
 8008400:	2000070c 	.word	0x2000070c

08008404 <_realloc_r>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	4607      	mov	r7, r0
 8008408:	4614      	mov	r4, r2
 800840a:	460e      	mov	r6, r1
 800840c:	b921      	cbnz	r1, 8008418 <_realloc_r+0x14>
 800840e:	4611      	mov	r1, r2
 8008410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008414:	f7ff bf9c 	b.w	8008350 <_malloc_r>
 8008418:	b922      	cbnz	r2, 8008424 <_realloc_r+0x20>
 800841a:	f7ff ff4b 	bl	80082b4 <_free_r>
 800841e:	4625      	mov	r5, r4
 8008420:	4628      	mov	r0, r5
 8008422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008424:	f000 f826 	bl	8008474 <_malloc_usable_size_r>
 8008428:	42a0      	cmp	r0, r4
 800842a:	d20f      	bcs.n	800844c <_realloc_r+0x48>
 800842c:	4621      	mov	r1, r4
 800842e:	4638      	mov	r0, r7
 8008430:	f7ff ff8e 	bl	8008350 <_malloc_r>
 8008434:	4605      	mov	r5, r0
 8008436:	2800      	cmp	r0, #0
 8008438:	d0f2      	beq.n	8008420 <_realloc_r+0x1c>
 800843a:	4631      	mov	r1, r6
 800843c:	4622      	mov	r2, r4
 800843e:	f7ff ff15 	bl	800826c <memcpy>
 8008442:	4631      	mov	r1, r6
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff ff35 	bl	80082b4 <_free_r>
 800844a:	e7e9      	b.n	8008420 <_realloc_r+0x1c>
 800844c:	4635      	mov	r5, r6
 800844e:	e7e7      	b.n	8008420 <_realloc_r+0x1c>

08008450 <_sbrk_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4c06      	ldr	r4, [pc, #24]	; (800846c <_sbrk_r+0x1c>)
 8008454:	2300      	movs	r3, #0
 8008456:	4605      	mov	r5, r0
 8008458:	4608      	mov	r0, r1
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	f7fa fd8e 	bl	8002f7c <_sbrk>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_sbrk_r+0x1a>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	b103      	cbz	r3, 800846a <_sbrk_r+0x1a>
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20000d2c 	.word	0x20000d2c

08008470 <__malloc_lock>:
 8008470:	4770      	bx	lr

08008472 <__malloc_unlock>:
 8008472:	4770      	bx	lr

08008474 <_malloc_usable_size_r>:
 8008474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008478:	1f18      	subs	r0, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfbc      	itt	lt
 800847e:	580b      	ldrlt	r3, [r1, r0]
 8008480:	18c0      	addlt	r0, r0, r3
 8008482:	4770      	bx	lr

08008484 <_init>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr

08008490 <_fini>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr
